/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ikamobile.pa.thrift.server.acceptor;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-8-31")
public class OrderCreateParam implements org.apache.thrift.TBase<OrderCreateParam, OrderCreateParam._Fields>, java.io.Serializable, Cloneable, Comparable<OrderCreateParam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OrderCreateParam");

  private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PASSENGERS_FIELD_DESC = new org.apache.thrift.protocol.TField("passengers", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField ABOARD_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("aboardPosition", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField ARR_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("arrPosition", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField FLIGHT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("flightNumber", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField FLIGHT_DEP_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("flightDepTime", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField VOUCHER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("voucherCode", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField IS_ONLINE_FIELD_DESC = new org.apache.thrift.protocol.TField("isOnline", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField OPERATOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("operatorId", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OrderCreateParamStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OrderCreateParamTupleSchemeFactory());
  }

  /**
   * 预订人手机号
   */
  public String mobile; // required
  /**
   * 乘客信息 <b>至少上传 姓名、证件类型、证件号码</b>
   */
  public List<PassengerDto> passengers; // required
  /**
   * 上车地点
   */
  public com.ikamobile.pa.thrift.server.acceptor.PositionDto aboardPosition; // required
  /**
   * 下车地点
   */
  public com.ikamobile.pa.thrift.server.acceptor.PositionDto arrPosition; // required
  /**
   * 航班号
   */
  public String flightNumber; // required
  /**
   * 航班起飞时间
   */
  public long flightDepTime; // required
  /**
   * 铁航接送单单号 <b>非必填</b>
   */
  public String voucherCode; // required
  /**
   * 是否是线上单
   * 
   */
  public boolean isOnline; // required
  /**
   * 操作人id 用于记录线下创建订单的操作员
   * 
   */
  public String operatorId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 预订人手机号
     */
    MOBILE((short)1, "mobile"),
    /**
     * 乘客信息 <b>至少上传 姓名、证件类型、证件号码</b>
     */
    PASSENGERS((short)2, "passengers"),
    /**
     * 上车地点
     */
    ABOARD_POSITION((short)3, "aboardPosition"),
    /**
     * 下车地点
     */
    ARR_POSITION((short)4, "arrPosition"),
    /**
     * 航班号
     */
    FLIGHT_NUMBER((short)5, "flightNumber"),
    /**
     * 航班起飞时间
     */
    FLIGHT_DEP_TIME((short)6, "flightDepTime"),
    /**
     * 铁航接送单单号 <b>非必填</b>
     */
    VOUCHER_CODE((short)7, "voucherCode"),
    /**
     * 是否是线上单
     * 
     */
    IS_ONLINE((short)8, "isOnline"),
    /**
     * 操作人id 用于记录线下创建订单的操作员
     * 
     */
    OPERATOR_ID((short)9, "operatorId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MOBILE
          return MOBILE;
        case 2: // PASSENGERS
          return PASSENGERS;
        case 3: // ABOARD_POSITION
          return ABOARD_POSITION;
        case 4: // ARR_POSITION
          return ARR_POSITION;
        case 5: // FLIGHT_NUMBER
          return FLIGHT_NUMBER;
        case 6: // FLIGHT_DEP_TIME
          return FLIGHT_DEP_TIME;
        case 7: // VOUCHER_CODE
          return VOUCHER_CODE;
        case 8: // IS_ONLINE
          return IS_ONLINE;
        case 9: // OPERATOR_ID
          return OPERATOR_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FLIGHTDEPTIME_ISSET_ID = 0;
  private static final int __ISONLINE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASSENGERS, new org.apache.thrift.meta_data.FieldMetaData("passengers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PassengerDto.class))));
    tmpMap.put(_Fields.ABOARD_POSITION, new org.apache.thrift.meta_data.FieldMetaData("aboardPosition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ikamobile.pa.thrift.server.acceptor.PositionDto.class)));
    tmpMap.put(_Fields.ARR_POSITION, new org.apache.thrift.meta_data.FieldMetaData("arrPosition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ikamobile.pa.thrift.server.acceptor.PositionDto.class)));
    tmpMap.put(_Fields.FLIGHT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("flightNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FLIGHT_DEP_TIME, new org.apache.thrift.meta_data.FieldMetaData("flightDepTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VOUCHER_CODE, new org.apache.thrift.meta_data.FieldMetaData("voucherCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_ONLINE, new org.apache.thrift.meta_data.FieldMetaData("isOnline", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.OPERATOR_ID, new org.apache.thrift.meta_data.FieldMetaData("operatorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OrderCreateParam.class, metaDataMap);
  }

  public OrderCreateParam() {
    this.isOnline = true;

  }

  public OrderCreateParam(
    String mobile,
    List<PassengerDto> passengers,
    com.ikamobile.pa.thrift.server.acceptor.PositionDto aboardPosition,
    com.ikamobile.pa.thrift.server.acceptor.PositionDto arrPosition,
    String flightNumber,
    long flightDepTime,
    String voucherCode,
    boolean isOnline,
    String operatorId)
  {
    this();
    this.mobile = mobile;
    this.passengers = passengers;
    this.aboardPosition = aboardPosition;
    this.arrPosition = arrPosition;
    this.flightNumber = flightNumber;
    this.flightDepTime = flightDepTime;
    setFlightDepTimeIsSet(true);
    this.voucherCode = voucherCode;
    this.isOnline = isOnline;
    setIsOnlineIsSet(true);
    this.operatorId = operatorId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OrderCreateParam(OrderCreateParam other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetMobile()) {
      this.mobile = other.mobile;
    }
    if (other.isSetPassengers()) {
      List<PassengerDto> __this__passengers = new ArrayList<PassengerDto>(other.passengers.size());
      for (PassengerDto other_element : other.passengers) {
        __this__passengers.add(new PassengerDto(other_element));
      }
      this.passengers = __this__passengers;
    }
    if (other.isSetAboardPosition()) {
      this.aboardPosition = new com.ikamobile.pa.thrift.server.acceptor.PositionDto(other.aboardPosition);
    }
    if (other.isSetArrPosition()) {
      this.arrPosition = new com.ikamobile.pa.thrift.server.acceptor.PositionDto(other.arrPosition);
    }
    if (other.isSetFlightNumber()) {
      this.flightNumber = other.flightNumber;
    }
    this.flightDepTime = other.flightDepTime;
    if (other.isSetVoucherCode()) {
      this.voucherCode = other.voucherCode;
    }
    this.isOnline = other.isOnline;
    if (other.isSetOperatorId()) {
      this.operatorId = other.operatorId;
    }
  }

  public OrderCreateParam deepCopy() {
    return new OrderCreateParam(this);
  }

  @Override
  public void clear() {
    this.mobile = null;
    this.passengers = null;
    this.aboardPosition = null;
    this.arrPosition = null;
    this.flightNumber = null;
    setFlightDepTimeIsSet(false);
    this.flightDepTime = 0;
    this.voucherCode = null;
    this.isOnline = true;

    this.operatorId = null;
  }

  /**
   * 预订人手机号
   */
  public String getMobile() {
    return this.mobile;
  }

  /**
   * 预订人手机号
   */
  public OrderCreateParam setMobile(String mobile) {
    this.mobile = mobile;
    return this;
  }

  public void unsetMobile() {
    this.mobile = null;
  }

  /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
  public boolean isSetMobile() {
    return this.mobile != null;
  }

  public void setMobileIsSet(boolean value) {
    if (!value) {
      this.mobile = null;
    }
  }

  public int getPassengersSize() {
    return (this.passengers == null) ? 0 : this.passengers.size();
  }

  public java.util.Iterator<PassengerDto> getPassengersIterator() {
    return (this.passengers == null) ? null : this.passengers.iterator();
  }

  public void addToPassengers(PassengerDto elem) {
    if (this.passengers == null) {
      this.passengers = new ArrayList<PassengerDto>();
    }
    this.passengers.add(elem);
  }

  /**
   * 乘客信息 <b>至少上传 姓名、证件类型、证件号码</b>
   */
  public List<PassengerDto> getPassengers() {
    return this.passengers;
  }

  /**
   * 乘客信息 <b>至少上传 姓名、证件类型、证件号码</b>
   */
  public OrderCreateParam setPassengers(List<PassengerDto> passengers) {
    this.passengers = passengers;
    return this;
  }

  public void unsetPassengers() {
    this.passengers = null;
  }

  /** Returns true if field passengers is set (has been assigned a value) and false otherwise */
  public boolean isSetPassengers() {
    return this.passengers != null;
  }

  public void setPassengersIsSet(boolean value) {
    if (!value) {
      this.passengers = null;
    }
  }

  /**
   * 上车地点
   */
  public com.ikamobile.pa.thrift.server.acceptor.PositionDto getAboardPosition() {
    return this.aboardPosition;
  }

  /**
   * 上车地点
   */
  public OrderCreateParam setAboardPosition(com.ikamobile.pa.thrift.server.acceptor.PositionDto aboardPosition) {
    this.aboardPosition = aboardPosition;
    return this;
  }

  public void unsetAboardPosition() {
    this.aboardPosition = null;
  }

  /** Returns true if field aboardPosition is set (has been assigned a value) and false otherwise */
  public boolean isSetAboardPosition() {
    return this.aboardPosition != null;
  }

  public void setAboardPositionIsSet(boolean value) {
    if (!value) {
      this.aboardPosition = null;
    }
  }

  /**
   * 下车地点
   */
  public com.ikamobile.pa.thrift.server.acceptor.PositionDto getArrPosition() {
    return this.arrPosition;
  }

  /**
   * 下车地点
   */
  public OrderCreateParam setArrPosition(com.ikamobile.pa.thrift.server.acceptor.PositionDto arrPosition) {
    this.arrPosition = arrPosition;
    return this;
  }

  public void unsetArrPosition() {
    this.arrPosition = null;
  }

  /** Returns true if field arrPosition is set (has been assigned a value) and false otherwise */
  public boolean isSetArrPosition() {
    return this.arrPosition != null;
  }

  public void setArrPositionIsSet(boolean value) {
    if (!value) {
      this.arrPosition = null;
    }
  }

  /**
   * 航班号
   */
  public String getFlightNumber() {
    return this.flightNumber;
  }

  /**
   * 航班号
   */
  public OrderCreateParam setFlightNumber(String flightNumber) {
    this.flightNumber = flightNumber;
    return this;
  }

  public void unsetFlightNumber() {
    this.flightNumber = null;
  }

  /** Returns true if field flightNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetFlightNumber() {
    return this.flightNumber != null;
  }

  public void setFlightNumberIsSet(boolean value) {
    if (!value) {
      this.flightNumber = null;
    }
  }

  /**
   * 航班起飞时间
   */
  public long getFlightDepTime() {
    return this.flightDepTime;
  }

  /**
   * 航班起飞时间
   */
  public OrderCreateParam setFlightDepTime(long flightDepTime) {
    this.flightDepTime = flightDepTime;
    setFlightDepTimeIsSet(true);
    return this;
  }

  public void unsetFlightDepTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FLIGHTDEPTIME_ISSET_ID);
  }

  /** Returns true if field flightDepTime is set (has been assigned a value) and false otherwise */
  public boolean isSetFlightDepTime() {
    return EncodingUtils.testBit(__isset_bitfield, __FLIGHTDEPTIME_ISSET_ID);
  }

  public void setFlightDepTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FLIGHTDEPTIME_ISSET_ID, value);
  }

  /**
   * 铁航接送单单号 <b>非必填</b>
   */
  public String getVoucherCode() {
    return this.voucherCode;
  }

  /**
   * 铁航接送单单号 <b>非必填</b>
   */
  public OrderCreateParam setVoucherCode(String voucherCode) {
    this.voucherCode = voucherCode;
    return this;
  }

  public void unsetVoucherCode() {
    this.voucherCode = null;
  }

  /** Returns true if field voucherCode is set (has been assigned a value) and false otherwise */
  public boolean isSetVoucherCode() {
    return this.voucherCode != null;
  }

  public void setVoucherCodeIsSet(boolean value) {
    if (!value) {
      this.voucherCode = null;
    }
  }

  /**
   * 是否是线上单
   * 
   */
  public boolean isIsOnline() {
    return this.isOnline;
  }

  /**
   * 是否是线上单
   * 
   */
  public OrderCreateParam setIsOnline(boolean isOnline) {
    this.isOnline = isOnline;
    setIsOnlineIsSet(true);
    return this;
  }

  public void unsetIsOnline() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISONLINE_ISSET_ID);
  }

  /** Returns true if field isOnline is set (has been assigned a value) and false otherwise */
  public boolean isSetIsOnline() {
    return EncodingUtils.testBit(__isset_bitfield, __ISONLINE_ISSET_ID);
  }

  public void setIsOnlineIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISONLINE_ISSET_ID, value);
  }

  /**
   * 操作人id 用于记录线下创建订单的操作员
   * 
   */
  public String getOperatorId() {
    return this.operatorId;
  }

  /**
   * 操作人id 用于记录线下创建订单的操作员
   * 
   */
  public OrderCreateParam setOperatorId(String operatorId) {
    this.operatorId = operatorId;
    return this;
  }

  public void unsetOperatorId() {
    this.operatorId = null;
  }

  /** Returns true if field operatorId is set (has been assigned a value) and false otherwise */
  public boolean isSetOperatorId() {
    return this.operatorId != null;
  }

  public void setOperatorIdIsSet(boolean value) {
    if (!value) {
      this.operatorId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MOBILE:
      if (value == null) {
        unsetMobile();
      } else {
        setMobile((String)value);
      }
      break;

    case PASSENGERS:
      if (value == null) {
        unsetPassengers();
      } else {
        setPassengers((List<PassengerDto>)value);
      }
      break;

    case ABOARD_POSITION:
      if (value == null) {
        unsetAboardPosition();
      } else {
        setAboardPosition((com.ikamobile.pa.thrift.server.acceptor.PositionDto)value);
      }
      break;

    case ARR_POSITION:
      if (value == null) {
        unsetArrPosition();
      } else {
        setArrPosition((com.ikamobile.pa.thrift.server.acceptor.PositionDto)value);
      }
      break;

    case FLIGHT_NUMBER:
      if (value == null) {
        unsetFlightNumber();
      } else {
        setFlightNumber((String)value);
      }
      break;

    case FLIGHT_DEP_TIME:
      if (value == null) {
        unsetFlightDepTime();
      } else {
        setFlightDepTime((Long)value);
      }
      break;

    case VOUCHER_CODE:
      if (value == null) {
        unsetVoucherCode();
      } else {
        setVoucherCode((String)value);
      }
      break;

    case IS_ONLINE:
      if (value == null) {
        unsetIsOnline();
      } else {
        setIsOnline((Boolean)value);
      }
      break;

    case OPERATOR_ID:
      if (value == null) {
        unsetOperatorId();
      } else {
        setOperatorId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MOBILE:
      return getMobile();

    case PASSENGERS:
      return getPassengers();

    case ABOARD_POSITION:
      return getAboardPosition();

    case ARR_POSITION:
      return getArrPosition();

    case FLIGHT_NUMBER:
      return getFlightNumber();

    case FLIGHT_DEP_TIME:
      return Long.valueOf(getFlightDepTime());

    case VOUCHER_CODE:
      return getVoucherCode();

    case IS_ONLINE:
      return Boolean.valueOf(isIsOnline());

    case OPERATOR_ID:
      return getOperatorId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MOBILE:
      return isSetMobile();
    case PASSENGERS:
      return isSetPassengers();
    case ABOARD_POSITION:
      return isSetAboardPosition();
    case ARR_POSITION:
      return isSetArrPosition();
    case FLIGHT_NUMBER:
      return isSetFlightNumber();
    case FLIGHT_DEP_TIME:
      return isSetFlightDepTime();
    case VOUCHER_CODE:
      return isSetVoucherCode();
    case IS_ONLINE:
      return isSetIsOnline();
    case OPERATOR_ID:
      return isSetOperatorId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OrderCreateParam)
      return this.equals((OrderCreateParam)that);
    return false;
  }

  public boolean equals(OrderCreateParam that) {
    if (that == null)
      return false;

    boolean this_present_mobile = true && this.isSetMobile();
    boolean that_present_mobile = true && that.isSetMobile();
    if (this_present_mobile || that_present_mobile) {
      if (!(this_present_mobile && that_present_mobile))
        return false;
      if (!this.mobile.equals(that.mobile))
        return false;
    }

    boolean this_present_passengers = true && this.isSetPassengers();
    boolean that_present_passengers = true && that.isSetPassengers();
    if (this_present_passengers || that_present_passengers) {
      if (!(this_present_passengers && that_present_passengers))
        return false;
      if (!this.passengers.equals(that.passengers))
        return false;
    }

    boolean this_present_aboardPosition = true && this.isSetAboardPosition();
    boolean that_present_aboardPosition = true && that.isSetAboardPosition();
    if (this_present_aboardPosition || that_present_aboardPosition) {
      if (!(this_present_aboardPosition && that_present_aboardPosition))
        return false;
      if (!this.aboardPosition.equals(that.aboardPosition))
        return false;
    }

    boolean this_present_arrPosition = true && this.isSetArrPosition();
    boolean that_present_arrPosition = true && that.isSetArrPosition();
    if (this_present_arrPosition || that_present_arrPosition) {
      if (!(this_present_arrPosition && that_present_arrPosition))
        return false;
      if (!this.arrPosition.equals(that.arrPosition))
        return false;
    }

    boolean this_present_flightNumber = true && this.isSetFlightNumber();
    boolean that_present_flightNumber = true && that.isSetFlightNumber();
    if (this_present_flightNumber || that_present_flightNumber) {
      if (!(this_present_flightNumber && that_present_flightNumber))
        return false;
      if (!this.flightNumber.equals(that.flightNumber))
        return false;
    }

    boolean this_present_flightDepTime = true;
    boolean that_present_flightDepTime = true;
    if (this_present_flightDepTime || that_present_flightDepTime) {
      if (!(this_present_flightDepTime && that_present_flightDepTime))
        return false;
      if (this.flightDepTime != that.flightDepTime)
        return false;
    }

    boolean this_present_voucherCode = true && this.isSetVoucherCode();
    boolean that_present_voucherCode = true && that.isSetVoucherCode();
    if (this_present_voucherCode || that_present_voucherCode) {
      if (!(this_present_voucherCode && that_present_voucherCode))
        return false;
      if (!this.voucherCode.equals(that.voucherCode))
        return false;
    }

    boolean this_present_isOnline = true;
    boolean that_present_isOnline = true;
    if (this_present_isOnline || that_present_isOnline) {
      if (!(this_present_isOnline && that_present_isOnline))
        return false;
      if (this.isOnline != that.isOnline)
        return false;
    }

    boolean this_present_operatorId = true && this.isSetOperatorId();
    boolean that_present_operatorId = true && that.isSetOperatorId();
    if (this_present_operatorId || that_present_operatorId) {
      if (!(this_present_operatorId && that_present_operatorId))
        return false;
      if (!this.operatorId.equals(that.operatorId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_mobile = true && (isSetMobile());
    list.add(present_mobile);
    if (present_mobile)
      list.add(mobile);

    boolean present_passengers = true && (isSetPassengers());
    list.add(present_passengers);
    if (present_passengers)
      list.add(passengers);

    boolean present_aboardPosition = true && (isSetAboardPosition());
    list.add(present_aboardPosition);
    if (present_aboardPosition)
      list.add(aboardPosition);

    boolean present_arrPosition = true && (isSetArrPosition());
    list.add(present_arrPosition);
    if (present_arrPosition)
      list.add(arrPosition);

    boolean present_flightNumber = true && (isSetFlightNumber());
    list.add(present_flightNumber);
    if (present_flightNumber)
      list.add(flightNumber);

    boolean present_flightDepTime = true;
    list.add(present_flightDepTime);
    if (present_flightDepTime)
      list.add(flightDepTime);

    boolean present_voucherCode = true && (isSetVoucherCode());
    list.add(present_voucherCode);
    if (present_voucherCode)
      list.add(voucherCode);

    boolean present_isOnline = true;
    list.add(present_isOnline);
    if (present_isOnline)
      list.add(isOnline);

    boolean present_operatorId = true && (isSetOperatorId());
    list.add(present_operatorId);
    if (present_operatorId)
      list.add(operatorId);

    return list.hashCode();
  }

  @Override
  public int compareTo(OrderCreateParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassengers()).compareTo(other.isSetPassengers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassengers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passengers, other.passengers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAboardPosition()).compareTo(other.isSetAboardPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAboardPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aboardPosition, other.aboardPosition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArrPosition()).compareTo(other.isSetArrPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArrPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arrPosition, other.arrPosition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlightNumber()).compareTo(other.isSetFlightNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlightNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flightNumber, other.flightNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlightDepTime()).compareTo(other.isSetFlightDepTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlightDepTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flightDepTime, other.flightDepTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVoucherCode()).compareTo(other.isSetVoucherCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVoucherCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.voucherCode, other.voucherCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsOnline()).compareTo(other.isSetIsOnline());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsOnline()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isOnline, other.isOnline);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperatorId()).compareTo(other.isSetOperatorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperatorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operatorId, other.operatorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OrderCreateParam(");
    boolean first = true;

    sb.append("mobile:");
    if (this.mobile == null) {
      sb.append("null");
    } else {
      sb.append(this.mobile);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("passengers:");
    if (this.passengers == null) {
      sb.append("null");
    } else {
      sb.append(this.passengers);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("aboardPosition:");
    if (this.aboardPosition == null) {
      sb.append("null");
    } else {
      sb.append(this.aboardPosition);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("arrPosition:");
    if (this.arrPosition == null) {
      sb.append("null");
    } else {
      sb.append(this.arrPosition);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("flightNumber:");
    if (this.flightNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.flightNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("flightDepTime:");
    sb.append(this.flightDepTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("voucherCode:");
    if (this.voucherCode == null) {
      sb.append("null");
    } else {
      sb.append(this.voucherCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isOnline:");
    sb.append(this.isOnline);
    first = false;
    if (!first) sb.append(", ");
    sb.append("operatorId:");
    if (this.operatorId == null) {
      sb.append("null");
    } else {
      sb.append(this.operatorId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (aboardPosition != null) {
      aboardPosition.validate();
    }
    if (arrPosition != null) {
      arrPosition.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OrderCreateParamStandardSchemeFactory implements SchemeFactory {
    public OrderCreateParamStandardScheme getScheme() {
      return new OrderCreateParamStandardScheme();
    }
  }

  private static class OrderCreateParamStandardScheme extends StandardScheme<OrderCreateParam> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OrderCreateParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MOBILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobile = iprot.readString();
              struct.setMobileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PASSENGERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.passengers = new ArrayList<PassengerDto>(_list16.size);
                PassengerDto _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = new PassengerDto();
                  _elem17.read(iprot);
                  struct.passengers.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setPassengersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ABOARD_POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.aboardPosition = new com.ikamobile.pa.thrift.server.acceptor.PositionDto();
              struct.aboardPosition.read(iprot);
              struct.setAboardPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ARR_POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.arrPosition = new com.ikamobile.pa.thrift.server.acceptor.PositionDto();
              struct.arrPosition.read(iprot);
              struct.setArrPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FLIGHT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.flightNumber = iprot.readString();
              struct.setFlightNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FLIGHT_DEP_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.flightDepTime = iprot.readI64();
              struct.setFlightDepTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // VOUCHER_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.voucherCode = iprot.readString();
              struct.setVoucherCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IS_ONLINE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isOnline = iprot.readBool();
              struct.setIsOnlineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // OPERATOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operatorId = iprot.readString();
              struct.setOperatorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OrderCreateParam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.mobile != null) {
        oprot.writeFieldBegin(MOBILE_FIELD_DESC);
        oprot.writeString(struct.mobile);
        oprot.writeFieldEnd();
      }
      if (struct.passengers != null) {
        oprot.writeFieldBegin(PASSENGERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.passengers.size()));
          for (PassengerDto _iter19 : struct.passengers)
          {
            _iter19.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.aboardPosition != null) {
        oprot.writeFieldBegin(ABOARD_POSITION_FIELD_DESC);
        struct.aboardPosition.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.arrPosition != null) {
        oprot.writeFieldBegin(ARR_POSITION_FIELD_DESC);
        struct.arrPosition.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.flightNumber != null) {
        oprot.writeFieldBegin(FLIGHT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.flightNumber);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FLIGHT_DEP_TIME_FIELD_DESC);
      oprot.writeI64(struct.flightDepTime);
      oprot.writeFieldEnd();
      if (struct.voucherCode != null) {
        oprot.writeFieldBegin(VOUCHER_CODE_FIELD_DESC);
        oprot.writeString(struct.voucherCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_ONLINE_FIELD_DESC);
      oprot.writeBool(struct.isOnline);
      oprot.writeFieldEnd();
      if (struct.operatorId != null) {
        oprot.writeFieldBegin(OPERATOR_ID_FIELD_DESC);
        oprot.writeString(struct.operatorId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OrderCreateParamTupleSchemeFactory implements SchemeFactory {
    public OrderCreateParamTupleScheme getScheme() {
      return new OrderCreateParamTupleScheme();
    }
  }

  private static class OrderCreateParamTupleScheme extends TupleScheme<OrderCreateParam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OrderCreateParam struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMobile()) {
        optionals.set(0);
      }
      if (struct.isSetPassengers()) {
        optionals.set(1);
      }
      if (struct.isSetAboardPosition()) {
        optionals.set(2);
      }
      if (struct.isSetArrPosition()) {
        optionals.set(3);
      }
      if (struct.isSetFlightNumber()) {
        optionals.set(4);
      }
      if (struct.isSetFlightDepTime()) {
        optionals.set(5);
      }
      if (struct.isSetVoucherCode()) {
        optionals.set(6);
      }
      if (struct.isSetIsOnline()) {
        optionals.set(7);
      }
      if (struct.isSetOperatorId()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetMobile()) {
        oprot.writeString(struct.mobile);
      }
      if (struct.isSetPassengers()) {
        {
          oprot.writeI32(struct.passengers.size());
          for (PassengerDto _iter20 : struct.passengers)
          {
            _iter20.write(oprot);
          }
        }
      }
      if (struct.isSetAboardPosition()) {
        struct.aboardPosition.write(oprot);
      }
      if (struct.isSetArrPosition()) {
        struct.arrPosition.write(oprot);
      }
      if (struct.isSetFlightNumber()) {
        oprot.writeString(struct.flightNumber);
      }
      if (struct.isSetFlightDepTime()) {
        oprot.writeI64(struct.flightDepTime);
      }
      if (struct.isSetVoucherCode()) {
        oprot.writeString(struct.voucherCode);
      }
      if (struct.isSetIsOnline()) {
        oprot.writeBool(struct.isOnline);
      }
      if (struct.isSetOperatorId()) {
        oprot.writeString(struct.operatorId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OrderCreateParam struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.mobile = iprot.readString();
        struct.setMobileIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.passengers = new ArrayList<PassengerDto>(_list21.size);
          PassengerDto _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = new PassengerDto();
            _elem22.read(iprot);
            struct.passengers.add(_elem22);
          }
        }
        struct.setPassengersIsSet(true);
      }
      if (incoming.get(2)) {
        struct.aboardPosition = new com.ikamobile.pa.thrift.server.acceptor.PositionDto();
        struct.aboardPosition.read(iprot);
        struct.setAboardPositionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.arrPosition = new com.ikamobile.pa.thrift.server.acceptor.PositionDto();
        struct.arrPosition.read(iprot);
        struct.setArrPositionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.flightNumber = iprot.readString();
        struct.setFlightNumberIsSet(true);
      }
      if (incoming.get(5)) {
        struct.flightDepTime = iprot.readI64();
        struct.setFlightDepTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.voucherCode = iprot.readString();
        struct.setVoucherCodeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.isOnline = iprot.readBool();
        struct.setIsOnlineIsSet(true);
      }
      if (incoming.get(8)) {
        struct.operatorId = iprot.readString();
        struct.setOperatorIdIsSet(true);
      }
    }
  }

}

