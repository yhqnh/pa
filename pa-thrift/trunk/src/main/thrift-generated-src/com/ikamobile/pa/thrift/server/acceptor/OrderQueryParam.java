/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ikamobile.pa.thrift.server.acceptor;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-8-31")
public class OrderQueryParam implements org.apache.thrift.TBase<OrderQueryParam, OrderQueryParam._Fields>, java.io.Serializable, Cloneable, Comparable<OrderQueryParam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OrderQueryParam");

  private static final org.apache.thrift.protocol.TField PAGER_FIELD_DESC = new org.apache.thrift.protocol.TField("pager", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField SORTER_FIELD_DESC = new org.apache.thrift.protocol.TField("sorter", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField SEARCH_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("searchParam", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OrderQueryParamStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OrderQueryParamTupleSchemeFactory());
  }

  public com.ikamobile.pa.thrift.common.PagerDto pager; // required
  public OrderQuerySorterEnum sorter; // required
  public OrderSearchParam searchParam; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PAGER((short)1, "pager"),
    SORTER((short)2, "sorter"),
    SEARCH_PARAM((short)3, "searchParam");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PAGER
          return PAGER;
        case 2: // SORTER
          return SORTER;
        case 3: // SEARCH_PARAM
          return SEARCH_PARAM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PAGER, new org.apache.thrift.meta_data.FieldMetaData("pager", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ikamobile.pa.thrift.common.PagerDto.class)));
    tmpMap.put(_Fields.SORTER, new org.apache.thrift.meta_data.FieldMetaData("sorter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OrderQuerySorterEnum.class)));
    tmpMap.put(_Fields.SEARCH_PARAM, new org.apache.thrift.meta_data.FieldMetaData("searchParam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OrderSearchParam.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OrderQueryParam.class, metaDataMap);
  }

  public OrderQueryParam() {
  }

  public OrderQueryParam(
    com.ikamobile.pa.thrift.common.PagerDto pager,
    OrderQuerySorterEnum sorter,
    OrderSearchParam searchParam)
  {
    this();
    this.pager = pager;
    this.sorter = sorter;
    this.searchParam = searchParam;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OrderQueryParam(OrderQueryParam other) {
    if (other.isSetPager()) {
      this.pager = new com.ikamobile.pa.thrift.common.PagerDto(other.pager);
    }
    if (other.isSetSorter()) {
      this.sorter = new OrderQuerySorterEnum(other.sorter);
    }
    if (other.isSetSearchParam()) {
      this.searchParam = new OrderSearchParam(other.searchParam);
    }
  }

  public OrderQueryParam deepCopy() {
    return new OrderQueryParam(this);
  }

  @Override
  public void clear() {
    this.pager = null;
    this.sorter = null;
    this.searchParam = null;
  }

  public com.ikamobile.pa.thrift.common.PagerDto getPager() {
    return this.pager;
  }

  public OrderQueryParam setPager(com.ikamobile.pa.thrift.common.PagerDto pager) {
    this.pager = pager;
    return this;
  }

  public void unsetPager() {
    this.pager = null;
  }

  /** Returns true if field pager is set (has been assigned a value) and false otherwise */
  public boolean isSetPager() {
    return this.pager != null;
  }

  public void setPagerIsSet(boolean value) {
    if (!value) {
      this.pager = null;
    }
  }

  public OrderQuerySorterEnum getSorter() {
    return this.sorter;
  }

  public OrderQueryParam setSorter(OrderQuerySorterEnum sorter) {
    this.sorter = sorter;
    return this;
  }

  public void unsetSorter() {
    this.sorter = null;
  }

  /** Returns true if field sorter is set (has been assigned a value) and false otherwise */
  public boolean isSetSorter() {
    return this.sorter != null;
  }

  public void setSorterIsSet(boolean value) {
    if (!value) {
      this.sorter = null;
    }
  }

  public OrderSearchParam getSearchParam() {
    return this.searchParam;
  }

  public OrderQueryParam setSearchParam(OrderSearchParam searchParam) {
    this.searchParam = searchParam;
    return this;
  }

  public void unsetSearchParam() {
    this.searchParam = null;
  }

  /** Returns true if field searchParam is set (has been assigned a value) and false otherwise */
  public boolean isSetSearchParam() {
    return this.searchParam != null;
  }

  public void setSearchParamIsSet(boolean value) {
    if (!value) {
      this.searchParam = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PAGER:
      if (value == null) {
        unsetPager();
      } else {
        setPager((com.ikamobile.pa.thrift.common.PagerDto)value);
      }
      break;

    case SORTER:
      if (value == null) {
        unsetSorter();
      } else {
        setSorter((OrderQuerySorterEnum)value);
      }
      break;

    case SEARCH_PARAM:
      if (value == null) {
        unsetSearchParam();
      } else {
        setSearchParam((OrderSearchParam)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PAGER:
      return getPager();

    case SORTER:
      return getSorter();

    case SEARCH_PARAM:
      return getSearchParam();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PAGER:
      return isSetPager();
    case SORTER:
      return isSetSorter();
    case SEARCH_PARAM:
      return isSetSearchParam();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OrderQueryParam)
      return this.equals((OrderQueryParam)that);
    return false;
  }

  public boolean equals(OrderQueryParam that) {
    if (that == null)
      return false;

    boolean this_present_pager = true && this.isSetPager();
    boolean that_present_pager = true && that.isSetPager();
    if (this_present_pager || that_present_pager) {
      if (!(this_present_pager && that_present_pager))
        return false;
      if (!this.pager.equals(that.pager))
        return false;
    }

    boolean this_present_sorter = true && this.isSetSorter();
    boolean that_present_sorter = true && that.isSetSorter();
    if (this_present_sorter || that_present_sorter) {
      if (!(this_present_sorter && that_present_sorter))
        return false;
      if (!this.sorter.equals(that.sorter))
        return false;
    }

    boolean this_present_searchParam = true && this.isSetSearchParam();
    boolean that_present_searchParam = true && that.isSetSearchParam();
    if (this_present_searchParam || that_present_searchParam) {
      if (!(this_present_searchParam && that_present_searchParam))
        return false;
      if (!this.searchParam.equals(that.searchParam))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pager = true && (isSetPager());
    list.add(present_pager);
    if (present_pager)
      list.add(pager);

    boolean present_sorter = true && (isSetSorter());
    list.add(present_sorter);
    if (present_sorter)
      list.add(sorter);

    boolean present_searchParam = true && (isSetSearchParam());
    list.add(present_searchParam);
    if (present_searchParam)
      list.add(searchParam);

    return list.hashCode();
  }

  @Override
  public int compareTo(OrderQueryParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPager()).compareTo(other.isSetPager());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPager()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pager, other.pager);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSorter()).compareTo(other.isSetSorter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSorter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sorter, other.sorter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSearchParam()).compareTo(other.isSetSearchParam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSearchParam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.searchParam, other.searchParam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OrderQueryParam(");
    boolean first = true;

    sb.append("pager:");
    if (this.pager == null) {
      sb.append("null");
    } else {
      sb.append(this.pager);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sorter:");
    if (this.sorter == null) {
      sb.append("null");
    } else {
      sb.append(this.sorter);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("searchParam:");
    if (this.searchParam == null) {
      sb.append("null");
    } else {
      sb.append(this.searchParam);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (pager != null) {
      pager.validate();
    }
    if (sorter != null) {
      sorter.validate();
    }
    if (searchParam != null) {
      searchParam.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OrderQueryParamStandardSchemeFactory implements SchemeFactory {
    public OrderQueryParamStandardScheme getScheme() {
      return new OrderQueryParamStandardScheme();
    }
  }

  private static class OrderQueryParamStandardScheme extends StandardScheme<OrderQueryParam> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OrderQueryParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PAGER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.pager = new com.ikamobile.pa.thrift.common.PagerDto();
              struct.pager.read(iprot);
              struct.setPagerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SORTER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sorter = new OrderQuerySorterEnum();
              struct.sorter.read(iprot);
              struct.setSorterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SEARCH_PARAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.searchParam = new OrderSearchParam();
              struct.searchParam.read(iprot);
              struct.setSearchParamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OrderQueryParam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.pager != null) {
        oprot.writeFieldBegin(PAGER_FIELD_DESC);
        struct.pager.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.sorter != null) {
        oprot.writeFieldBegin(SORTER_FIELD_DESC);
        struct.sorter.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.searchParam != null) {
        oprot.writeFieldBegin(SEARCH_PARAM_FIELD_DESC);
        struct.searchParam.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OrderQueryParamTupleSchemeFactory implements SchemeFactory {
    public OrderQueryParamTupleScheme getScheme() {
      return new OrderQueryParamTupleScheme();
    }
  }

  private static class OrderQueryParamTupleScheme extends TupleScheme<OrderQueryParam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OrderQueryParam struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPager()) {
        optionals.set(0);
      }
      if (struct.isSetSorter()) {
        optionals.set(1);
      }
      if (struct.isSetSearchParam()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetPager()) {
        struct.pager.write(oprot);
      }
      if (struct.isSetSorter()) {
        struct.sorter.write(oprot);
      }
      if (struct.isSetSearchParam()) {
        struct.searchParam.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OrderQueryParam struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.pager = new com.ikamobile.pa.thrift.common.PagerDto();
        struct.pager.read(iprot);
        struct.setPagerIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sorter = new OrderQuerySorterEnum();
        struct.sorter.read(iprot);
        struct.setSorterIsSet(true);
      }
      if (incoming.get(2)) {
        struct.searchParam = new OrderSearchParam();
        struct.searchParam.read(iprot);
        struct.setSearchParamIsSet(true);
      }
    }
  }

}

