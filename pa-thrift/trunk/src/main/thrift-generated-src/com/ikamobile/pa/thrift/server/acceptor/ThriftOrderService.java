/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ikamobile.pa.thrift.server.acceptor;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-8-31")
public class ThriftOrderService {

  public interface Iface {

    /**
     * 创建订单
     * @param param 订单创建参数
     * 
     * 
     * @param param
     */
    public OrderDetailDto create(OrderCreateParam param) throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException;

    /**
     * 订单查询接口
     * @param param 查询订单列表参数
     * 
     * 
     * @param param
     */
    public OrderPageResponse listOrder(OrderQueryParam param) throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException;

    /**
     * 获取指定订单详情
     * @param orderId 订单id
     * 
     * 
     * @param orderId
     */
    public OrderDetailDto orderDetail(String orderId) throws org.apache.thrift.TException;

    /**
     * 取消订单 改接口client项目用，
     * @param orderId 订单id
     * @param mobile 预订人手机号
     * 
     * 
     * @param orderId
     * @param mobile
     */
    public com.ikamobile.pa.thrift.common.OperateResponse cancelOrder(String orderId, String mobile) throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException;

    /**
     * 调度者取消订单
     * @param orderId 订单id
     * @param operatorId 预订人手机号
     * 
     * 
     * @param orderId
     * @param operatorId
     */
    public com.ikamobile.pa.thrift.common.OperateResponse dispactherCancelOrder(String orderId, String operatorId) throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException;

    /**
     * 司机确认某个订单的乘客 已上车
     * @param orderId 订单id
     * 
     * 
     * @param orderId
     * @param driverId
     */
    public com.ikamobile.pa.thrift.common.OperateResponse driverConfirmPassengerAboarded(String orderId, String driverId) throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException;

    /**
     * 通过验证，接受订单
     * @param orderId目标订单id
     * 
     * 
     * @param orderId
     * @param operatorId
     */
    public com.ikamobile.pa.thrift.common.OperateResponse accept(String orderId, String operatorId) throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException;

    /**
     * 验证未通过，拒绝订单
     * @param orderId目标订单id
     * 
     * 
     * @param orderId
     * @param operatorId
     */
    public com.ikamobile.pa.thrift.common.OperateResponse deny(String orderId, String operatorId) throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException;

    /**
     * 分配车辆给订单
     * @param 分配车辆的参数
     * 
     * 
     * @param param
     * @param operatorId
     */
    public com.ikamobile.pa.thrift.common.OperateResponse dispatch(DispatchParamDto param, String operatorId) throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException;

    /**
     * 分配车辆给订单
     * @param 分配车辆的参数
     * 
     * 
     * @param orderId
     * @param taskId
     * @param operatorId
     */
    public com.ikamobile.pa.thrift.common.OperateResponse unDispatch(String orderId, String taskId, String operatorId) throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException;

    /**
     * 订单锁定
     * @param 分配车辆的参数
     * 
     * 
     * @param orderId
     * @param operatorId
     */
    public com.ikamobile.pa.thrift.common.OperateResponse lockOrder(String orderId, String operatorId) throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException;

    /**
     * 订单解锁
     * @param 分配车辆的参数
     * 
     * 
     * @param orderId
     * @param operatorId
     */
    public com.ikamobile.pa.thrift.common.OperateResponse unlock(String orderId, String operatorId) throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void create(OrderCreateParam param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void listOrder(OrderQueryParam param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void orderDetail(String orderId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void cancelOrder(String orderId, String mobile, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void dispactherCancelOrder(String orderId, String operatorId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void driverConfirmPassengerAboarded(String orderId, String driverId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void accept(String orderId, String operatorId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deny(String orderId, String operatorId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void dispatch(DispatchParamDto param, String operatorId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void unDispatch(String orderId, String taskId, String operatorId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void lockOrder(String orderId, String operatorId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void unlock(String orderId, String operatorId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public OrderDetailDto create(OrderCreateParam param) throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException
    {
      send_create(param);
      return recv_create();
    }

    public void send_create(OrderCreateParam param) throws org.apache.thrift.TException
    {
      create_args args = new create_args();
      args.setParam(param);
      sendBase("create", args);
    }

    public OrderDetailDto recv_create() throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException
    {
      create_result result = new create_result();
      receiveBase(result, "create");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.bussinessException != null) {
        throw result.bussinessException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "create failed: unknown result");
    }

    public OrderPageResponse listOrder(OrderQueryParam param) throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException
    {
      send_listOrder(param);
      return recv_listOrder();
    }

    public void send_listOrder(OrderQueryParam param) throws org.apache.thrift.TException
    {
      listOrder_args args = new listOrder_args();
      args.setParam(param);
      sendBase("listOrder", args);
    }

    public OrderPageResponse recv_listOrder() throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException
    {
      listOrder_result result = new listOrder_result();
      receiveBase(result, "listOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.bussinessException != null) {
        throw result.bussinessException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listOrder failed: unknown result");
    }

    public OrderDetailDto orderDetail(String orderId) throws org.apache.thrift.TException
    {
      send_orderDetail(orderId);
      return recv_orderDetail();
    }

    public void send_orderDetail(String orderId) throws org.apache.thrift.TException
    {
      orderDetail_args args = new orderDetail_args();
      args.setOrderId(orderId);
      sendBase("orderDetail", args);
    }

    public OrderDetailDto recv_orderDetail() throws org.apache.thrift.TException
    {
      orderDetail_result result = new orderDetail_result();
      receiveBase(result, "orderDetail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "orderDetail failed: unknown result");
    }

    public com.ikamobile.pa.thrift.common.OperateResponse cancelOrder(String orderId, String mobile) throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException
    {
      send_cancelOrder(orderId, mobile);
      return recv_cancelOrder();
    }

    public void send_cancelOrder(String orderId, String mobile) throws org.apache.thrift.TException
    {
      cancelOrder_args args = new cancelOrder_args();
      args.setOrderId(orderId);
      args.setMobile(mobile);
      sendBase("cancelOrder", args);
    }

    public com.ikamobile.pa.thrift.common.OperateResponse recv_cancelOrder() throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException
    {
      cancelOrder_result result = new cancelOrder_result();
      receiveBase(result, "cancelOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.bussinessException != null) {
        throw result.bussinessException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "cancelOrder failed: unknown result");
    }

    public com.ikamobile.pa.thrift.common.OperateResponse dispactherCancelOrder(String orderId, String operatorId) throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException
    {
      send_dispactherCancelOrder(orderId, operatorId);
      return recv_dispactherCancelOrder();
    }

    public void send_dispactherCancelOrder(String orderId, String operatorId) throws org.apache.thrift.TException
    {
      dispactherCancelOrder_args args = new dispactherCancelOrder_args();
      args.setOrderId(orderId);
      args.setOperatorId(operatorId);
      sendBase("dispactherCancelOrder", args);
    }

    public com.ikamobile.pa.thrift.common.OperateResponse recv_dispactherCancelOrder() throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException
    {
      dispactherCancelOrder_result result = new dispactherCancelOrder_result();
      receiveBase(result, "dispactherCancelOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.bussinessException != null) {
        throw result.bussinessException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "dispactherCancelOrder failed: unknown result");
    }

    public com.ikamobile.pa.thrift.common.OperateResponse driverConfirmPassengerAboarded(String orderId, String driverId) throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException
    {
      send_driverConfirmPassengerAboarded(orderId, driverId);
      return recv_driverConfirmPassengerAboarded();
    }

    public void send_driverConfirmPassengerAboarded(String orderId, String driverId) throws org.apache.thrift.TException
    {
      driverConfirmPassengerAboarded_args args = new driverConfirmPassengerAboarded_args();
      args.setOrderId(orderId);
      args.setDriverId(driverId);
      sendBase("driverConfirmPassengerAboarded", args);
    }

    public com.ikamobile.pa.thrift.common.OperateResponse recv_driverConfirmPassengerAboarded() throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException
    {
      driverConfirmPassengerAboarded_result result = new driverConfirmPassengerAboarded_result();
      receiveBase(result, "driverConfirmPassengerAboarded");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.bussinessException != null) {
        throw result.bussinessException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "driverConfirmPassengerAboarded failed: unknown result");
    }

    public com.ikamobile.pa.thrift.common.OperateResponse accept(String orderId, String operatorId) throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException
    {
      send_accept(orderId, operatorId);
      return recv_accept();
    }

    public void send_accept(String orderId, String operatorId) throws org.apache.thrift.TException
    {
      accept_args args = new accept_args();
      args.setOrderId(orderId);
      args.setOperatorId(operatorId);
      sendBase("accept", args);
    }

    public com.ikamobile.pa.thrift.common.OperateResponse recv_accept() throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException
    {
      accept_result result = new accept_result();
      receiveBase(result, "accept");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.bussinessException != null) {
        throw result.bussinessException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "accept failed: unknown result");
    }

    public com.ikamobile.pa.thrift.common.OperateResponse deny(String orderId, String operatorId) throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException
    {
      send_deny(orderId, operatorId);
      return recv_deny();
    }

    public void send_deny(String orderId, String operatorId) throws org.apache.thrift.TException
    {
      deny_args args = new deny_args();
      args.setOrderId(orderId);
      args.setOperatorId(operatorId);
      sendBase("deny", args);
    }

    public com.ikamobile.pa.thrift.common.OperateResponse recv_deny() throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException
    {
      deny_result result = new deny_result();
      receiveBase(result, "deny");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.bussinessException != null) {
        throw result.bussinessException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deny failed: unknown result");
    }

    public com.ikamobile.pa.thrift.common.OperateResponse dispatch(DispatchParamDto param, String operatorId) throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException
    {
      send_dispatch(param, operatorId);
      return recv_dispatch();
    }

    public void send_dispatch(DispatchParamDto param, String operatorId) throws org.apache.thrift.TException
    {
      dispatch_args args = new dispatch_args();
      args.setParam(param);
      args.setOperatorId(operatorId);
      sendBase("dispatch", args);
    }

    public com.ikamobile.pa.thrift.common.OperateResponse recv_dispatch() throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException
    {
      dispatch_result result = new dispatch_result();
      receiveBase(result, "dispatch");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.bussinessException != null) {
        throw result.bussinessException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "dispatch failed: unknown result");
    }

    public com.ikamobile.pa.thrift.common.OperateResponse unDispatch(String orderId, String taskId, String operatorId) throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException
    {
      send_unDispatch(orderId, taskId, operatorId);
      return recv_unDispatch();
    }

    public void send_unDispatch(String orderId, String taskId, String operatorId) throws org.apache.thrift.TException
    {
      unDispatch_args args = new unDispatch_args();
      args.setOrderId(orderId);
      args.setTaskId(taskId);
      args.setOperatorId(operatorId);
      sendBase("unDispatch", args);
    }

    public com.ikamobile.pa.thrift.common.OperateResponse recv_unDispatch() throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException
    {
      unDispatch_result result = new unDispatch_result();
      receiveBase(result, "unDispatch");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.bussinessException != null) {
        throw result.bussinessException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "unDispatch failed: unknown result");
    }

    public com.ikamobile.pa.thrift.common.OperateResponse lockOrder(String orderId, String operatorId) throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException
    {
      send_lockOrder(orderId, operatorId);
      return recv_lockOrder();
    }

    public void send_lockOrder(String orderId, String operatorId) throws org.apache.thrift.TException
    {
      lockOrder_args args = new lockOrder_args();
      args.setOrderId(orderId);
      args.setOperatorId(operatorId);
      sendBase("lockOrder", args);
    }

    public com.ikamobile.pa.thrift.common.OperateResponse recv_lockOrder() throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException
    {
      lockOrder_result result = new lockOrder_result();
      receiveBase(result, "lockOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.bussinessException != null) {
        throw result.bussinessException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "lockOrder failed: unknown result");
    }

    public com.ikamobile.pa.thrift.common.OperateResponse unlock(String orderId, String operatorId) throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException
    {
      send_unlock(orderId, operatorId);
      return recv_unlock();
    }

    public void send_unlock(String orderId, String operatorId) throws org.apache.thrift.TException
    {
      unlock_args args = new unlock_args();
      args.setOrderId(orderId);
      args.setOperatorId(operatorId);
      sendBase("unlock", args);
    }

    public com.ikamobile.pa.thrift.common.OperateResponse recv_unlock() throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException
    {
      unlock_result result = new unlock_result();
      receiveBase(result, "unlock");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.bussinessException != null) {
        throw result.bussinessException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "unlock failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void create(OrderCreateParam param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      create_call method_call = new create_call(param, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class create_call extends org.apache.thrift.async.TAsyncMethodCall {
      private OrderCreateParam param;
      public create_call(OrderCreateParam param, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.param = param;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("create", org.apache.thrift.protocol.TMessageType.CALL, 0));
        create_args args = new create_args();
        args.setParam(param);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public OrderDetailDto getResult() throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_create();
      }
    }

    public void listOrder(OrderQueryParam param, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listOrder_call method_call = new listOrder_call(param, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class listOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private OrderQueryParam param;
      public listOrder_call(OrderQueryParam param, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.param = param;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listOrder_args args = new listOrder_args();
        args.setParam(param);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public OrderPageResponse getResult() throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listOrder();
      }
    }

    public void orderDetail(String orderId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      orderDetail_call method_call = new orderDetail_call(orderId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class orderDetail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String orderId;
      public orderDetail_call(String orderId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orderId = orderId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("orderDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        orderDetail_args args = new orderDetail_args();
        args.setOrderId(orderId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public OrderDetailDto getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_orderDetail();
      }
    }

    public void cancelOrder(String orderId, String mobile, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cancelOrder_call method_call = new cancelOrder_call(orderId, mobile, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cancelOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String orderId;
      private String mobile;
      public cancelOrder_call(String orderId, String mobile, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orderId = orderId;
        this.mobile = mobile;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cancelOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cancelOrder_args args = new cancelOrder_args();
        args.setOrderId(orderId);
        args.setMobile(mobile);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ikamobile.pa.thrift.common.OperateResponse getResult() throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_cancelOrder();
      }
    }

    public void dispactherCancelOrder(String orderId, String operatorId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      dispactherCancelOrder_call method_call = new dispactherCancelOrder_call(orderId, operatorId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class dispactherCancelOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String orderId;
      private String operatorId;
      public dispactherCancelOrder_call(String orderId, String operatorId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orderId = orderId;
        this.operatorId = operatorId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("dispactherCancelOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        dispactherCancelOrder_args args = new dispactherCancelOrder_args();
        args.setOrderId(orderId);
        args.setOperatorId(operatorId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ikamobile.pa.thrift.common.OperateResponse getResult() throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_dispactherCancelOrder();
      }
    }

    public void driverConfirmPassengerAboarded(String orderId, String driverId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      driverConfirmPassengerAboarded_call method_call = new driverConfirmPassengerAboarded_call(orderId, driverId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class driverConfirmPassengerAboarded_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String orderId;
      private String driverId;
      public driverConfirmPassengerAboarded_call(String orderId, String driverId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orderId = orderId;
        this.driverId = driverId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("driverConfirmPassengerAboarded", org.apache.thrift.protocol.TMessageType.CALL, 0));
        driverConfirmPassengerAboarded_args args = new driverConfirmPassengerAboarded_args();
        args.setOrderId(orderId);
        args.setDriverId(driverId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ikamobile.pa.thrift.common.OperateResponse getResult() throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_driverConfirmPassengerAboarded();
      }
    }

    public void accept(String orderId, String operatorId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      accept_call method_call = new accept_call(orderId, operatorId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class accept_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String orderId;
      private String operatorId;
      public accept_call(String orderId, String operatorId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orderId = orderId;
        this.operatorId = operatorId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("accept", org.apache.thrift.protocol.TMessageType.CALL, 0));
        accept_args args = new accept_args();
        args.setOrderId(orderId);
        args.setOperatorId(operatorId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ikamobile.pa.thrift.common.OperateResponse getResult() throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_accept();
      }
    }

    public void deny(String orderId, String operatorId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deny_call method_call = new deny_call(orderId, operatorId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deny_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String orderId;
      private String operatorId;
      public deny_call(String orderId, String operatorId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orderId = orderId;
        this.operatorId = operatorId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deny", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deny_args args = new deny_args();
        args.setOrderId(orderId);
        args.setOperatorId(operatorId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ikamobile.pa.thrift.common.OperateResponse getResult() throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deny();
      }
    }

    public void dispatch(DispatchParamDto param, String operatorId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      dispatch_call method_call = new dispatch_call(param, operatorId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class dispatch_call extends org.apache.thrift.async.TAsyncMethodCall {
      private DispatchParamDto param;
      private String operatorId;
      public dispatch_call(DispatchParamDto param, String operatorId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.param = param;
        this.operatorId = operatorId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("dispatch", org.apache.thrift.protocol.TMessageType.CALL, 0));
        dispatch_args args = new dispatch_args();
        args.setParam(param);
        args.setOperatorId(operatorId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ikamobile.pa.thrift.common.OperateResponse getResult() throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_dispatch();
      }
    }

    public void unDispatch(String orderId, String taskId, String operatorId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      unDispatch_call method_call = new unDispatch_call(orderId, taskId, operatorId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class unDispatch_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String orderId;
      private String taskId;
      private String operatorId;
      public unDispatch_call(String orderId, String taskId, String operatorId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orderId = orderId;
        this.taskId = taskId;
        this.operatorId = operatorId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("unDispatch", org.apache.thrift.protocol.TMessageType.CALL, 0));
        unDispatch_args args = new unDispatch_args();
        args.setOrderId(orderId);
        args.setTaskId(taskId);
        args.setOperatorId(operatorId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ikamobile.pa.thrift.common.OperateResponse getResult() throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_unDispatch();
      }
    }

    public void lockOrder(String orderId, String operatorId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      lockOrder_call method_call = new lockOrder_call(orderId, operatorId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class lockOrder_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String orderId;
      private String operatorId;
      public lockOrder_call(String orderId, String operatorId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orderId = orderId;
        this.operatorId = operatorId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("lockOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        lockOrder_args args = new lockOrder_args();
        args.setOrderId(orderId);
        args.setOperatorId(operatorId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ikamobile.pa.thrift.common.OperateResponse getResult() throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lockOrder();
      }
    }

    public void unlock(String orderId, String operatorId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      unlock_call method_call = new unlock_call(orderId, operatorId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class unlock_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String orderId;
      private String operatorId;
      public unlock_call(String orderId, String operatorId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orderId = orderId;
        this.operatorId = operatorId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("unlock", org.apache.thrift.protocol.TMessageType.CALL, 0));
        unlock_args args = new unlock_args();
        args.setOrderId(orderId);
        args.setOperatorId(operatorId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ikamobile.pa.thrift.common.OperateResponse getResult() throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_unlock();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("create", new create());
      processMap.put("listOrder", new listOrder());
      processMap.put("orderDetail", new orderDetail());
      processMap.put("cancelOrder", new cancelOrder());
      processMap.put("dispactherCancelOrder", new dispactherCancelOrder());
      processMap.put("driverConfirmPassengerAboarded", new driverConfirmPassengerAboarded());
      processMap.put("accept", new accept());
      processMap.put("deny", new deny());
      processMap.put("dispatch", new dispatch());
      processMap.put("unDispatch", new unDispatch());
      processMap.put("lockOrder", new lockOrder());
      processMap.put("unlock", new unlock());
      return processMap;
    }

    public static class create<I extends Iface> extends org.apache.thrift.ProcessFunction<I, create_args> {
      public create() {
        super("create");
      }

      public create_args getEmptyArgsInstance() {
        return new create_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public create_result getResult(I iface, create_args args) throws org.apache.thrift.TException {
        create_result result = new create_result();
        try {
          result.success = iface.create(args.param);
        } catch (com.ikamobile.pa.thrift.common.TBusinessException bussinessException) {
          result.bussinessException = bussinessException;
        }
        return result;
      }
    }

    public static class listOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listOrder_args> {
      public listOrder() {
        super("listOrder");
      }

      public listOrder_args getEmptyArgsInstance() {
        return new listOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public listOrder_result getResult(I iface, listOrder_args args) throws org.apache.thrift.TException {
        listOrder_result result = new listOrder_result();
        try {
          result.success = iface.listOrder(args.param);
        } catch (com.ikamobile.pa.thrift.common.TBusinessException bussinessException) {
          result.bussinessException = bussinessException;
        }
        return result;
      }
    }

    public static class orderDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, orderDetail_args> {
      public orderDetail() {
        super("orderDetail");
      }

      public orderDetail_args getEmptyArgsInstance() {
        return new orderDetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public orderDetail_result getResult(I iface, orderDetail_args args) throws org.apache.thrift.TException {
        orderDetail_result result = new orderDetail_result();
        result.success = iface.orderDetail(args.orderId);
        return result;
      }
    }

    public static class cancelOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cancelOrder_args> {
      public cancelOrder() {
        super("cancelOrder");
      }

      public cancelOrder_args getEmptyArgsInstance() {
        return new cancelOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public cancelOrder_result getResult(I iface, cancelOrder_args args) throws org.apache.thrift.TException {
        cancelOrder_result result = new cancelOrder_result();
        try {
          result.success = iface.cancelOrder(args.orderId, args.mobile);
        } catch (com.ikamobile.pa.thrift.common.TBusinessException bussinessException) {
          result.bussinessException = bussinessException;
        }
        return result;
      }
    }

    public static class dispactherCancelOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, dispactherCancelOrder_args> {
      public dispactherCancelOrder() {
        super("dispactherCancelOrder");
      }

      public dispactherCancelOrder_args getEmptyArgsInstance() {
        return new dispactherCancelOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public dispactherCancelOrder_result getResult(I iface, dispactherCancelOrder_args args) throws org.apache.thrift.TException {
        dispactherCancelOrder_result result = new dispactherCancelOrder_result();
        try {
          result.success = iface.dispactherCancelOrder(args.orderId, args.operatorId);
        } catch (com.ikamobile.pa.thrift.common.TBusinessException bussinessException) {
          result.bussinessException = bussinessException;
        }
        return result;
      }
    }

    public static class driverConfirmPassengerAboarded<I extends Iface> extends org.apache.thrift.ProcessFunction<I, driverConfirmPassengerAboarded_args> {
      public driverConfirmPassengerAboarded() {
        super("driverConfirmPassengerAboarded");
      }

      public driverConfirmPassengerAboarded_args getEmptyArgsInstance() {
        return new driverConfirmPassengerAboarded_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public driverConfirmPassengerAboarded_result getResult(I iface, driverConfirmPassengerAboarded_args args) throws org.apache.thrift.TException {
        driverConfirmPassengerAboarded_result result = new driverConfirmPassengerAboarded_result();
        try {
          result.success = iface.driverConfirmPassengerAboarded(args.orderId, args.driverId);
        } catch (com.ikamobile.pa.thrift.common.TBusinessException bussinessException) {
          result.bussinessException = bussinessException;
        }
        return result;
      }
    }

    public static class accept<I extends Iface> extends org.apache.thrift.ProcessFunction<I, accept_args> {
      public accept() {
        super("accept");
      }

      public accept_args getEmptyArgsInstance() {
        return new accept_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public accept_result getResult(I iface, accept_args args) throws org.apache.thrift.TException {
        accept_result result = new accept_result();
        try {
          result.success = iface.accept(args.orderId, args.operatorId);
        } catch (com.ikamobile.pa.thrift.common.TBusinessException bussinessException) {
          result.bussinessException = bussinessException;
        }
        return result;
      }
    }

    public static class deny<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deny_args> {
      public deny() {
        super("deny");
      }

      public deny_args getEmptyArgsInstance() {
        return new deny_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deny_result getResult(I iface, deny_args args) throws org.apache.thrift.TException {
        deny_result result = new deny_result();
        try {
          result.success = iface.deny(args.orderId, args.operatorId);
        } catch (com.ikamobile.pa.thrift.common.TBusinessException bussinessException) {
          result.bussinessException = bussinessException;
        }
        return result;
      }
    }

    public static class dispatch<I extends Iface> extends org.apache.thrift.ProcessFunction<I, dispatch_args> {
      public dispatch() {
        super("dispatch");
      }

      public dispatch_args getEmptyArgsInstance() {
        return new dispatch_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public dispatch_result getResult(I iface, dispatch_args args) throws org.apache.thrift.TException {
        dispatch_result result = new dispatch_result();
        try {
          result.success = iface.dispatch(args.param, args.operatorId);
        } catch (com.ikamobile.pa.thrift.common.TBusinessException bussinessException) {
          result.bussinessException = bussinessException;
        }
        return result;
      }
    }

    public static class unDispatch<I extends Iface> extends org.apache.thrift.ProcessFunction<I, unDispatch_args> {
      public unDispatch() {
        super("unDispatch");
      }

      public unDispatch_args getEmptyArgsInstance() {
        return new unDispatch_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public unDispatch_result getResult(I iface, unDispatch_args args) throws org.apache.thrift.TException {
        unDispatch_result result = new unDispatch_result();
        try {
          result.success = iface.unDispatch(args.orderId, args.taskId, args.operatorId);
        } catch (com.ikamobile.pa.thrift.common.TBusinessException bussinessException) {
          result.bussinessException = bussinessException;
        }
        return result;
      }
    }

    public static class lockOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, lockOrder_args> {
      public lockOrder() {
        super("lockOrder");
      }

      public lockOrder_args getEmptyArgsInstance() {
        return new lockOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public lockOrder_result getResult(I iface, lockOrder_args args) throws org.apache.thrift.TException {
        lockOrder_result result = new lockOrder_result();
        try {
          result.success = iface.lockOrder(args.orderId, args.operatorId);
        } catch (com.ikamobile.pa.thrift.common.TBusinessException bussinessException) {
          result.bussinessException = bussinessException;
        }
        return result;
      }
    }

    public static class unlock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, unlock_args> {
      public unlock() {
        super("unlock");
      }

      public unlock_args getEmptyArgsInstance() {
        return new unlock_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public unlock_result getResult(I iface, unlock_args args) throws org.apache.thrift.TException {
        unlock_result result = new unlock_result();
        try {
          result.success = iface.unlock(args.orderId, args.operatorId);
        } catch (com.ikamobile.pa.thrift.common.TBusinessException bussinessException) {
          result.bussinessException = bussinessException;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("create", new create());
      processMap.put("listOrder", new listOrder());
      processMap.put("orderDetail", new orderDetail());
      processMap.put("cancelOrder", new cancelOrder());
      processMap.put("dispactherCancelOrder", new dispactherCancelOrder());
      processMap.put("driverConfirmPassengerAboarded", new driverConfirmPassengerAboarded());
      processMap.put("accept", new accept());
      processMap.put("deny", new deny());
      processMap.put("dispatch", new dispatch());
      processMap.put("unDispatch", new unDispatch());
      processMap.put("lockOrder", new lockOrder());
      processMap.put("unlock", new unlock());
      return processMap;
    }

    public static class create<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, create_args, OrderDetailDto> {
      public create() {
        super("create");
      }

      public create_args getEmptyArgsInstance() {
        return new create_args();
      }

      public AsyncMethodCallback<OrderDetailDto> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<OrderDetailDto>() { 
          public void onComplete(OrderDetailDto o) {
            create_result result = new create_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            create_result result = new create_result();
            if (e instanceof com.ikamobile.pa.thrift.common.TBusinessException) {
                        result.bussinessException = (com.ikamobile.pa.thrift.common.TBusinessException) e;
                        result.setBussinessExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, create_args args, org.apache.thrift.async.AsyncMethodCallback<OrderDetailDto> resultHandler) throws TException {
        iface.create(args.param,resultHandler);
      }
    }

    public static class listOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listOrder_args, OrderPageResponse> {
      public listOrder() {
        super("listOrder");
      }

      public listOrder_args getEmptyArgsInstance() {
        return new listOrder_args();
      }

      public AsyncMethodCallback<OrderPageResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<OrderPageResponse>() { 
          public void onComplete(OrderPageResponse o) {
            listOrder_result result = new listOrder_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listOrder_result result = new listOrder_result();
            if (e instanceof com.ikamobile.pa.thrift.common.TBusinessException) {
                        result.bussinessException = (com.ikamobile.pa.thrift.common.TBusinessException) e;
                        result.setBussinessExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, listOrder_args args, org.apache.thrift.async.AsyncMethodCallback<OrderPageResponse> resultHandler) throws TException {
        iface.listOrder(args.param,resultHandler);
      }
    }

    public static class orderDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, orderDetail_args, OrderDetailDto> {
      public orderDetail() {
        super("orderDetail");
      }

      public orderDetail_args getEmptyArgsInstance() {
        return new orderDetail_args();
      }

      public AsyncMethodCallback<OrderDetailDto> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<OrderDetailDto>() { 
          public void onComplete(OrderDetailDto o) {
            orderDetail_result result = new orderDetail_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            orderDetail_result result = new orderDetail_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, orderDetail_args args, org.apache.thrift.async.AsyncMethodCallback<OrderDetailDto> resultHandler) throws TException {
        iface.orderDetail(args.orderId,resultHandler);
      }
    }

    public static class cancelOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, cancelOrder_args, com.ikamobile.pa.thrift.common.OperateResponse> {
      public cancelOrder() {
        super("cancelOrder");
      }

      public cancelOrder_args getEmptyArgsInstance() {
        return new cancelOrder_args();
      }

      public AsyncMethodCallback<com.ikamobile.pa.thrift.common.OperateResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ikamobile.pa.thrift.common.OperateResponse>() { 
          public void onComplete(com.ikamobile.pa.thrift.common.OperateResponse o) {
            cancelOrder_result result = new cancelOrder_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            cancelOrder_result result = new cancelOrder_result();
            if (e instanceof com.ikamobile.pa.thrift.common.TBusinessException) {
                        result.bussinessException = (com.ikamobile.pa.thrift.common.TBusinessException) e;
                        result.setBussinessExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, cancelOrder_args args, org.apache.thrift.async.AsyncMethodCallback<com.ikamobile.pa.thrift.common.OperateResponse> resultHandler) throws TException {
        iface.cancelOrder(args.orderId, args.mobile,resultHandler);
      }
    }

    public static class dispactherCancelOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, dispactherCancelOrder_args, com.ikamobile.pa.thrift.common.OperateResponse> {
      public dispactherCancelOrder() {
        super("dispactherCancelOrder");
      }

      public dispactherCancelOrder_args getEmptyArgsInstance() {
        return new dispactherCancelOrder_args();
      }

      public AsyncMethodCallback<com.ikamobile.pa.thrift.common.OperateResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ikamobile.pa.thrift.common.OperateResponse>() { 
          public void onComplete(com.ikamobile.pa.thrift.common.OperateResponse o) {
            dispactherCancelOrder_result result = new dispactherCancelOrder_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            dispactherCancelOrder_result result = new dispactherCancelOrder_result();
            if (e instanceof com.ikamobile.pa.thrift.common.TBusinessException) {
                        result.bussinessException = (com.ikamobile.pa.thrift.common.TBusinessException) e;
                        result.setBussinessExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, dispactherCancelOrder_args args, org.apache.thrift.async.AsyncMethodCallback<com.ikamobile.pa.thrift.common.OperateResponse> resultHandler) throws TException {
        iface.dispactherCancelOrder(args.orderId, args.operatorId,resultHandler);
      }
    }

    public static class driverConfirmPassengerAboarded<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, driverConfirmPassengerAboarded_args, com.ikamobile.pa.thrift.common.OperateResponse> {
      public driverConfirmPassengerAboarded() {
        super("driverConfirmPassengerAboarded");
      }

      public driverConfirmPassengerAboarded_args getEmptyArgsInstance() {
        return new driverConfirmPassengerAboarded_args();
      }

      public AsyncMethodCallback<com.ikamobile.pa.thrift.common.OperateResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ikamobile.pa.thrift.common.OperateResponse>() { 
          public void onComplete(com.ikamobile.pa.thrift.common.OperateResponse o) {
            driverConfirmPassengerAboarded_result result = new driverConfirmPassengerAboarded_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            driverConfirmPassengerAboarded_result result = new driverConfirmPassengerAboarded_result();
            if (e instanceof com.ikamobile.pa.thrift.common.TBusinessException) {
                        result.bussinessException = (com.ikamobile.pa.thrift.common.TBusinessException) e;
                        result.setBussinessExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, driverConfirmPassengerAboarded_args args, org.apache.thrift.async.AsyncMethodCallback<com.ikamobile.pa.thrift.common.OperateResponse> resultHandler) throws TException {
        iface.driverConfirmPassengerAboarded(args.orderId, args.driverId,resultHandler);
      }
    }

    public static class accept<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, accept_args, com.ikamobile.pa.thrift.common.OperateResponse> {
      public accept() {
        super("accept");
      }

      public accept_args getEmptyArgsInstance() {
        return new accept_args();
      }

      public AsyncMethodCallback<com.ikamobile.pa.thrift.common.OperateResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ikamobile.pa.thrift.common.OperateResponse>() { 
          public void onComplete(com.ikamobile.pa.thrift.common.OperateResponse o) {
            accept_result result = new accept_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            accept_result result = new accept_result();
            if (e instanceof com.ikamobile.pa.thrift.common.TBusinessException) {
                        result.bussinessException = (com.ikamobile.pa.thrift.common.TBusinessException) e;
                        result.setBussinessExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, accept_args args, org.apache.thrift.async.AsyncMethodCallback<com.ikamobile.pa.thrift.common.OperateResponse> resultHandler) throws TException {
        iface.accept(args.orderId, args.operatorId,resultHandler);
      }
    }

    public static class deny<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deny_args, com.ikamobile.pa.thrift.common.OperateResponse> {
      public deny() {
        super("deny");
      }

      public deny_args getEmptyArgsInstance() {
        return new deny_args();
      }

      public AsyncMethodCallback<com.ikamobile.pa.thrift.common.OperateResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ikamobile.pa.thrift.common.OperateResponse>() { 
          public void onComplete(com.ikamobile.pa.thrift.common.OperateResponse o) {
            deny_result result = new deny_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deny_result result = new deny_result();
            if (e instanceof com.ikamobile.pa.thrift.common.TBusinessException) {
                        result.bussinessException = (com.ikamobile.pa.thrift.common.TBusinessException) e;
                        result.setBussinessExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deny_args args, org.apache.thrift.async.AsyncMethodCallback<com.ikamobile.pa.thrift.common.OperateResponse> resultHandler) throws TException {
        iface.deny(args.orderId, args.operatorId,resultHandler);
      }
    }

    public static class dispatch<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, dispatch_args, com.ikamobile.pa.thrift.common.OperateResponse> {
      public dispatch() {
        super("dispatch");
      }

      public dispatch_args getEmptyArgsInstance() {
        return new dispatch_args();
      }

      public AsyncMethodCallback<com.ikamobile.pa.thrift.common.OperateResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ikamobile.pa.thrift.common.OperateResponse>() { 
          public void onComplete(com.ikamobile.pa.thrift.common.OperateResponse o) {
            dispatch_result result = new dispatch_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            dispatch_result result = new dispatch_result();
            if (e instanceof com.ikamobile.pa.thrift.common.TBusinessException) {
                        result.bussinessException = (com.ikamobile.pa.thrift.common.TBusinessException) e;
                        result.setBussinessExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, dispatch_args args, org.apache.thrift.async.AsyncMethodCallback<com.ikamobile.pa.thrift.common.OperateResponse> resultHandler) throws TException {
        iface.dispatch(args.param, args.operatorId,resultHandler);
      }
    }

    public static class unDispatch<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, unDispatch_args, com.ikamobile.pa.thrift.common.OperateResponse> {
      public unDispatch() {
        super("unDispatch");
      }

      public unDispatch_args getEmptyArgsInstance() {
        return new unDispatch_args();
      }

      public AsyncMethodCallback<com.ikamobile.pa.thrift.common.OperateResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ikamobile.pa.thrift.common.OperateResponse>() { 
          public void onComplete(com.ikamobile.pa.thrift.common.OperateResponse o) {
            unDispatch_result result = new unDispatch_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            unDispatch_result result = new unDispatch_result();
            if (e instanceof com.ikamobile.pa.thrift.common.TBusinessException) {
                        result.bussinessException = (com.ikamobile.pa.thrift.common.TBusinessException) e;
                        result.setBussinessExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, unDispatch_args args, org.apache.thrift.async.AsyncMethodCallback<com.ikamobile.pa.thrift.common.OperateResponse> resultHandler) throws TException {
        iface.unDispatch(args.orderId, args.taskId, args.operatorId,resultHandler);
      }
    }

    public static class lockOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, lockOrder_args, com.ikamobile.pa.thrift.common.OperateResponse> {
      public lockOrder() {
        super("lockOrder");
      }

      public lockOrder_args getEmptyArgsInstance() {
        return new lockOrder_args();
      }

      public AsyncMethodCallback<com.ikamobile.pa.thrift.common.OperateResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ikamobile.pa.thrift.common.OperateResponse>() { 
          public void onComplete(com.ikamobile.pa.thrift.common.OperateResponse o) {
            lockOrder_result result = new lockOrder_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            lockOrder_result result = new lockOrder_result();
            if (e instanceof com.ikamobile.pa.thrift.common.TBusinessException) {
                        result.bussinessException = (com.ikamobile.pa.thrift.common.TBusinessException) e;
                        result.setBussinessExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, lockOrder_args args, org.apache.thrift.async.AsyncMethodCallback<com.ikamobile.pa.thrift.common.OperateResponse> resultHandler) throws TException {
        iface.lockOrder(args.orderId, args.operatorId,resultHandler);
      }
    }

    public static class unlock<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, unlock_args, com.ikamobile.pa.thrift.common.OperateResponse> {
      public unlock() {
        super("unlock");
      }

      public unlock_args getEmptyArgsInstance() {
        return new unlock_args();
      }

      public AsyncMethodCallback<com.ikamobile.pa.thrift.common.OperateResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ikamobile.pa.thrift.common.OperateResponse>() { 
          public void onComplete(com.ikamobile.pa.thrift.common.OperateResponse o) {
            unlock_result result = new unlock_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            unlock_result result = new unlock_result();
            if (e instanceof com.ikamobile.pa.thrift.common.TBusinessException) {
                        result.bussinessException = (com.ikamobile.pa.thrift.common.TBusinessException) e;
                        result.setBussinessExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, unlock_args args, org.apache.thrift.async.AsyncMethodCallback<com.ikamobile.pa.thrift.common.OperateResponse> resultHandler) throws TException {
        iface.unlock(args.orderId, args.operatorId,resultHandler);
      }
    }

  }

  public static class create_args implements org.apache.thrift.TBase<create_args, create_args._Fields>, java.io.Serializable, Cloneable, Comparable<create_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_args");

    private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new create_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new create_argsTupleSchemeFactory());
    }

    public OrderCreateParam param; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAM((short)1, "param");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAM
            return PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OrderCreateParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_args.class, metaDataMap);
    }

    public create_args() {
    }

    public create_args(
      OrderCreateParam param)
    {
      this();
      this.param = param;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_args(create_args other) {
      if (other.isSetParam()) {
        this.param = new OrderCreateParam(other.param);
      }
    }

    public create_args deepCopy() {
      return new create_args(this);
    }

    @Override
    public void clear() {
      this.param = null;
    }

    public OrderCreateParam getParam() {
      return this.param;
    }

    public create_args setParam(OrderCreateParam param) {
      this.param = param;
      return this;
    }

    public void unsetParam() {
      this.param = null;
    }

    /** Returns true if field param is set (has been assigned a value) and false otherwise */
    public boolean isSetParam() {
      return this.param != null;
    }

    public void setParamIsSet(boolean value) {
      if (!value) {
        this.param = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAM:
        if (value == null) {
          unsetParam();
        } else {
          setParam((OrderCreateParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAM:
        return getParam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAM:
        return isSetParam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_args)
        return this.equals((create_args)that);
      return false;
    }

    public boolean equals(create_args that) {
      if (that == null)
        return false;

      boolean this_present_param = true && this.isSetParam();
      boolean that_present_param = true && that.isSetParam();
      if (this_present_param || that_present_param) {
        if (!(this_present_param && that_present_param))
          return false;
        if (!this.param.equals(that.param))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_param = true && (isSetParam());
      list.add(present_param);
      if (present_param)
        list.add(param);

      return list.hashCode();
    }

    @Override
    public int compareTo(create_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_args(");
      boolean first = true;

      sb.append("param:");
      if (this.param == null) {
        sb.append("null");
      } else {
        sb.append(this.param);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (param != null) {
        param.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_argsStandardSchemeFactory implements SchemeFactory {
      public create_argsStandardScheme getScheme() {
        return new create_argsStandardScheme();
      }
    }

    private static class create_argsStandardScheme extends StandardScheme<create_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.param = new OrderCreateParam();
                struct.param.read(iprot);
                struct.setParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.param != null) {
          oprot.writeFieldBegin(PARAM_FIELD_DESC);
          struct.param.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_argsTupleSchemeFactory implements SchemeFactory {
      public create_argsTupleScheme getScheme() {
        return new create_argsTupleScheme();
      }
    }

    private static class create_argsTupleScheme extends TupleScheme<create_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParam()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParam()) {
          struct.param.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.param = new OrderCreateParam();
          struct.param.read(iprot);
          struct.setParamIsSet(true);
        }
      }
    }

  }

  public static class create_result implements org.apache.thrift.TBase<create_result, create_result._Fields>, java.io.Serializable, Cloneable, Comparable<create_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSSINESS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("bussinessException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new create_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new create_resultTupleSchemeFactory());
    }

    public OrderDetailDto success; // required
    public com.ikamobile.pa.thrift.common.TBusinessException bussinessException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSSINESS_EXCEPTION((short)1, "bussinessException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSSINESS_EXCEPTION
            return BUSSINESS_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OrderDetailDto.class)));
      tmpMap.put(_Fields.BUSSINESS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("bussinessException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_result.class, metaDataMap);
    }

    public create_result() {
    }

    public create_result(
      OrderDetailDto success,
      com.ikamobile.pa.thrift.common.TBusinessException bussinessException)
    {
      this();
      this.success = success;
      this.bussinessException = bussinessException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_result(create_result other) {
      if (other.isSetSuccess()) {
        this.success = new OrderDetailDto(other.success);
      }
      if (other.isSetBussinessException()) {
        this.bussinessException = new com.ikamobile.pa.thrift.common.TBusinessException(other.bussinessException);
      }
    }

    public create_result deepCopy() {
      return new create_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.bussinessException = null;
    }

    public OrderDetailDto getSuccess() {
      return this.success;
    }

    public create_result setSuccess(OrderDetailDto success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ikamobile.pa.thrift.common.TBusinessException getBussinessException() {
      return this.bussinessException;
    }

    public create_result setBussinessException(com.ikamobile.pa.thrift.common.TBusinessException bussinessException) {
      this.bussinessException = bussinessException;
      return this;
    }

    public void unsetBussinessException() {
      this.bussinessException = null;
    }

    /** Returns true if field bussinessException is set (has been assigned a value) and false otherwise */
    public boolean isSetBussinessException() {
      return this.bussinessException != null;
    }

    public void setBussinessExceptionIsSet(boolean value) {
      if (!value) {
        this.bussinessException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((OrderDetailDto)value);
        }
        break;

      case BUSSINESS_EXCEPTION:
        if (value == null) {
          unsetBussinessException();
        } else {
          setBussinessException((com.ikamobile.pa.thrift.common.TBusinessException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSSINESS_EXCEPTION:
        return getBussinessException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSSINESS_EXCEPTION:
        return isSetBussinessException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_result)
        return this.equals((create_result)that);
      return false;
    }

    public boolean equals(create_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_bussinessException = true && this.isSetBussinessException();
      boolean that_present_bussinessException = true && that.isSetBussinessException();
      if (this_present_bussinessException || that_present_bussinessException) {
        if (!(this_present_bussinessException && that_present_bussinessException))
          return false;
        if (!this.bussinessException.equals(that.bussinessException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_bussinessException = true && (isSetBussinessException());
      list.add(present_bussinessException);
      if (present_bussinessException)
        list.add(bussinessException);

      return list.hashCode();
    }

    @Override
    public int compareTo(create_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBussinessException()).compareTo(other.isSetBussinessException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBussinessException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bussinessException, other.bussinessException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bussinessException:");
      if (this.bussinessException == null) {
        sb.append("null");
      } else {
        sb.append(this.bussinessException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_resultStandardSchemeFactory implements SchemeFactory {
      public create_resultStandardScheme getScheme() {
        return new create_resultStandardScheme();
      }
    }

    private static class create_resultStandardScheme extends StandardScheme<create_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new OrderDetailDto();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSSINESS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bussinessException = new com.ikamobile.pa.thrift.common.TBusinessException();
                struct.bussinessException.read(iprot);
                struct.setBussinessExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bussinessException != null) {
          oprot.writeFieldBegin(BUSSINESS_EXCEPTION_FIELD_DESC);
          struct.bussinessException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_resultTupleSchemeFactory implements SchemeFactory {
      public create_resultTupleScheme getScheme() {
        return new create_resultTupleScheme();
      }
    }

    private static class create_resultTupleScheme extends TupleScheme<create_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBussinessException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBussinessException()) {
          struct.bussinessException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new OrderDetailDto();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bussinessException = new com.ikamobile.pa.thrift.common.TBusinessException();
          struct.bussinessException.read(iprot);
          struct.setBussinessExceptionIsSet(true);
        }
      }
    }

  }

  public static class listOrder_args implements org.apache.thrift.TBase<listOrder_args, listOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<listOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listOrder_args");

    private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listOrder_argsTupleSchemeFactory());
    }

    public OrderQueryParam param; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAM((short)1, "param");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAM
            return PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OrderQueryParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listOrder_args.class, metaDataMap);
    }

    public listOrder_args() {
    }

    public listOrder_args(
      OrderQueryParam param)
    {
      this();
      this.param = param;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listOrder_args(listOrder_args other) {
      if (other.isSetParam()) {
        this.param = new OrderQueryParam(other.param);
      }
    }

    public listOrder_args deepCopy() {
      return new listOrder_args(this);
    }

    @Override
    public void clear() {
      this.param = null;
    }

    public OrderQueryParam getParam() {
      return this.param;
    }

    public listOrder_args setParam(OrderQueryParam param) {
      this.param = param;
      return this;
    }

    public void unsetParam() {
      this.param = null;
    }

    /** Returns true if field param is set (has been assigned a value) and false otherwise */
    public boolean isSetParam() {
      return this.param != null;
    }

    public void setParamIsSet(boolean value) {
      if (!value) {
        this.param = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAM:
        if (value == null) {
          unsetParam();
        } else {
          setParam((OrderQueryParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAM:
        return getParam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAM:
        return isSetParam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listOrder_args)
        return this.equals((listOrder_args)that);
      return false;
    }

    public boolean equals(listOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_param = true && this.isSetParam();
      boolean that_present_param = true && that.isSetParam();
      if (this_present_param || that_present_param) {
        if (!(this_present_param && that_present_param))
          return false;
        if (!this.param.equals(that.param))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_param = true && (isSetParam());
      list.add(present_param);
      if (present_param)
        list.add(param);

      return list.hashCode();
    }

    @Override
    public int compareTo(listOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listOrder_args(");
      boolean first = true;

      sb.append("param:");
      if (this.param == null) {
        sb.append("null");
      } else {
        sb.append(this.param);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (param != null) {
        param.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listOrder_argsStandardSchemeFactory implements SchemeFactory {
      public listOrder_argsStandardScheme getScheme() {
        return new listOrder_argsStandardScheme();
      }
    }

    private static class listOrder_argsStandardScheme extends StandardScheme<listOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.param = new OrderQueryParam();
                struct.param.read(iprot);
                struct.setParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.param != null) {
          oprot.writeFieldBegin(PARAM_FIELD_DESC);
          struct.param.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listOrder_argsTupleSchemeFactory implements SchemeFactory {
      public listOrder_argsTupleScheme getScheme() {
        return new listOrder_argsTupleScheme();
      }
    }

    private static class listOrder_argsTupleScheme extends TupleScheme<listOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParam()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParam()) {
          struct.param.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.param = new OrderQueryParam();
          struct.param.read(iprot);
          struct.setParamIsSet(true);
        }
      }
    }

  }

  public static class listOrder_result implements org.apache.thrift.TBase<listOrder_result, listOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<listOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSSINESS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("bussinessException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listOrder_resultTupleSchemeFactory());
    }

    public OrderPageResponse success; // required
    public com.ikamobile.pa.thrift.common.TBusinessException bussinessException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSSINESS_EXCEPTION((short)1, "bussinessException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSSINESS_EXCEPTION
            return BUSSINESS_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OrderPageResponse.class)));
      tmpMap.put(_Fields.BUSSINESS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("bussinessException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listOrder_result.class, metaDataMap);
    }

    public listOrder_result() {
    }

    public listOrder_result(
      OrderPageResponse success,
      com.ikamobile.pa.thrift.common.TBusinessException bussinessException)
    {
      this();
      this.success = success;
      this.bussinessException = bussinessException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public listOrder_result(listOrder_result other) {
      if (other.isSetSuccess()) {
        this.success = new OrderPageResponse(other.success);
      }
      if (other.isSetBussinessException()) {
        this.bussinessException = new com.ikamobile.pa.thrift.common.TBusinessException(other.bussinessException);
      }
    }

    public listOrder_result deepCopy() {
      return new listOrder_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.bussinessException = null;
    }

    public OrderPageResponse getSuccess() {
      return this.success;
    }

    public listOrder_result setSuccess(OrderPageResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ikamobile.pa.thrift.common.TBusinessException getBussinessException() {
      return this.bussinessException;
    }

    public listOrder_result setBussinessException(com.ikamobile.pa.thrift.common.TBusinessException bussinessException) {
      this.bussinessException = bussinessException;
      return this;
    }

    public void unsetBussinessException() {
      this.bussinessException = null;
    }

    /** Returns true if field bussinessException is set (has been assigned a value) and false otherwise */
    public boolean isSetBussinessException() {
      return this.bussinessException != null;
    }

    public void setBussinessExceptionIsSet(boolean value) {
      if (!value) {
        this.bussinessException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((OrderPageResponse)value);
        }
        break;

      case BUSSINESS_EXCEPTION:
        if (value == null) {
          unsetBussinessException();
        } else {
          setBussinessException((com.ikamobile.pa.thrift.common.TBusinessException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSSINESS_EXCEPTION:
        return getBussinessException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSSINESS_EXCEPTION:
        return isSetBussinessException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listOrder_result)
        return this.equals((listOrder_result)that);
      return false;
    }

    public boolean equals(listOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_bussinessException = true && this.isSetBussinessException();
      boolean that_present_bussinessException = true && that.isSetBussinessException();
      if (this_present_bussinessException || that_present_bussinessException) {
        if (!(this_present_bussinessException && that_present_bussinessException))
          return false;
        if (!this.bussinessException.equals(that.bussinessException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_bussinessException = true && (isSetBussinessException());
      list.add(present_bussinessException);
      if (present_bussinessException)
        list.add(bussinessException);

      return list.hashCode();
    }

    @Override
    public int compareTo(listOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBussinessException()).compareTo(other.isSetBussinessException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBussinessException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bussinessException, other.bussinessException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listOrder_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bussinessException:");
      if (this.bussinessException == null) {
        sb.append("null");
      } else {
        sb.append(this.bussinessException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class listOrder_resultStandardSchemeFactory implements SchemeFactory {
      public listOrder_resultStandardScheme getScheme() {
        return new listOrder_resultStandardScheme();
      }
    }

    private static class listOrder_resultStandardScheme extends StandardScheme<listOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, listOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new OrderPageResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSSINESS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bussinessException = new com.ikamobile.pa.thrift.common.TBusinessException();
                struct.bussinessException.read(iprot);
                struct.setBussinessExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, listOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bussinessException != null) {
          oprot.writeFieldBegin(BUSSINESS_EXCEPTION_FIELD_DESC);
          struct.bussinessException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class listOrder_resultTupleSchemeFactory implements SchemeFactory {
      public listOrder_resultTupleScheme getScheme() {
        return new listOrder_resultTupleScheme();
      }
    }

    private static class listOrder_resultTupleScheme extends TupleScheme<listOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBussinessException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBussinessException()) {
          struct.bussinessException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new OrderPageResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bussinessException = new com.ikamobile.pa.thrift.common.TBusinessException();
          struct.bussinessException.read(iprot);
          struct.setBussinessExceptionIsSet(true);
        }
      }
    }

  }

  public static class orderDetail_args implements org.apache.thrift.TBase<orderDetail_args, orderDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<orderDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("orderDetail_args");

    private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new orderDetail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new orderDetail_argsTupleSchemeFactory());
    }

    public String orderId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORDER_ID((short)1, "orderId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORDER_ID
            return ORDER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(orderDetail_args.class, metaDataMap);
    }

    public orderDetail_args() {
    }

    public orderDetail_args(
      String orderId)
    {
      this();
      this.orderId = orderId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public orderDetail_args(orderDetail_args other) {
      if (other.isSetOrderId()) {
        this.orderId = other.orderId;
      }
    }

    public orderDetail_args deepCopy() {
      return new orderDetail_args(this);
    }

    @Override
    public void clear() {
      this.orderId = null;
    }

    public String getOrderId() {
      return this.orderId;
    }

    public orderDetail_args setOrderId(String orderId) {
      this.orderId = orderId;
      return this;
    }

    public void unsetOrderId() {
      this.orderId = null;
    }

    /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderId() {
      return this.orderId != null;
    }

    public void setOrderIdIsSet(boolean value) {
      if (!value) {
        this.orderId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORDER_ID:
        if (value == null) {
          unsetOrderId();
        } else {
          setOrderId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORDER_ID:
        return getOrderId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORDER_ID:
        return isSetOrderId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof orderDetail_args)
        return this.equals((orderDetail_args)that);
      return false;
    }

    public boolean equals(orderDetail_args that) {
      if (that == null)
        return false;

      boolean this_present_orderId = true && this.isSetOrderId();
      boolean that_present_orderId = true && that.isSetOrderId();
      if (this_present_orderId || that_present_orderId) {
        if (!(this_present_orderId && that_present_orderId))
          return false;
        if (!this.orderId.equals(that.orderId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_orderId = true && (isSetOrderId());
      list.add(present_orderId);
      if (present_orderId)
        list.add(orderId);

      return list.hashCode();
    }

    @Override
    public int compareTo(orderDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("orderDetail_args(");
      boolean first = true;

      sb.append("orderId:");
      if (this.orderId == null) {
        sb.append("null");
      } else {
        sb.append(this.orderId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class orderDetail_argsStandardSchemeFactory implements SchemeFactory {
      public orderDetail_argsStandardScheme getScheme() {
        return new orderDetail_argsStandardScheme();
      }
    }

    private static class orderDetail_argsStandardScheme extends StandardScheme<orderDetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, orderDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORDER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orderId = iprot.readString();
                struct.setOrderIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, orderDetail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.orderId != null) {
          oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
          oprot.writeString(struct.orderId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class orderDetail_argsTupleSchemeFactory implements SchemeFactory {
      public orderDetail_argsTupleScheme getScheme() {
        return new orderDetail_argsTupleScheme();
      }
    }

    private static class orderDetail_argsTupleScheme extends TupleScheme<orderDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, orderDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrderId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOrderId()) {
          oprot.writeString(struct.orderId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, orderDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.orderId = iprot.readString();
          struct.setOrderIdIsSet(true);
        }
      }
    }

  }

  public static class orderDetail_result implements org.apache.thrift.TBase<orderDetail_result, orderDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<orderDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("orderDetail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new orderDetail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new orderDetail_resultTupleSchemeFactory());
    }

    public OrderDetailDto success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OrderDetailDto.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(orderDetail_result.class, metaDataMap);
    }

    public orderDetail_result() {
    }

    public orderDetail_result(
      OrderDetailDto success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public orderDetail_result(orderDetail_result other) {
      if (other.isSetSuccess()) {
        this.success = new OrderDetailDto(other.success);
      }
    }

    public orderDetail_result deepCopy() {
      return new orderDetail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public OrderDetailDto getSuccess() {
      return this.success;
    }

    public orderDetail_result setSuccess(OrderDetailDto success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((OrderDetailDto)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof orderDetail_result)
        return this.equals((orderDetail_result)that);
      return false;
    }

    public boolean equals(orderDetail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(orderDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("orderDetail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class orderDetail_resultStandardSchemeFactory implements SchemeFactory {
      public orderDetail_resultStandardScheme getScheme() {
        return new orderDetail_resultStandardScheme();
      }
    }

    private static class orderDetail_resultStandardScheme extends StandardScheme<orderDetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, orderDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new OrderDetailDto();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, orderDetail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class orderDetail_resultTupleSchemeFactory implements SchemeFactory {
      public orderDetail_resultTupleScheme getScheme() {
        return new orderDetail_resultTupleScheme();
      }
    }

    private static class orderDetail_resultTupleScheme extends TupleScheme<orderDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, orderDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, orderDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new OrderDetailDto();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class cancelOrder_args implements org.apache.thrift.TBase<cancelOrder_args, cancelOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<cancelOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelOrder_args");

    private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelOrder_argsTupleSchemeFactory());
    }

    public String orderId; // required
    public String mobile; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORDER_ID((short)1, "orderId"),
      MOBILE((short)2, "mobile");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORDER_ID
            return ORDER_ID;
          case 2: // MOBILE
            return MOBILE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelOrder_args.class, metaDataMap);
    }

    public cancelOrder_args() {
    }

    public cancelOrder_args(
      String orderId,
      String mobile)
    {
      this();
      this.orderId = orderId;
      this.mobile = mobile;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelOrder_args(cancelOrder_args other) {
      if (other.isSetOrderId()) {
        this.orderId = other.orderId;
      }
      if (other.isSetMobile()) {
        this.mobile = other.mobile;
      }
    }

    public cancelOrder_args deepCopy() {
      return new cancelOrder_args(this);
    }

    @Override
    public void clear() {
      this.orderId = null;
      this.mobile = null;
    }

    public String getOrderId() {
      return this.orderId;
    }

    public cancelOrder_args setOrderId(String orderId) {
      this.orderId = orderId;
      return this;
    }

    public void unsetOrderId() {
      this.orderId = null;
    }

    /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderId() {
      return this.orderId != null;
    }

    public void setOrderIdIsSet(boolean value) {
      if (!value) {
        this.orderId = null;
      }
    }

    public String getMobile() {
      return this.mobile;
    }

    public cancelOrder_args setMobile(String mobile) {
      this.mobile = mobile;
      return this;
    }

    public void unsetMobile() {
      this.mobile = null;
    }

    /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
    public boolean isSetMobile() {
      return this.mobile != null;
    }

    public void setMobileIsSet(boolean value) {
      if (!value) {
        this.mobile = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORDER_ID:
        if (value == null) {
          unsetOrderId();
        } else {
          setOrderId((String)value);
        }
        break;

      case MOBILE:
        if (value == null) {
          unsetMobile();
        } else {
          setMobile((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORDER_ID:
        return getOrderId();

      case MOBILE:
        return getMobile();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORDER_ID:
        return isSetOrderId();
      case MOBILE:
        return isSetMobile();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelOrder_args)
        return this.equals((cancelOrder_args)that);
      return false;
    }

    public boolean equals(cancelOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_orderId = true && this.isSetOrderId();
      boolean that_present_orderId = true && that.isSetOrderId();
      if (this_present_orderId || that_present_orderId) {
        if (!(this_present_orderId && that_present_orderId))
          return false;
        if (!this.orderId.equals(that.orderId))
          return false;
      }

      boolean this_present_mobile = true && this.isSetMobile();
      boolean that_present_mobile = true && that.isSetMobile();
      if (this_present_mobile || that_present_mobile) {
        if (!(this_present_mobile && that_present_mobile))
          return false;
        if (!this.mobile.equals(that.mobile))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_orderId = true && (isSetOrderId());
      list.add(present_orderId);
      if (present_orderId)
        list.add(orderId);

      boolean present_mobile = true && (isSetMobile());
      list.add(present_mobile);
      if (present_mobile)
        list.add(mobile);

      return list.hashCode();
    }

    @Override
    public int compareTo(cancelOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMobile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelOrder_args(");
      boolean first = true;

      sb.append("orderId:");
      if (this.orderId == null) {
        sb.append("null");
      } else {
        sb.append(this.orderId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mobile:");
      if (this.mobile == null) {
        sb.append("null");
      } else {
        sb.append(this.mobile);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelOrder_argsStandardSchemeFactory implements SchemeFactory {
      public cancelOrder_argsStandardScheme getScheme() {
        return new cancelOrder_argsStandardScheme();
      }
    }

    private static class cancelOrder_argsStandardScheme extends StandardScheme<cancelOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORDER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orderId = iprot.readString();
                struct.setOrderIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MOBILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mobile = iprot.readString();
                struct.setMobileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.orderId != null) {
          oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
          oprot.writeString(struct.orderId);
          oprot.writeFieldEnd();
        }
        if (struct.mobile != null) {
          oprot.writeFieldBegin(MOBILE_FIELD_DESC);
          oprot.writeString(struct.mobile);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelOrder_argsTupleSchemeFactory implements SchemeFactory {
      public cancelOrder_argsTupleScheme getScheme() {
        return new cancelOrder_argsTupleScheme();
      }
    }

    private static class cancelOrder_argsTupleScheme extends TupleScheme<cancelOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrderId()) {
          optionals.set(0);
        }
        if (struct.isSetMobile()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOrderId()) {
          oprot.writeString(struct.orderId);
        }
        if (struct.isSetMobile()) {
          oprot.writeString(struct.mobile);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.orderId = iprot.readString();
          struct.setOrderIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.mobile = iprot.readString();
          struct.setMobileIsSet(true);
        }
      }
    }

  }

  public static class cancelOrder_result implements org.apache.thrift.TBase<cancelOrder_result, cancelOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<cancelOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSSINESS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("bussinessException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new cancelOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new cancelOrder_resultTupleSchemeFactory());
    }

    public com.ikamobile.pa.thrift.common.OperateResponse success; // required
    public com.ikamobile.pa.thrift.common.TBusinessException bussinessException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSSINESS_EXCEPTION((short)1, "bussinessException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSSINESS_EXCEPTION
            return BUSSINESS_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ikamobile.pa.thrift.common.OperateResponse.class)));
      tmpMap.put(_Fields.BUSSINESS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("bussinessException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelOrder_result.class, metaDataMap);
    }

    public cancelOrder_result() {
    }

    public cancelOrder_result(
      com.ikamobile.pa.thrift.common.OperateResponse success,
      com.ikamobile.pa.thrift.common.TBusinessException bussinessException)
    {
      this();
      this.success = success;
      this.bussinessException = bussinessException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelOrder_result(cancelOrder_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ikamobile.pa.thrift.common.OperateResponse(other.success);
      }
      if (other.isSetBussinessException()) {
        this.bussinessException = new com.ikamobile.pa.thrift.common.TBusinessException(other.bussinessException);
      }
    }

    public cancelOrder_result deepCopy() {
      return new cancelOrder_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.bussinessException = null;
    }

    public com.ikamobile.pa.thrift.common.OperateResponse getSuccess() {
      return this.success;
    }

    public cancelOrder_result setSuccess(com.ikamobile.pa.thrift.common.OperateResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ikamobile.pa.thrift.common.TBusinessException getBussinessException() {
      return this.bussinessException;
    }

    public cancelOrder_result setBussinessException(com.ikamobile.pa.thrift.common.TBusinessException bussinessException) {
      this.bussinessException = bussinessException;
      return this;
    }

    public void unsetBussinessException() {
      this.bussinessException = null;
    }

    /** Returns true if field bussinessException is set (has been assigned a value) and false otherwise */
    public boolean isSetBussinessException() {
      return this.bussinessException != null;
    }

    public void setBussinessExceptionIsSet(boolean value) {
      if (!value) {
        this.bussinessException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ikamobile.pa.thrift.common.OperateResponse)value);
        }
        break;

      case BUSSINESS_EXCEPTION:
        if (value == null) {
          unsetBussinessException();
        } else {
          setBussinessException((com.ikamobile.pa.thrift.common.TBusinessException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSSINESS_EXCEPTION:
        return getBussinessException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSSINESS_EXCEPTION:
        return isSetBussinessException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelOrder_result)
        return this.equals((cancelOrder_result)that);
      return false;
    }

    public boolean equals(cancelOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_bussinessException = true && this.isSetBussinessException();
      boolean that_present_bussinessException = true && that.isSetBussinessException();
      if (this_present_bussinessException || that_present_bussinessException) {
        if (!(this_present_bussinessException && that_present_bussinessException))
          return false;
        if (!this.bussinessException.equals(that.bussinessException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_bussinessException = true && (isSetBussinessException());
      list.add(present_bussinessException);
      if (present_bussinessException)
        list.add(bussinessException);

      return list.hashCode();
    }

    @Override
    public int compareTo(cancelOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBussinessException()).compareTo(other.isSetBussinessException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBussinessException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bussinessException, other.bussinessException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("cancelOrder_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bussinessException:");
      if (this.bussinessException == null) {
        sb.append("null");
      } else {
        sb.append(this.bussinessException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelOrder_resultStandardSchemeFactory implements SchemeFactory {
      public cancelOrder_resultStandardScheme getScheme() {
        return new cancelOrder_resultStandardScheme();
      }
    }

    private static class cancelOrder_resultStandardScheme extends StandardScheme<cancelOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ikamobile.pa.thrift.common.OperateResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSSINESS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bussinessException = new com.ikamobile.pa.thrift.common.TBusinessException();
                struct.bussinessException.read(iprot);
                struct.setBussinessExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bussinessException != null) {
          oprot.writeFieldBegin(BUSSINESS_EXCEPTION_FIELD_DESC);
          struct.bussinessException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelOrder_resultTupleSchemeFactory implements SchemeFactory {
      public cancelOrder_resultTupleScheme getScheme() {
        return new cancelOrder_resultTupleScheme();
      }
    }

    private static class cancelOrder_resultTupleScheme extends TupleScheme<cancelOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBussinessException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBussinessException()) {
          struct.bussinessException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ikamobile.pa.thrift.common.OperateResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bussinessException = new com.ikamobile.pa.thrift.common.TBusinessException();
          struct.bussinessException.read(iprot);
          struct.setBussinessExceptionIsSet(true);
        }
      }
    }

  }

  public static class dispactherCancelOrder_args implements org.apache.thrift.TBase<dispactherCancelOrder_args, dispactherCancelOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<dispactherCancelOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dispactherCancelOrder_args");

    private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField OPERATOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("operatorId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dispactherCancelOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dispactherCancelOrder_argsTupleSchemeFactory());
    }

    public String orderId; // required
    public String operatorId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORDER_ID((short)1, "orderId"),
      OPERATOR_ID((short)2, "operatorId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORDER_ID
            return ORDER_ID;
          case 2: // OPERATOR_ID
            return OPERATOR_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OPERATOR_ID, new org.apache.thrift.meta_data.FieldMetaData("operatorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dispactherCancelOrder_args.class, metaDataMap);
    }

    public dispactherCancelOrder_args() {
    }

    public dispactherCancelOrder_args(
      String orderId,
      String operatorId)
    {
      this();
      this.orderId = orderId;
      this.operatorId = operatorId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dispactherCancelOrder_args(dispactherCancelOrder_args other) {
      if (other.isSetOrderId()) {
        this.orderId = other.orderId;
      }
      if (other.isSetOperatorId()) {
        this.operatorId = other.operatorId;
      }
    }

    public dispactherCancelOrder_args deepCopy() {
      return new dispactherCancelOrder_args(this);
    }

    @Override
    public void clear() {
      this.orderId = null;
      this.operatorId = null;
    }

    public String getOrderId() {
      return this.orderId;
    }

    public dispactherCancelOrder_args setOrderId(String orderId) {
      this.orderId = orderId;
      return this;
    }

    public void unsetOrderId() {
      this.orderId = null;
    }

    /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderId() {
      return this.orderId != null;
    }

    public void setOrderIdIsSet(boolean value) {
      if (!value) {
        this.orderId = null;
      }
    }

    public String getOperatorId() {
      return this.operatorId;
    }

    public dispactherCancelOrder_args setOperatorId(String operatorId) {
      this.operatorId = operatorId;
      return this;
    }

    public void unsetOperatorId() {
      this.operatorId = null;
    }

    /** Returns true if field operatorId is set (has been assigned a value) and false otherwise */
    public boolean isSetOperatorId() {
      return this.operatorId != null;
    }

    public void setOperatorIdIsSet(boolean value) {
      if (!value) {
        this.operatorId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORDER_ID:
        if (value == null) {
          unsetOrderId();
        } else {
          setOrderId((String)value);
        }
        break;

      case OPERATOR_ID:
        if (value == null) {
          unsetOperatorId();
        } else {
          setOperatorId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORDER_ID:
        return getOrderId();

      case OPERATOR_ID:
        return getOperatorId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORDER_ID:
        return isSetOrderId();
      case OPERATOR_ID:
        return isSetOperatorId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dispactherCancelOrder_args)
        return this.equals((dispactherCancelOrder_args)that);
      return false;
    }

    public boolean equals(dispactherCancelOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_orderId = true && this.isSetOrderId();
      boolean that_present_orderId = true && that.isSetOrderId();
      if (this_present_orderId || that_present_orderId) {
        if (!(this_present_orderId && that_present_orderId))
          return false;
        if (!this.orderId.equals(that.orderId))
          return false;
      }

      boolean this_present_operatorId = true && this.isSetOperatorId();
      boolean that_present_operatorId = true && that.isSetOperatorId();
      if (this_present_operatorId || that_present_operatorId) {
        if (!(this_present_operatorId && that_present_operatorId))
          return false;
        if (!this.operatorId.equals(that.operatorId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_orderId = true && (isSetOrderId());
      list.add(present_orderId);
      if (present_orderId)
        list.add(orderId);

      boolean present_operatorId = true && (isSetOperatorId());
      list.add(present_operatorId);
      if (present_operatorId)
        list.add(operatorId);

      return list.hashCode();
    }

    @Override
    public int compareTo(dispactherCancelOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOperatorId()).compareTo(other.isSetOperatorId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOperatorId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operatorId, other.operatorId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dispactherCancelOrder_args(");
      boolean first = true;

      sb.append("orderId:");
      if (this.orderId == null) {
        sb.append("null");
      } else {
        sb.append(this.orderId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("operatorId:");
      if (this.operatorId == null) {
        sb.append("null");
      } else {
        sb.append(this.operatorId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dispactherCancelOrder_argsStandardSchemeFactory implements SchemeFactory {
      public dispactherCancelOrder_argsStandardScheme getScheme() {
        return new dispactherCancelOrder_argsStandardScheme();
      }
    }

    private static class dispactherCancelOrder_argsStandardScheme extends StandardScheme<dispactherCancelOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dispactherCancelOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORDER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orderId = iprot.readString();
                struct.setOrderIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OPERATOR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.operatorId = iprot.readString();
                struct.setOperatorIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dispactherCancelOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.orderId != null) {
          oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
          oprot.writeString(struct.orderId);
          oprot.writeFieldEnd();
        }
        if (struct.operatorId != null) {
          oprot.writeFieldBegin(OPERATOR_ID_FIELD_DESC);
          oprot.writeString(struct.operatorId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dispactherCancelOrder_argsTupleSchemeFactory implements SchemeFactory {
      public dispactherCancelOrder_argsTupleScheme getScheme() {
        return new dispactherCancelOrder_argsTupleScheme();
      }
    }

    private static class dispactherCancelOrder_argsTupleScheme extends TupleScheme<dispactherCancelOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dispactherCancelOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrderId()) {
          optionals.set(0);
        }
        if (struct.isSetOperatorId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOrderId()) {
          oprot.writeString(struct.orderId);
        }
        if (struct.isSetOperatorId()) {
          oprot.writeString(struct.operatorId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dispactherCancelOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.orderId = iprot.readString();
          struct.setOrderIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.operatorId = iprot.readString();
          struct.setOperatorIdIsSet(true);
        }
      }
    }

  }

  public static class dispactherCancelOrder_result implements org.apache.thrift.TBase<dispactherCancelOrder_result, dispactherCancelOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<dispactherCancelOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dispactherCancelOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSSINESS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("bussinessException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dispactherCancelOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dispactherCancelOrder_resultTupleSchemeFactory());
    }

    public com.ikamobile.pa.thrift.common.OperateResponse success; // required
    public com.ikamobile.pa.thrift.common.TBusinessException bussinessException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSSINESS_EXCEPTION((short)1, "bussinessException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSSINESS_EXCEPTION
            return BUSSINESS_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ikamobile.pa.thrift.common.OperateResponse.class)));
      tmpMap.put(_Fields.BUSSINESS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("bussinessException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dispactherCancelOrder_result.class, metaDataMap);
    }

    public dispactherCancelOrder_result() {
    }

    public dispactherCancelOrder_result(
      com.ikamobile.pa.thrift.common.OperateResponse success,
      com.ikamobile.pa.thrift.common.TBusinessException bussinessException)
    {
      this();
      this.success = success;
      this.bussinessException = bussinessException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dispactherCancelOrder_result(dispactherCancelOrder_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ikamobile.pa.thrift.common.OperateResponse(other.success);
      }
      if (other.isSetBussinessException()) {
        this.bussinessException = new com.ikamobile.pa.thrift.common.TBusinessException(other.bussinessException);
      }
    }

    public dispactherCancelOrder_result deepCopy() {
      return new dispactherCancelOrder_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.bussinessException = null;
    }

    public com.ikamobile.pa.thrift.common.OperateResponse getSuccess() {
      return this.success;
    }

    public dispactherCancelOrder_result setSuccess(com.ikamobile.pa.thrift.common.OperateResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ikamobile.pa.thrift.common.TBusinessException getBussinessException() {
      return this.bussinessException;
    }

    public dispactherCancelOrder_result setBussinessException(com.ikamobile.pa.thrift.common.TBusinessException bussinessException) {
      this.bussinessException = bussinessException;
      return this;
    }

    public void unsetBussinessException() {
      this.bussinessException = null;
    }

    /** Returns true if field bussinessException is set (has been assigned a value) and false otherwise */
    public boolean isSetBussinessException() {
      return this.bussinessException != null;
    }

    public void setBussinessExceptionIsSet(boolean value) {
      if (!value) {
        this.bussinessException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ikamobile.pa.thrift.common.OperateResponse)value);
        }
        break;

      case BUSSINESS_EXCEPTION:
        if (value == null) {
          unsetBussinessException();
        } else {
          setBussinessException((com.ikamobile.pa.thrift.common.TBusinessException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSSINESS_EXCEPTION:
        return getBussinessException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSSINESS_EXCEPTION:
        return isSetBussinessException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dispactherCancelOrder_result)
        return this.equals((dispactherCancelOrder_result)that);
      return false;
    }

    public boolean equals(dispactherCancelOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_bussinessException = true && this.isSetBussinessException();
      boolean that_present_bussinessException = true && that.isSetBussinessException();
      if (this_present_bussinessException || that_present_bussinessException) {
        if (!(this_present_bussinessException && that_present_bussinessException))
          return false;
        if (!this.bussinessException.equals(that.bussinessException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_bussinessException = true && (isSetBussinessException());
      list.add(present_bussinessException);
      if (present_bussinessException)
        list.add(bussinessException);

      return list.hashCode();
    }

    @Override
    public int compareTo(dispactherCancelOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBussinessException()).compareTo(other.isSetBussinessException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBussinessException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bussinessException, other.bussinessException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dispactherCancelOrder_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bussinessException:");
      if (this.bussinessException == null) {
        sb.append("null");
      } else {
        sb.append(this.bussinessException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dispactherCancelOrder_resultStandardSchemeFactory implements SchemeFactory {
      public dispactherCancelOrder_resultStandardScheme getScheme() {
        return new dispactherCancelOrder_resultStandardScheme();
      }
    }

    private static class dispactherCancelOrder_resultStandardScheme extends StandardScheme<dispactherCancelOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dispactherCancelOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ikamobile.pa.thrift.common.OperateResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSSINESS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bussinessException = new com.ikamobile.pa.thrift.common.TBusinessException();
                struct.bussinessException.read(iprot);
                struct.setBussinessExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dispactherCancelOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bussinessException != null) {
          oprot.writeFieldBegin(BUSSINESS_EXCEPTION_FIELD_DESC);
          struct.bussinessException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dispactherCancelOrder_resultTupleSchemeFactory implements SchemeFactory {
      public dispactherCancelOrder_resultTupleScheme getScheme() {
        return new dispactherCancelOrder_resultTupleScheme();
      }
    }

    private static class dispactherCancelOrder_resultTupleScheme extends TupleScheme<dispactherCancelOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dispactherCancelOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBussinessException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBussinessException()) {
          struct.bussinessException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dispactherCancelOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ikamobile.pa.thrift.common.OperateResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bussinessException = new com.ikamobile.pa.thrift.common.TBusinessException();
          struct.bussinessException.read(iprot);
          struct.setBussinessExceptionIsSet(true);
        }
      }
    }

  }

  public static class driverConfirmPassengerAboarded_args implements org.apache.thrift.TBase<driverConfirmPassengerAboarded_args, driverConfirmPassengerAboarded_args._Fields>, java.io.Serializable, Cloneable, Comparable<driverConfirmPassengerAboarded_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("driverConfirmPassengerAboarded_args");

    private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DRIVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("driverId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new driverConfirmPassengerAboarded_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new driverConfirmPassengerAboarded_argsTupleSchemeFactory());
    }

    public String orderId; // required
    public String driverId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORDER_ID((short)1, "orderId"),
      DRIVER_ID((short)2, "driverId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORDER_ID
            return ORDER_ID;
          case 2: // DRIVER_ID
            return DRIVER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DRIVER_ID, new org.apache.thrift.meta_data.FieldMetaData("driverId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(driverConfirmPassengerAboarded_args.class, metaDataMap);
    }

    public driverConfirmPassengerAboarded_args() {
    }

    public driverConfirmPassengerAboarded_args(
      String orderId,
      String driverId)
    {
      this();
      this.orderId = orderId;
      this.driverId = driverId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public driverConfirmPassengerAboarded_args(driverConfirmPassengerAboarded_args other) {
      if (other.isSetOrderId()) {
        this.orderId = other.orderId;
      }
      if (other.isSetDriverId()) {
        this.driverId = other.driverId;
      }
    }

    public driverConfirmPassengerAboarded_args deepCopy() {
      return new driverConfirmPassengerAboarded_args(this);
    }

    @Override
    public void clear() {
      this.orderId = null;
      this.driverId = null;
    }

    public String getOrderId() {
      return this.orderId;
    }

    public driverConfirmPassengerAboarded_args setOrderId(String orderId) {
      this.orderId = orderId;
      return this;
    }

    public void unsetOrderId() {
      this.orderId = null;
    }

    /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderId() {
      return this.orderId != null;
    }

    public void setOrderIdIsSet(boolean value) {
      if (!value) {
        this.orderId = null;
      }
    }

    public String getDriverId() {
      return this.driverId;
    }

    public driverConfirmPassengerAboarded_args setDriverId(String driverId) {
      this.driverId = driverId;
      return this;
    }

    public void unsetDriverId() {
      this.driverId = null;
    }

    /** Returns true if field driverId is set (has been assigned a value) and false otherwise */
    public boolean isSetDriverId() {
      return this.driverId != null;
    }

    public void setDriverIdIsSet(boolean value) {
      if (!value) {
        this.driverId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORDER_ID:
        if (value == null) {
          unsetOrderId();
        } else {
          setOrderId((String)value);
        }
        break;

      case DRIVER_ID:
        if (value == null) {
          unsetDriverId();
        } else {
          setDriverId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORDER_ID:
        return getOrderId();

      case DRIVER_ID:
        return getDriverId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORDER_ID:
        return isSetOrderId();
      case DRIVER_ID:
        return isSetDriverId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof driverConfirmPassengerAboarded_args)
        return this.equals((driverConfirmPassengerAboarded_args)that);
      return false;
    }

    public boolean equals(driverConfirmPassengerAboarded_args that) {
      if (that == null)
        return false;

      boolean this_present_orderId = true && this.isSetOrderId();
      boolean that_present_orderId = true && that.isSetOrderId();
      if (this_present_orderId || that_present_orderId) {
        if (!(this_present_orderId && that_present_orderId))
          return false;
        if (!this.orderId.equals(that.orderId))
          return false;
      }

      boolean this_present_driverId = true && this.isSetDriverId();
      boolean that_present_driverId = true && that.isSetDriverId();
      if (this_present_driverId || that_present_driverId) {
        if (!(this_present_driverId && that_present_driverId))
          return false;
        if (!this.driverId.equals(that.driverId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_orderId = true && (isSetOrderId());
      list.add(present_orderId);
      if (present_orderId)
        list.add(orderId);

      boolean present_driverId = true && (isSetDriverId());
      list.add(present_driverId);
      if (present_driverId)
        list.add(driverId);

      return list.hashCode();
    }

    @Override
    public int compareTo(driverConfirmPassengerAboarded_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDriverId()).compareTo(other.isSetDriverId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDriverId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.driverId, other.driverId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("driverConfirmPassengerAboarded_args(");
      boolean first = true;

      sb.append("orderId:");
      if (this.orderId == null) {
        sb.append("null");
      } else {
        sb.append(this.orderId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("driverId:");
      if (this.driverId == null) {
        sb.append("null");
      } else {
        sb.append(this.driverId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class driverConfirmPassengerAboarded_argsStandardSchemeFactory implements SchemeFactory {
      public driverConfirmPassengerAboarded_argsStandardScheme getScheme() {
        return new driverConfirmPassengerAboarded_argsStandardScheme();
      }
    }

    private static class driverConfirmPassengerAboarded_argsStandardScheme extends StandardScheme<driverConfirmPassengerAboarded_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, driverConfirmPassengerAboarded_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORDER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orderId = iprot.readString();
                struct.setOrderIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DRIVER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.driverId = iprot.readString();
                struct.setDriverIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, driverConfirmPassengerAboarded_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.orderId != null) {
          oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
          oprot.writeString(struct.orderId);
          oprot.writeFieldEnd();
        }
        if (struct.driverId != null) {
          oprot.writeFieldBegin(DRIVER_ID_FIELD_DESC);
          oprot.writeString(struct.driverId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class driverConfirmPassengerAboarded_argsTupleSchemeFactory implements SchemeFactory {
      public driverConfirmPassengerAboarded_argsTupleScheme getScheme() {
        return new driverConfirmPassengerAboarded_argsTupleScheme();
      }
    }

    private static class driverConfirmPassengerAboarded_argsTupleScheme extends TupleScheme<driverConfirmPassengerAboarded_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, driverConfirmPassengerAboarded_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrderId()) {
          optionals.set(0);
        }
        if (struct.isSetDriverId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOrderId()) {
          oprot.writeString(struct.orderId);
        }
        if (struct.isSetDriverId()) {
          oprot.writeString(struct.driverId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, driverConfirmPassengerAboarded_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.orderId = iprot.readString();
          struct.setOrderIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.driverId = iprot.readString();
          struct.setDriverIdIsSet(true);
        }
      }
    }

  }

  public static class driverConfirmPassengerAboarded_result implements org.apache.thrift.TBase<driverConfirmPassengerAboarded_result, driverConfirmPassengerAboarded_result._Fields>, java.io.Serializable, Cloneable, Comparable<driverConfirmPassengerAboarded_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("driverConfirmPassengerAboarded_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSSINESS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("bussinessException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new driverConfirmPassengerAboarded_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new driverConfirmPassengerAboarded_resultTupleSchemeFactory());
    }

    public com.ikamobile.pa.thrift.common.OperateResponse success; // required
    public com.ikamobile.pa.thrift.common.TBusinessException bussinessException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSSINESS_EXCEPTION((short)1, "bussinessException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSSINESS_EXCEPTION
            return BUSSINESS_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ikamobile.pa.thrift.common.OperateResponse.class)));
      tmpMap.put(_Fields.BUSSINESS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("bussinessException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(driverConfirmPassengerAboarded_result.class, metaDataMap);
    }

    public driverConfirmPassengerAboarded_result() {
    }

    public driverConfirmPassengerAboarded_result(
      com.ikamobile.pa.thrift.common.OperateResponse success,
      com.ikamobile.pa.thrift.common.TBusinessException bussinessException)
    {
      this();
      this.success = success;
      this.bussinessException = bussinessException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public driverConfirmPassengerAboarded_result(driverConfirmPassengerAboarded_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ikamobile.pa.thrift.common.OperateResponse(other.success);
      }
      if (other.isSetBussinessException()) {
        this.bussinessException = new com.ikamobile.pa.thrift.common.TBusinessException(other.bussinessException);
      }
    }

    public driverConfirmPassengerAboarded_result deepCopy() {
      return new driverConfirmPassengerAboarded_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.bussinessException = null;
    }

    public com.ikamobile.pa.thrift.common.OperateResponse getSuccess() {
      return this.success;
    }

    public driverConfirmPassengerAboarded_result setSuccess(com.ikamobile.pa.thrift.common.OperateResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ikamobile.pa.thrift.common.TBusinessException getBussinessException() {
      return this.bussinessException;
    }

    public driverConfirmPassengerAboarded_result setBussinessException(com.ikamobile.pa.thrift.common.TBusinessException bussinessException) {
      this.bussinessException = bussinessException;
      return this;
    }

    public void unsetBussinessException() {
      this.bussinessException = null;
    }

    /** Returns true if field bussinessException is set (has been assigned a value) and false otherwise */
    public boolean isSetBussinessException() {
      return this.bussinessException != null;
    }

    public void setBussinessExceptionIsSet(boolean value) {
      if (!value) {
        this.bussinessException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ikamobile.pa.thrift.common.OperateResponse)value);
        }
        break;

      case BUSSINESS_EXCEPTION:
        if (value == null) {
          unsetBussinessException();
        } else {
          setBussinessException((com.ikamobile.pa.thrift.common.TBusinessException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSSINESS_EXCEPTION:
        return getBussinessException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSSINESS_EXCEPTION:
        return isSetBussinessException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof driverConfirmPassengerAboarded_result)
        return this.equals((driverConfirmPassengerAboarded_result)that);
      return false;
    }

    public boolean equals(driverConfirmPassengerAboarded_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_bussinessException = true && this.isSetBussinessException();
      boolean that_present_bussinessException = true && that.isSetBussinessException();
      if (this_present_bussinessException || that_present_bussinessException) {
        if (!(this_present_bussinessException && that_present_bussinessException))
          return false;
        if (!this.bussinessException.equals(that.bussinessException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_bussinessException = true && (isSetBussinessException());
      list.add(present_bussinessException);
      if (present_bussinessException)
        list.add(bussinessException);

      return list.hashCode();
    }

    @Override
    public int compareTo(driverConfirmPassengerAboarded_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBussinessException()).compareTo(other.isSetBussinessException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBussinessException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bussinessException, other.bussinessException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("driverConfirmPassengerAboarded_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bussinessException:");
      if (this.bussinessException == null) {
        sb.append("null");
      } else {
        sb.append(this.bussinessException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class driverConfirmPassengerAboarded_resultStandardSchemeFactory implements SchemeFactory {
      public driverConfirmPassengerAboarded_resultStandardScheme getScheme() {
        return new driverConfirmPassengerAboarded_resultStandardScheme();
      }
    }

    private static class driverConfirmPassengerAboarded_resultStandardScheme extends StandardScheme<driverConfirmPassengerAboarded_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, driverConfirmPassengerAboarded_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ikamobile.pa.thrift.common.OperateResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSSINESS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bussinessException = new com.ikamobile.pa.thrift.common.TBusinessException();
                struct.bussinessException.read(iprot);
                struct.setBussinessExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, driverConfirmPassengerAboarded_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bussinessException != null) {
          oprot.writeFieldBegin(BUSSINESS_EXCEPTION_FIELD_DESC);
          struct.bussinessException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class driverConfirmPassengerAboarded_resultTupleSchemeFactory implements SchemeFactory {
      public driverConfirmPassengerAboarded_resultTupleScheme getScheme() {
        return new driverConfirmPassengerAboarded_resultTupleScheme();
      }
    }

    private static class driverConfirmPassengerAboarded_resultTupleScheme extends TupleScheme<driverConfirmPassengerAboarded_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, driverConfirmPassengerAboarded_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBussinessException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBussinessException()) {
          struct.bussinessException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, driverConfirmPassengerAboarded_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ikamobile.pa.thrift.common.OperateResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bussinessException = new com.ikamobile.pa.thrift.common.TBusinessException();
          struct.bussinessException.read(iprot);
          struct.setBussinessExceptionIsSet(true);
        }
      }
    }

  }

  public static class accept_args implements org.apache.thrift.TBase<accept_args, accept_args._Fields>, java.io.Serializable, Cloneable, Comparable<accept_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("accept_args");

    private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField OPERATOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("operatorId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new accept_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new accept_argsTupleSchemeFactory());
    }

    public String orderId; // required
    public String operatorId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORDER_ID((short)1, "orderId"),
      OPERATOR_ID((short)2, "operatorId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORDER_ID
            return ORDER_ID;
          case 2: // OPERATOR_ID
            return OPERATOR_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OPERATOR_ID, new org.apache.thrift.meta_data.FieldMetaData("operatorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(accept_args.class, metaDataMap);
    }

    public accept_args() {
    }

    public accept_args(
      String orderId,
      String operatorId)
    {
      this();
      this.orderId = orderId;
      this.operatorId = operatorId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public accept_args(accept_args other) {
      if (other.isSetOrderId()) {
        this.orderId = other.orderId;
      }
      if (other.isSetOperatorId()) {
        this.operatorId = other.operatorId;
      }
    }

    public accept_args deepCopy() {
      return new accept_args(this);
    }

    @Override
    public void clear() {
      this.orderId = null;
      this.operatorId = null;
    }

    public String getOrderId() {
      return this.orderId;
    }

    public accept_args setOrderId(String orderId) {
      this.orderId = orderId;
      return this;
    }

    public void unsetOrderId() {
      this.orderId = null;
    }

    /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderId() {
      return this.orderId != null;
    }

    public void setOrderIdIsSet(boolean value) {
      if (!value) {
        this.orderId = null;
      }
    }

    public String getOperatorId() {
      return this.operatorId;
    }

    public accept_args setOperatorId(String operatorId) {
      this.operatorId = operatorId;
      return this;
    }

    public void unsetOperatorId() {
      this.operatorId = null;
    }

    /** Returns true if field operatorId is set (has been assigned a value) and false otherwise */
    public boolean isSetOperatorId() {
      return this.operatorId != null;
    }

    public void setOperatorIdIsSet(boolean value) {
      if (!value) {
        this.operatorId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORDER_ID:
        if (value == null) {
          unsetOrderId();
        } else {
          setOrderId((String)value);
        }
        break;

      case OPERATOR_ID:
        if (value == null) {
          unsetOperatorId();
        } else {
          setOperatorId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORDER_ID:
        return getOrderId();

      case OPERATOR_ID:
        return getOperatorId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORDER_ID:
        return isSetOrderId();
      case OPERATOR_ID:
        return isSetOperatorId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof accept_args)
        return this.equals((accept_args)that);
      return false;
    }

    public boolean equals(accept_args that) {
      if (that == null)
        return false;

      boolean this_present_orderId = true && this.isSetOrderId();
      boolean that_present_orderId = true && that.isSetOrderId();
      if (this_present_orderId || that_present_orderId) {
        if (!(this_present_orderId && that_present_orderId))
          return false;
        if (!this.orderId.equals(that.orderId))
          return false;
      }

      boolean this_present_operatorId = true && this.isSetOperatorId();
      boolean that_present_operatorId = true && that.isSetOperatorId();
      if (this_present_operatorId || that_present_operatorId) {
        if (!(this_present_operatorId && that_present_operatorId))
          return false;
        if (!this.operatorId.equals(that.operatorId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_orderId = true && (isSetOrderId());
      list.add(present_orderId);
      if (present_orderId)
        list.add(orderId);

      boolean present_operatorId = true && (isSetOperatorId());
      list.add(present_operatorId);
      if (present_operatorId)
        list.add(operatorId);

      return list.hashCode();
    }

    @Override
    public int compareTo(accept_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOperatorId()).compareTo(other.isSetOperatorId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOperatorId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operatorId, other.operatorId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("accept_args(");
      boolean first = true;

      sb.append("orderId:");
      if (this.orderId == null) {
        sb.append("null");
      } else {
        sb.append(this.orderId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("operatorId:");
      if (this.operatorId == null) {
        sb.append("null");
      } else {
        sb.append(this.operatorId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class accept_argsStandardSchemeFactory implements SchemeFactory {
      public accept_argsStandardScheme getScheme() {
        return new accept_argsStandardScheme();
      }
    }

    private static class accept_argsStandardScheme extends StandardScheme<accept_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, accept_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORDER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orderId = iprot.readString();
                struct.setOrderIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OPERATOR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.operatorId = iprot.readString();
                struct.setOperatorIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, accept_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.orderId != null) {
          oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
          oprot.writeString(struct.orderId);
          oprot.writeFieldEnd();
        }
        if (struct.operatorId != null) {
          oprot.writeFieldBegin(OPERATOR_ID_FIELD_DESC);
          oprot.writeString(struct.operatorId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class accept_argsTupleSchemeFactory implements SchemeFactory {
      public accept_argsTupleScheme getScheme() {
        return new accept_argsTupleScheme();
      }
    }

    private static class accept_argsTupleScheme extends TupleScheme<accept_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, accept_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrderId()) {
          optionals.set(0);
        }
        if (struct.isSetOperatorId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOrderId()) {
          oprot.writeString(struct.orderId);
        }
        if (struct.isSetOperatorId()) {
          oprot.writeString(struct.operatorId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, accept_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.orderId = iprot.readString();
          struct.setOrderIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.operatorId = iprot.readString();
          struct.setOperatorIdIsSet(true);
        }
      }
    }

  }

  public static class accept_result implements org.apache.thrift.TBase<accept_result, accept_result._Fields>, java.io.Serializable, Cloneable, Comparable<accept_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("accept_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSSINESS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("bussinessException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new accept_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new accept_resultTupleSchemeFactory());
    }

    public com.ikamobile.pa.thrift.common.OperateResponse success; // required
    public com.ikamobile.pa.thrift.common.TBusinessException bussinessException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSSINESS_EXCEPTION((short)1, "bussinessException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSSINESS_EXCEPTION
            return BUSSINESS_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ikamobile.pa.thrift.common.OperateResponse.class)));
      tmpMap.put(_Fields.BUSSINESS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("bussinessException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(accept_result.class, metaDataMap);
    }

    public accept_result() {
    }

    public accept_result(
      com.ikamobile.pa.thrift.common.OperateResponse success,
      com.ikamobile.pa.thrift.common.TBusinessException bussinessException)
    {
      this();
      this.success = success;
      this.bussinessException = bussinessException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public accept_result(accept_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ikamobile.pa.thrift.common.OperateResponse(other.success);
      }
      if (other.isSetBussinessException()) {
        this.bussinessException = new com.ikamobile.pa.thrift.common.TBusinessException(other.bussinessException);
      }
    }

    public accept_result deepCopy() {
      return new accept_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.bussinessException = null;
    }

    public com.ikamobile.pa.thrift.common.OperateResponse getSuccess() {
      return this.success;
    }

    public accept_result setSuccess(com.ikamobile.pa.thrift.common.OperateResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ikamobile.pa.thrift.common.TBusinessException getBussinessException() {
      return this.bussinessException;
    }

    public accept_result setBussinessException(com.ikamobile.pa.thrift.common.TBusinessException bussinessException) {
      this.bussinessException = bussinessException;
      return this;
    }

    public void unsetBussinessException() {
      this.bussinessException = null;
    }

    /** Returns true if field bussinessException is set (has been assigned a value) and false otherwise */
    public boolean isSetBussinessException() {
      return this.bussinessException != null;
    }

    public void setBussinessExceptionIsSet(boolean value) {
      if (!value) {
        this.bussinessException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ikamobile.pa.thrift.common.OperateResponse)value);
        }
        break;

      case BUSSINESS_EXCEPTION:
        if (value == null) {
          unsetBussinessException();
        } else {
          setBussinessException((com.ikamobile.pa.thrift.common.TBusinessException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSSINESS_EXCEPTION:
        return getBussinessException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSSINESS_EXCEPTION:
        return isSetBussinessException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof accept_result)
        return this.equals((accept_result)that);
      return false;
    }

    public boolean equals(accept_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_bussinessException = true && this.isSetBussinessException();
      boolean that_present_bussinessException = true && that.isSetBussinessException();
      if (this_present_bussinessException || that_present_bussinessException) {
        if (!(this_present_bussinessException && that_present_bussinessException))
          return false;
        if (!this.bussinessException.equals(that.bussinessException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_bussinessException = true && (isSetBussinessException());
      list.add(present_bussinessException);
      if (present_bussinessException)
        list.add(bussinessException);

      return list.hashCode();
    }

    @Override
    public int compareTo(accept_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBussinessException()).compareTo(other.isSetBussinessException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBussinessException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bussinessException, other.bussinessException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("accept_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bussinessException:");
      if (this.bussinessException == null) {
        sb.append("null");
      } else {
        sb.append(this.bussinessException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class accept_resultStandardSchemeFactory implements SchemeFactory {
      public accept_resultStandardScheme getScheme() {
        return new accept_resultStandardScheme();
      }
    }

    private static class accept_resultStandardScheme extends StandardScheme<accept_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, accept_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ikamobile.pa.thrift.common.OperateResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSSINESS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bussinessException = new com.ikamobile.pa.thrift.common.TBusinessException();
                struct.bussinessException.read(iprot);
                struct.setBussinessExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, accept_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bussinessException != null) {
          oprot.writeFieldBegin(BUSSINESS_EXCEPTION_FIELD_DESC);
          struct.bussinessException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class accept_resultTupleSchemeFactory implements SchemeFactory {
      public accept_resultTupleScheme getScheme() {
        return new accept_resultTupleScheme();
      }
    }

    private static class accept_resultTupleScheme extends TupleScheme<accept_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, accept_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBussinessException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBussinessException()) {
          struct.bussinessException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, accept_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ikamobile.pa.thrift.common.OperateResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bussinessException = new com.ikamobile.pa.thrift.common.TBusinessException();
          struct.bussinessException.read(iprot);
          struct.setBussinessExceptionIsSet(true);
        }
      }
    }

  }

  public static class deny_args implements org.apache.thrift.TBase<deny_args, deny_args._Fields>, java.io.Serializable, Cloneable, Comparable<deny_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deny_args");

    private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField OPERATOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("operatorId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deny_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deny_argsTupleSchemeFactory());
    }

    public String orderId; // required
    public String operatorId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORDER_ID((short)1, "orderId"),
      OPERATOR_ID((short)2, "operatorId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORDER_ID
            return ORDER_ID;
          case 2: // OPERATOR_ID
            return OPERATOR_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OPERATOR_ID, new org.apache.thrift.meta_data.FieldMetaData("operatorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deny_args.class, metaDataMap);
    }

    public deny_args() {
    }

    public deny_args(
      String orderId,
      String operatorId)
    {
      this();
      this.orderId = orderId;
      this.operatorId = operatorId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deny_args(deny_args other) {
      if (other.isSetOrderId()) {
        this.orderId = other.orderId;
      }
      if (other.isSetOperatorId()) {
        this.operatorId = other.operatorId;
      }
    }

    public deny_args deepCopy() {
      return new deny_args(this);
    }

    @Override
    public void clear() {
      this.orderId = null;
      this.operatorId = null;
    }

    public String getOrderId() {
      return this.orderId;
    }

    public deny_args setOrderId(String orderId) {
      this.orderId = orderId;
      return this;
    }

    public void unsetOrderId() {
      this.orderId = null;
    }

    /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderId() {
      return this.orderId != null;
    }

    public void setOrderIdIsSet(boolean value) {
      if (!value) {
        this.orderId = null;
      }
    }

    public String getOperatorId() {
      return this.operatorId;
    }

    public deny_args setOperatorId(String operatorId) {
      this.operatorId = operatorId;
      return this;
    }

    public void unsetOperatorId() {
      this.operatorId = null;
    }

    /** Returns true if field operatorId is set (has been assigned a value) and false otherwise */
    public boolean isSetOperatorId() {
      return this.operatorId != null;
    }

    public void setOperatorIdIsSet(boolean value) {
      if (!value) {
        this.operatorId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORDER_ID:
        if (value == null) {
          unsetOrderId();
        } else {
          setOrderId((String)value);
        }
        break;

      case OPERATOR_ID:
        if (value == null) {
          unsetOperatorId();
        } else {
          setOperatorId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORDER_ID:
        return getOrderId();

      case OPERATOR_ID:
        return getOperatorId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORDER_ID:
        return isSetOrderId();
      case OPERATOR_ID:
        return isSetOperatorId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deny_args)
        return this.equals((deny_args)that);
      return false;
    }

    public boolean equals(deny_args that) {
      if (that == null)
        return false;

      boolean this_present_orderId = true && this.isSetOrderId();
      boolean that_present_orderId = true && that.isSetOrderId();
      if (this_present_orderId || that_present_orderId) {
        if (!(this_present_orderId && that_present_orderId))
          return false;
        if (!this.orderId.equals(that.orderId))
          return false;
      }

      boolean this_present_operatorId = true && this.isSetOperatorId();
      boolean that_present_operatorId = true && that.isSetOperatorId();
      if (this_present_operatorId || that_present_operatorId) {
        if (!(this_present_operatorId && that_present_operatorId))
          return false;
        if (!this.operatorId.equals(that.operatorId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_orderId = true && (isSetOrderId());
      list.add(present_orderId);
      if (present_orderId)
        list.add(orderId);

      boolean present_operatorId = true && (isSetOperatorId());
      list.add(present_operatorId);
      if (present_operatorId)
        list.add(operatorId);

      return list.hashCode();
    }

    @Override
    public int compareTo(deny_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOperatorId()).compareTo(other.isSetOperatorId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOperatorId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operatorId, other.operatorId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deny_args(");
      boolean first = true;

      sb.append("orderId:");
      if (this.orderId == null) {
        sb.append("null");
      } else {
        sb.append(this.orderId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("operatorId:");
      if (this.operatorId == null) {
        sb.append("null");
      } else {
        sb.append(this.operatorId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deny_argsStandardSchemeFactory implements SchemeFactory {
      public deny_argsStandardScheme getScheme() {
        return new deny_argsStandardScheme();
      }
    }

    private static class deny_argsStandardScheme extends StandardScheme<deny_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deny_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORDER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orderId = iprot.readString();
                struct.setOrderIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OPERATOR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.operatorId = iprot.readString();
                struct.setOperatorIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deny_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.orderId != null) {
          oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
          oprot.writeString(struct.orderId);
          oprot.writeFieldEnd();
        }
        if (struct.operatorId != null) {
          oprot.writeFieldBegin(OPERATOR_ID_FIELD_DESC);
          oprot.writeString(struct.operatorId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deny_argsTupleSchemeFactory implements SchemeFactory {
      public deny_argsTupleScheme getScheme() {
        return new deny_argsTupleScheme();
      }
    }

    private static class deny_argsTupleScheme extends TupleScheme<deny_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deny_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrderId()) {
          optionals.set(0);
        }
        if (struct.isSetOperatorId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOrderId()) {
          oprot.writeString(struct.orderId);
        }
        if (struct.isSetOperatorId()) {
          oprot.writeString(struct.operatorId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deny_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.orderId = iprot.readString();
          struct.setOrderIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.operatorId = iprot.readString();
          struct.setOperatorIdIsSet(true);
        }
      }
    }

  }

  public static class deny_result implements org.apache.thrift.TBase<deny_result, deny_result._Fields>, java.io.Serializable, Cloneable, Comparable<deny_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deny_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSSINESS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("bussinessException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deny_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deny_resultTupleSchemeFactory());
    }

    public com.ikamobile.pa.thrift.common.OperateResponse success; // required
    public com.ikamobile.pa.thrift.common.TBusinessException bussinessException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSSINESS_EXCEPTION((short)1, "bussinessException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSSINESS_EXCEPTION
            return BUSSINESS_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ikamobile.pa.thrift.common.OperateResponse.class)));
      tmpMap.put(_Fields.BUSSINESS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("bussinessException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deny_result.class, metaDataMap);
    }

    public deny_result() {
    }

    public deny_result(
      com.ikamobile.pa.thrift.common.OperateResponse success,
      com.ikamobile.pa.thrift.common.TBusinessException bussinessException)
    {
      this();
      this.success = success;
      this.bussinessException = bussinessException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deny_result(deny_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ikamobile.pa.thrift.common.OperateResponse(other.success);
      }
      if (other.isSetBussinessException()) {
        this.bussinessException = new com.ikamobile.pa.thrift.common.TBusinessException(other.bussinessException);
      }
    }

    public deny_result deepCopy() {
      return new deny_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.bussinessException = null;
    }

    public com.ikamobile.pa.thrift.common.OperateResponse getSuccess() {
      return this.success;
    }

    public deny_result setSuccess(com.ikamobile.pa.thrift.common.OperateResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ikamobile.pa.thrift.common.TBusinessException getBussinessException() {
      return this.bussinessException;
    }

    public deny_result setBussinessException(com.ikamobile.pa.thrift.common.TBusinessException bussinessException) {
      this.bussinessException = bussinessException;
      return this;
    }

    public void unsetBussinessException() {
      this.bussinessException = null;
    }

    /** Returns true if field bussinessException is set (has been assigned a value) and false otherwise */
    public boolean isSetBussinessException() {
      return this.bussinessException != null;
    }

    public void setBussinessExceptionIsSet(boolean value) {
      if (!value) {
        this.bussinessException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ikamobile.pa.thrift.common.OperateResponse)value);
        }
        break;

      case BUSSINESS_EXCEPTION:
        if (value == null) {
          unsetBussinessException();
        } else {
          setBussinessException((com.ikamobile.pa.thrift.common.TBusinessException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSSINESS_EXCEPTION:
        return getBussinessException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSSINESS_EXCEPTION:
        return isSetBussinessException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deny_result)
        return this.equals((deny_result)that);
      return false;
    }

    public boolean equals(deny_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_bussinessException = true && this.isSetBussinessException();
      boolean that_present_bussinessException = true && that.isSetBussinessException();
      if (this_present_bussinessException || that_present_bussinessException) {
        if (!(this_present_bussinessException && that_present_bussinessException))
          return false;
        if (!this.bussinessException.equals(that.bussinessException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_bussinessException = true && (isSetBussinessException());
      list.add(present_bussinessException);
      if (present_bussinessException)
        list.add(bussinessException);

      return list.hashCode();
    }

    @Override
    public int compareTo(deny_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBussinessException()).compareTo(other.isSetBussinessException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBussinessException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bussinessException, other.bussinessException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deny_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bussinessException:");
      if (this.bussinessException == null) {
        sb.append("null");
      } else {
        sb.append(this.bussinessException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deny_resultStandardSchemeFactory implements SchemeFactory {
      public deny_resultStandardScheme getScheme() {
        return new deny_resultStandardScheme();
      }
    }

    private static class deny_resultStandardScheme extends StandardScheme<deny_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deny_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ikamobile.pa.thrift.common.OperateResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSSINESS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bussinessException = new com.ikamobile.pa.thrift.common.TBusinessException();
                struct.bussinessException.read(iprot);
                struct.setBussinessExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deny_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bussinessException != null) {
          oprot.writeFieldBegin(BUSSINESS_EXCEPTION_FIELD_DESC);
          struct.bussinessException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deny_resultTupleSchemeFactory implements SchemeFactory {
      public deny_resultTupleScheme getScheme() {
        return new deny_resultTupleScheme();
      }
    }

    private static class deny_resultTupleScheme extends TupleScheme<deny_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deny_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBussinessException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBussinessException()) {
          struct.bussinessException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deny_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ikamobile.pa.thrift.common.OperateResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bussinessException = new com.ikamobile.pa.thrift.common.TBusinessException();
          struct.bussinessException.read(iprot);
          struct.setBussinessExceptionIsSet(true);
        }
      }
    }

  }

  public static class dispatch_args implements org.apache.thrift.TBase<dispatch_args, dispatch_args._Fields>, java.io.Serializable, Cloneable, Comparable<dispatch_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dispatch_args");

    private static final org.apache.thrift.protocol.TField PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("param", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OPERATOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("operatorId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dispatch_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dispatch_argsTupleSchemeFactory());
    }

    public DispatchParamDto param; // required
    public String operatorId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAM((short)1, "param"),
      OPERATOR_ID((short)2, "operatorId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARAM
            return PARAM;
          case 2: // OPERATOR_ID
            return OPERATOR_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAM, new org.apache.thrift.meta_data.FieldMetaData("param", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DispatchParamDto.class)));
      tmpMap.put(_Fields.OPERATOR_ID, new org.apache.thrift.meta_data.FieldMetaData("operatorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dispatch_args.class, metaDataMap);
    }

    public dispatch_args() {
    }

    public dispatch_args(
      DispatchParamDto param,
      String operatorId)
    {
      this();
      this.param = param;
      this.operatorId = operatorId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dispatch_args(dispatch_args other) {
      if (other.isSetParam()) {
        this.param = new DispatchParamDto(other.param);
      }
      if (other.isSetOperatorId()) {
        this.operatorId = other.operatorId;
      }
    }

    public dispatch_args deepCopy() {
      return new dispatch_args(this);
    }

    @Override
    public void clear() {
      this.param = null;
      this.operatorId = null;
    }

    public DispatchParamDto getParam() {
      return this.param;
    }

    public dispatch_args setParam(DispatchParamDto param) {
      this.param = param;
      return this;
    }

    public void unsetParam() {
      this.param = null;
    }

    /** Returns true if field param is set (has been assigned a value) and false otherwise */
    public boolean isSetParam() {
      return this.param != null;
    }

    public void setParamIsSet(boolean value) {
      if (!value) {
        this.param = null;
      }
    }

    public String getOperatorId() {
      return this.operatorId;
    }

    public dispatch_args setOperatorId(String operatorId) {
      this.operatorId = operatorId;
      return this;
    }

    public void unsetOperatorId() {
      this.operatorId = null;
    }

    /** Returns true if field operatorId is set (has been assigned a value) and false otherwise */
    public boolean isSetOperatorId() {
      return this.operatorId != null;
    }

    public void setOperatorIdIsSet(boolean value) {
      if (!value) {
        this.operatorId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARAM:
        if (value == null) {
          unsetParam();
        } else {
          setParam((DispatchParamDto)value);
        }
        break;

      case OPERATOR_ID:
        if (value == null) {
          unsetOperatorId();
        } else {
          setOperatorId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAM:
        return getParam();

      case OPERATOR_ID:
        return getOperatorId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARAM:
        return isSetParam();
      case OPERATOR_ID:
        return isSetOperatorId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dispatch_args)
        return this.equals((dispatch_args)that);
      return false;
    }

    public boolean equals(dispatch_args that) {
      if (that == null)
        return false;

      boolean this_present_param = true && this.isSetParam();
      boolean that_present_param = true && that.isSetParam();
      if (this_present_param || that_present_param) {
        if (!(this_present_param && that_present_param))
          return false;
        if (!this.param.equals(that.param))
          return false;
      }

      boolean this_present_operatorId = true && this.isSetOperatorId();
      boolean that_present_operatorId = true && that.isSetOperatorId();
      if (this_present_operatorId || that_present_operatorId) {
        if (!(this_present_operatorId && that_present_operatorId))
          return false;
        if (!this.operatorId.equals(that.operatorId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_param = true && (isSetParam());
      list.add(present_param);
      if (present_param)
        list.add(param);

      boolean present_operatorId = true && (isSetOperatorId());
      list.add(present_operatorId);
      if (present_operatorId)
        list.add(operatorId);

      return list.hashCode();
    }

    @Override
    public int compareTo(dispatch_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParam()).compareTo(other.isSetParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param, other.param);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOperatorId()).compareTo(other.isSetOperatorId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOperatorId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operatorId, other.operatorId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dispatch_args(");
      boolean first = true;

      sb.append("param:");
      if (this.param == null) {
        sb.append("null");
      } else {
        sb.append(this.param);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("operatorId:");
      if (this.operatorId == null) {
        sb.append("null");
      } else {
        sb.append(this.operatorId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (param != null) {
        param.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dispatch_argsStandardSchemeFactory implements SchemeFactory {
      public dispatch_argsStandardScheme getScheme() {
        return new dispatch_argsStandardScheme();
      }
    }

    private static class dispatch_argsStandardScheme extends StandardScheme<dispatch_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dispatch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.param = new DispatchParamDto();
                struct.param.read(iprot);
                struct.setParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OPERATOR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.operatorId = iprot.readString();
                struct.setOperatorIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dispatch_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.param != null) {
          oprot.writeFieldBegin(PARAM_FIELD_DESC);
          struct.param.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.operatorId != null) {
          oprot.writeFieldBegin(OPERATOR_ID_FIELD_DESC);
          oprot.writeString(struct.operatorId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dispatch_argsTupleSchemeFactory implements SchemeFactory {
      public dispatch_argsTupleScheme getScheme() {
        return new dispatch_argsTupleScheme();
      }
    }

    private static class dispatch_argsTupleScheme extends TupleScheme<dispatch_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dispatch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetParam()) {
          optionals.set(0);
        }
        if (struct.isSetOperatorId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetParam()) {
          struct.param.write(oprot);
        }
        if (struct.isSetOperatorId()) {
          oprot.writeString(struct.operatorId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dispatch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.param = new DispatchParamDto();
          struct.param.read(iprot);
          struct.setParamIsSet(true);
        }
        if (incoming.get(1)) {
          struct.operatorId = iprot.readString();
          struct.setOperatorIdIsSet(true);
        }
      }
    }

  }

  public static class dispatch_result implements org.apache.thrift.TBase<dispatch_result, dispatch_result._Fields>, java.io.Serializable, Cloneable, Comparable<dispatch_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dispatch_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSSINESS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("bussinessException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dispatch_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dispatch_resultTupleSchemeFactory());
    }

    public com.ikamobile.pa.thrift.common.OperateResponse success; // required
    public com.ikamobile.pa.thrift.common.TBusinessException bussinessException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSSINESS_EXCEPTION((short)1, "bussinessException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSSINESS_EXCEPTION
            return BUSSINESS_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ikamobile.pa.thrift.common.OperateResponse.class)));
      tmpMap.put(_Fields.BUSSINESS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("bussinessException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dispatch_result.class, metaDataMap);
    }

    public dispatch_result() {
    }

    public dispatch_result(
      com.ikamobile.pa.thrift.common.OperateResponse success,
      com.ikamobile.pa.thrift.common.TBusinessException bussinessException)
    {
      this();
      this.success = success;
      this.bussinessException = bussinessException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dispatch_result(dispatch_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ikamobile.pa.thrift.common.OperateResponse(other.success);
      }
      if (other.isSetBussinessException()) {
        this.bussinessException = new com.ikamobile.pa.thrift.common.TBusinessException(other.bussinessException);
      }
    }

    public dispatch_result deepCopy() {
      return new dispatch_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.bussinessException = null;
    }

    public com.ikamobile.pa.thrift.common.OperateResponse getSuccess() {
      return this.success;
    }

    public dispatch_result setSuccess(com.ikamobile.pa.thrift.common.OperateResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ikamobile.pa.thrift.common.TBusinessException getBussinessException() {
      return this.bussinessException;
    }

    public dispatch_result setBussinessException(com.ikamobile.pa.thrift.common.TBusinessException bussinessException) {
      this.bussinessException = bussinessException;
      return this;
    }

    public void unsetBussinessException() {
      this.bussinessException = null;
    }

    /** Returns true if field bussinessException is set (has been assigned a value) and false otherwise */
    public boolean isSetBussinessException() {
      return this.bussinessException != null;
    }

    public void setBussinessExceptionIsSet(boolean value) {
      if (!value) {
        this.bussinessException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ikamobile.pa.thrift.common.OperateResponse)value);
        }
        break;

      case BUSSINESS_EXCEPTION:
        if (value == null) {
          unsetBussinessException();
        } else {
          setBussinessException((com.ikamobile.pa.thrift.common.TBusinessException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSSINESS_EXCEPTION:
        return getBussinessException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSSINESS_EXCEPTION:
        return isSetBussinessException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dispatch_result)
        return this.equals((dispatch_result)that);
      return false;
    }

    public boolean equals(dispatch_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_bussinessException = true && this.isSetBussinessException();
      boolean that_present_bussinessException = true && that.isSetBussinessException();
      if (this_present_bussinessException || that_present_bussinessException) {
        if (!(this_present_bussinessException && that_present_bussinessException))
          return false;
        if (!this.bussinessException.equals(that.bussinessException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_bussinessException = true && (isSetBussinessException());
      list.add(present_bussinessException);
      if (present_bussinessException)
        list.add(bussinessException);

      return list.hashCode();
    }

    @Override
    public int compareTo(dispatch_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBussinessException()).compareTo(other.isSetBussinessException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBussinessException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bussinessException, other.bussinessException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dispatch_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bussinessException:");
      if (this.bussinessException == null) {
        sb.append("null");
      } else {
        sb.append(this.bussinessException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dispatch_resultStandardSchemeFactory implements SchemeFactory {
      public dispatch_resultStandardScheme getScheme() {
        return new dispatch_resultStandardScheme();
      }
    }

    private static class dispatch_resultStandardScheme extends StandardScheme<dispatch_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dispatch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ikamobile.pa.thrift.common.OperateResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSSINESS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bussinessException = new com.ikamobile.pa.thrift.common.TBusinessException();
                struct.bussinessException.read(iprot);
                struct.setBussinessExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dispatch_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bussinessException != null) {
          oprot.writeFieldBegin(BUSSINESS_EXCEPTION_FIELD_DESC);
          struct.bussinessException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dispatch_resultTupleSchemeFactory implements SchemeFactory {
      public dispatch_resultTupleScheme getScheme() {
        return new dispatch_resultTupleScheme();
      }
    }

    private static class dispatch_resultTupleScheme extends TupleScheme<dispatch_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dispatch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBussinessException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBussinessException()) {
          struct.bussinessException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dispatch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ikamobile.pa.thrift.common.OperateResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bussinessException = new com.ikamobile.pa.thrift.common.TBusinessException();
          struct.bussinessException.read(iprot);
          struct.setBussinessExceptionIsSet(true);
        }
      }
    }

  }

  public static class unDispatch_args implements org.apache.thrift.TBase<unDispatch_args, unDispatch_args._Fields>, java.io.Serializable, Cloneable, Comparable<unDispatch_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unDispatch_args");

    private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField OPERATOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("operatorId", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unDispatch_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unDispatch_argsTupleSchemeFactory());
    }

    public String orderId; // required
    public String taskId; // required
    public String operatorId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORDER_ID((short)1, "orderId"),
      TASK_ID((short)2, "taskId"),
      OPERATOR_ID((short)3, "operatorId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORDER_ID
            return ORDER_ID;
          case 2: // TASK_ID
            return TASK_ID;
          case 3: // OPERATOR_ID
            return OPERATOR_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OPERATOR_ID, new org.apache.thrift.meta_data.FieldMetaData("operatorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unDispatch_args.class, metaDataMap);
    }

    public unDispatch_args() {
    }

    public unDispatch_args(
      String orderId,
      String taskId,
      String operatorId)
    {
      this();
      this.orderId = orderId;
      this.taskId = taskId;
      this.operatorId = operatorId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unDispatch_args(unDispatch_args other) {
      if (other.isSetOrderId()) {
        this.orderId = other.orderId;
      }
      if (other.isSetTaskId()) {
        this.taskId = other.taskId;
      }
      if (other.isSetOperatorId()) {
        this.operatorId = other.operatorId;
      }
    }

    public unDispatch_args deepCopy() {
      return new unDispatch_args(this);
    }

    @Override
    public void clear() {
      this.orderId = null;
      this.taskId = null;
      this.operatorId = null;
    }

    public String getOrderId() {
      return this.orderId;
    }

    public unDispatch_args setOrderId(String orderId) {
      this.orderId = orderId;
      return this;
    }

    public void unsetOrderId() {
      this.orderId = null;
    }

    /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderId() {
      return this.orderId != null;
    }

    public void setOrderIdIsSet(boolean value) {
      if (!value) {
        this.orderId = null;
      }
    }

    public String getTaskId() {
      return this.taskId;
    }

    public unDispatch_args setTaskId(String taskId) {
      this.taskId = taskId;
      return this;
    }

    public void unsetTaskId() {
      this.taskId = null;
    }

    /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskId() {
      return this.taskId != null;
    }

    public void setTaskIdIsSet(boolean value) {
      if (!value) {
        this.taskId = null;
      }
    }

    public String getOperatorId() {
      return this.operatorId;
    }

    public unDispatch_args setOperatorId(String operatorId) {
      this.operatorId = operatorId;
      return this;
    }

    public void unsetOperatorId() {
      this.operatorId = null;
    }

    /** Returns true if field operatorId is set (has been assigned a value) and false otherwise */
    public boolean isSetOperatorId() {
      return this.operatorId != null;
    }

    public void setOperatorIdIsSet(boolean value) {
      if (!value) {
        this.operatorId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORDER_ID:
        if (value == null) {
          unsetOrderId();
        } else {
          setOrderId((String)value);
        }
        break;

      case TASK_ID:
        if (value == null) {
          unsetTaskId();
        } else {
          setTaskId((String)value);
        }
        break;

      case OPERATOR_ID:
        if (value == null) {
          unsetOperatorId();
        } else {
          setOperatorId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORDER_ID:
        return getOrderId();

      case TASK_ID:
        return getTaskId();

      case OPERATOR_ID:
        return getOperatorId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORDER_ID:
        return isSetOrderId();
      case TASK_ID:
        return isSetTaskId();
      case OPERATOR_ID:
        return isSetOperatorId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unDispatch_args)
        return this.equals((unDispatch_args)that);
      return false;
    }

    public boolean equals(unDispatch_args that) {
      if (that == null)
        return false;

      boolean this_present_orderId = true && this.isSetOrderId();
      boolean that_present_orderId = true && that.isSetOrderId();
      if (this_present_orderId || that_present_orderId) {
        if (!(this_present_orderId && that_present_orderId))
          return false;
        if (!this.orderId.equals(that.orderId))
          return false;
      }

      boolean this_present_taskId = true && this.isSetTaskId();
      boolean that_present_taskId = true && that.isSetTaskId();
      if (this_present_taskId || that_present_taskId) {
        if (!(this_present_taskId && that_present_taskId))
          return false;
        if (!this.taskId.equals(that.taskId))
          return false;
      }

      boolean this_present_operatorId = true && this.isSetOperatorId();
      boolean that_present_operatorId = true && that.isSetOperatorId();
      if (this_present_operatorId || that_present_operatorId) {
        if (!(this_present_operatorId && that_present_operatorId))
          return false;
        if (!this.operatorId.equals(that.operatorId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_orderId = true && (isSetOrderId());
      list.add(present_orderId);
      if (present_orderId)
        list.add(orderId);

      boolean present_taskId = true && (isSetTaskId());
      list.add(present_taskId);
      if (present_taskId)
        list.add(taskId);

      boolean present_operatorId = true && (isSetOperatorId());
      list.add(present_operatorId);
      if (present_operatorId)
        list.add(operatorId);

      return list.hashCode();
    }

    @Override
    public int compareTo(unDispatch_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOperatorId()).compareTo(other.isSetOperatorId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOperatorId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operatorId, other.operatorId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unDispatch_args(");
      boolean first = true;

      sb.append("orderId:");
      if (this.orderId == null) {
        sb.append("null");
      } else {
        sb.append(this.orderId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("taskId:");
      if (this.taskId == null) {
        sb.append("null");
      } else {
        sb.append(this.taskId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("operatorId:");
      if (this.operatorId == null) {
        sb.append("null");
      } else {
        sb.append(this.operatorId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unDispatch_argsStandardSchemeFactory implements SchemeFactory {
      public unDispatch_argsStandardScheme getScheme() {
        return new unDispatch_argsStandardScheme();
      }
    }

    private static class unDispatch_argsStandardScheme extends StandardScheme<unDispatch_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unDispatch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORDER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orderId = iprot.readString();
                struct.setOrderIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TASK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.taskId = iprot.readString();
                struct.setTaskIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OPERATOR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.operatorId = iprot.readString();
                struct.setOperatorIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unDispatch_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.orderId != null) {
          oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
          oprot.writeString(struct.orderId);
          oprot.writeFieldEnd();
        }
        if (struct.taskId != null) {
          oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
          oprot.writeString(struct.taskId);
          oprot.writeFieldEnd();
        }
        if (struct.operatorId != null) {
          oprot.writeFieldBegin(OPERATOR_ID_FIELD_DESC);
          oprot.writeString(struct.operatorId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unDispatch_argsTupleSchemeFactory implements SchemeFactory {
      public unDispatch_argsTupleScheme getScheme() {
        return new unDispatch_argsTupleScheme();
      }
    }

    private static class unDispatch_argsTupleScheme extends TupleScheme<unDispatch_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unDispatch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrderId()) {
          optionals.set(0);
        }
        if (struct.isSetTaskId()) {
          optionals.set(1);
        }
        if (struct.isSetOperatorId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetOrderId()) {
          oprot.writeString(struct.orderId);
        }
        if (struct.isSetTaskId()) {
          oprot.writeString(struct.taskId);
        }
        if (struct.isSetOperatorId()) {
          oprot.writeString(struct.operatorId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unDispatch_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.orderId = iprot.readString();
          struct.setOrderIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.taskId = iprot.readString();
          struct.setTaskIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.operatorId = iprot.readString();
          struct.setOperatorIdIsSet(true);
        }
      }
    }

  }

  public static class unDispatch_result implements org.apache.thrift.TBase<unDispatch_result, unDispatch_result._Fields>, java.io.Serializable, Cloneable, Comparable<unDispatch_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unDispatch_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSSINESS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("bussinessException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unDispatch_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unDispatch_resultTupleSchemeFactory());
    }

    public com.ikamobile.pa.thrift.common.OperateResponse success; // required
    public com.ikamobile.pa.thrift.common.TBusinessException bussinessException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSSINESS_EXCEPTION((short)1, "bussinessException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSSINESS_EXCEPTION
            return BUSSINESS_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ikamobile.pa.thrift.common.OperateResponse.class)));
      tmpMap.put(_Fields.BUSSINESS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("bussinessException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unDispatch_result.class, metaDataMap);
    }

    public unDispatch_result() {
    }

    public unDispatch_result(
      com.ikamobile.pa.thrift.common.OperateResponse success,
      com.ikamobile.pa.thrift.common.TBusinessException bussinessException)
    {
      this();
      this.success = success;
      this.bussinessException = bussinessException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unDispatch_result(unDispatch_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ikamobile.pa.thrift.common.OperateResponse(other.success);
      }
      if (other.isSetBussinessException()) {
        this.bussinessException = new com.ikamobile.pa.thrift.common.TBusinessException(other.bussinessException);
      }
    }

    public unDispatch_result deepCopy() {
      return new unDispatch_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.bussinessException = null;
    }

    public com.ikamobile.pa.thrift.common.OperateResponse getSuccess() {
      return this.success;
    }

    public unDispatch_result setSuccess(com.ikamobile.pa.thrift.common.OperateResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ikamobile.pa.thrift.common.TBusinessException getBussinessException() {
      return this.bussinessException;
    }

    public unDispatch_result setBussinessException(com.ikamobile.pa.thrift.common.TBusinessException bussinessException) {
      this.bussinessException = bussinessException;
      return this;
    }

    public void unsetBussinessException() {
      this.bussinessException = null;
    }

    /** Returns true if field bussinessException is set (has been assigned a value) and false otherwise */
    public boolean isSetBussinessException() {
      return this.bussinessException != null;
    }

    public void setBussinessExceptionIsSet(boolean value) {
      if (!value) {
        this.bussinessException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ikamobile.pa.thrift.common.OperateResponse)value);
        }
        break;

      case BUSSINESS_EXCEPTION:
        if (value == null) {
          unsetBussinessException();
        } else {
          setBussinessException((com.ikamobile.pa.thrift.common.TBusinessException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSSINESS_EXCEPTION:
        return getBussinessException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSSINESS_EXCEPTION:
        return isSetBussinessException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unDispatch_result)
        return this.equals((unDispatch_result)that);
      return false;
    }

    public boolean equals(unDispatch_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_bussinessException = true && this.isSetBussinessException();
      boolean that_present_bussinessException = true && that.isSetBussinessException();
      if (this_present_bussinessException || that_present_bussinessException) {
        if (!(this_present_bussinessException && that_present_bussinessException))
          return false;
        if (!this.bussinessException.equals(that.bussinessException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_bussinessException = true && (isSetBussinessException());
      list.add(present_bussinessException);
      if (present_bussinessException)
        list.add(bussinessException);

      return list.hashCode();
    }

    @Override
    public int compareTo(unDispatch_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBussinessException()).compareTo(other.isSetBussinessException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBussinessException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bussinessException, other.bussinessException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unDispatch_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bussinessException:");
      if (this.bussinessException == null) {
        sb.append("null");
      } else {
        sb.append(this.bussinessException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unDispatch_resultStandardSchemeFactory implements SchemeFactory {
      public unDispatch_resultStandardScheme getScheme() {
        return new unDispatch_resultStandardScheme();
      }
    }

    private static class unDispatch_resultStandardScheme extends StandardScheme<unDispatch_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unDispatch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ikamobile.pa.thrift.common.OperateResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSSINESS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bussinessException = new com.ikamobile.pa.thrift.common.TBusinessException();
                struct.bussinessException.read(iprot);
                struct.setBussinessExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unDispatch_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bussinessException != null) {
          oprot.writeFieldBegin(BUSSINESS_EXCEPTION_FIELD_DESC);
          struct.bussinessException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unDispatch_resultTupleSchemeFactory implements SchemeFactory {
      public unDispatch_resultTupleScheme getScheme() {
        return new unDispatch_resultTupleScheme();
      }
    }

    private static class unDispatch_resultTupleScheme extends TupleScheme<unDispatch_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unDispatch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBussinessException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBussinessException()) {
          struct.bussinessException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unDispatch_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ikamobile.pa.thrift.common.OperateResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bussinessException = new com.ikamobile.pa.thrift.common.TBusinessException();
          struct.bussinessException.read(iprot);
          struct.setBussinessExceptionIsSet(true);
        }
      }
    }

  }

  public static class lockOrder_args implements org.apache.thrift.TBase<lockOrder_args, lockOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<lockOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("lockOrder_args");

    private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField OPERATOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("operatorId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new lockOrder_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new lockOrder_argsTupleSchemeFactory());
    }

    public String orderId; // required
    public String operatorId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORDER_ID((short)1, "orderId"),
      OPERATOR_ID((short)2, "operatorId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORDER_ID
            return ORDER_ID;
          case 2: // OPERATOR_ID
            return OPERATOR_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OPERATOR_ID, new org.apache.thrift.meta_data.FieldMetaData("operatorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(lockOrder_args.class, metaDataMap);
    }

    public lockOrder_args() {
    }

    public lockOrder_args(
      String orderId,
      String operatorId)
    {
      this();
      this.orderId = orderId;
      this.operatorId = operatorId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lockOrder_args(lockOrder_args other) {
      if (other.isSetOrderId()) {
        this.orderId = other.orderId;
      }
      if (other.isSetOperatorId()) {
        this.operatorId = other.operatorId;
      }
    }

    public lockOrder_args deepCopy() {
      return new lockOrder_args(this);
    }

    @Override
    public void clear() {
      this.orderId = null;
      this.operatorId = null;
    }

    public String getOrderId() {
      return this.orderId;
    }

    public lockOrder_args setOrderId(String orderId) {
      this.orderId = orderId;
      return this;
    }

    public void unsetOrderId() {
      this.orderId = null;
    }

    /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderId() {
      return this.orderId != null;
    }

    public void setOrderIdIsSet(boolean value) {
      if (!value) {
        this.orderId = null;
      }
    }

    public String getOperatorId() {
      return this.operatorId;
    }

    public lockOrder_args setOperatorId(String operatorId) {
      this.operatorId = operatorId;
      return this;
    }

    public void unsetOperatorId() {
      this.operatorId = null;
    }

    /** Returns true if field operatorId is set (has been assigned a value) and false otherwise */
    public boolean isSetOperatorId() {
      return this.operatorId != null;
    }

    public void setOperatorIdIsSet(boolean value) {
      if (!value) {
        this.operatorId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORDER_ID:
        if (value == null) {
          unsetOrderId();
        } else {
          setOrderId((String)value);
        }
        break;

      case OPERATOR_ID:
        if (value == null) {
          unsetOperatorId();
        } else {
          setOperatorId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORDER_ID:
        return getOrderId();

      case OPERATOR_ID:
        return getOperatorId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORDER_ID:
        return isSetOrderId();
      case OPERATOR_ID:
        return isSetOperatorId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lockOrder_args)
        return this.equals((lockOrder_args)that);
      return false;
    }

    public boolean equals(lockOrder_args that) {
      if (that == null)
        return false;

      boolean this_present_orderId = true && this.isSetOrderId();
      boolean that_present_orderId = true && that.isSetOrderId();
      if (this_present_orderId || that_present_orderId) {
        if (!(this_present_orderId && that_present_orderId))
          return false;
        if (!this.orderId.equals(that.orderId))
          return false;
      }

      boolean this_present_operatorId = true && this.isSetOperatorId();
      boolean that_present_operatorId = true && that.isSetOperatorId();
      if (this_present_operatorId || that_present_operatorId) {
        if (!(this_present_operatorId && that_present_operatorId))
          return false;
        if (!this.operatorId.equals(that.operatorId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_orderId = true && (isSetOrderId());
      list.add(present_orderId);
      if (present_orderId)
        list.add(orderId);

      boolean present_operatorId = true && (isSetOperatorId());
      list.add(present_operatorId);
      if (present_operatorId)
        list.add(operatorId);

      return list.hashCode();
    }

    @Override
    public int compareTo(lockOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOperatorId()).compareTo(other.isSetOperatorId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOperatorId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operatorId, other.operatorId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lockOrder_args(");
      boolean first = true;

      sb.append("orderId:");
      if (this.orderId == null) {
        sb.append("null");
      } else {
        sb.append(this.orderId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("operatorId:");
      if (this.operatorId == null) {
        sb.append("null");
      } else {
        sb.append(this.operatorId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class lockOrder_argsStandardSchemeFactory implements SchemeFactory {
      public lockOrder_argsStandardScheme getScheme() {
        return new lockOrder_argsStandardScheme();
      }
    }

    private static class lockOrder_argsStandardScheme extends StandardScheme<lockOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, lockOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORDER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orderId = iprot.readString();
                struct.setOrderIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OPERATOR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.operatorId = iprot.readString();
                struct.setOperatorIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, lockOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.orderId != null) {
          oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
          oprot.writeString(struct.orderId);
          oprot.writeFieldEnd();
        }
        if (struct.operatorId != null) {
          oprot.writeFieldBegin(OPERATOR_ID_FIELD_DESC);
          oprot.writeString(struct.operatorId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class lockOrder_argsTupleSchemeFactory implements SchemeFactory {
      public lockOrder_argsTupleScheme getScheme() {
        return new lockOrder_argsTupleScheme();
      }
    }

    private static class lockOrder_argsTupleScheme extends TupleScheme<lockOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, lockOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrderId()) {
          optionals.set(0);
        }
        if (struct.isSetOperatorId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOrderId()) {
          oprot.writeString(struct.orderId);
        }
        if (struct.isSetOperatorId()) {
          oprot.writeString(struct.operatorId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, lockOrder_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.orderId = iprot.readString();
          struct.setOrderIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.operatorId = iprot.readString();
          struct.setOperatorIdIsSet(true);
        }
      }
    }

  }

  public static class lockOrder_result implements org.apache.thrift.TBase<lockOrder_result, lockOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<lockOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("lockOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSSINESS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("bussinessException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new lockOrder_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new lockOrder_resultTupleSchemeFactory());
    }

    public com.ikamobile.pa.thrift.common.OperateResponse success; // required
    public com.ikamobile.pa.thrift.common.TBusinessException bussinessException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSSINESS_EXCEPTION((short)1, "bussinessException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSSINESS_EXCEPTION
            return BUSSINESS_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ikamobile.pa.thrift.common.OperateResponse.class)));
      tmpMap.put(_Fields.BUSSINESS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("bussinessException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(lockOrder_result.class, metaDataMap);
    }

    public lockOrder_result() {
    }

    public lockOrder_result(
      com.ikamobile.pa.thrift.common.OperateResponse success,
      com.ikamobile.pa.thrift.common.TBusinessException bussinessException)
    {
      this();
      this.success = success;
      this.bussinessException = bussinessException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lockOrder_result(lockOrder_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ikamobile.pa.thrift.common.OperateResponse(other.success);
      }
      if (other.isSetBussinessException()) {
        this.bussinessException = new com.ikamobile.pa.thrift.common.TBusinessException(other.bussinessException);
      }
    }

    public lockOrder_result deepCopy() {
      return new lockOrder_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.bussinessException = null;
    }

    public com.ikamobile.pa.thrift.common.OperateResponse getSuccess() {
      return this.success;
    }

    public lockOrder_result setSuccess(com.ikamobile.pa.thrift.common.OperateResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ikamobile.pa.thrift.common.TBusinessException getBussinessException() {
      return this.bussinessException;
    }

    public lockOrder_result setBussinessException(com.ikamobile.pa.thrift.common.TBusinessException bussinessException) {
      this.bussinessException = bussinessException;
      return this;
    }

    public void unsetBussinessException() {
      this.bussinessException = null;
    }

    /** Returns true if field bussinessException is set (has been assigned a value) and false otherwise */
    public boolean isSetBussinessException() {
      return this.bussinessException != null;
    }

    public void setBussinessExceptionIsSet(boolean value) {
      if (!value) {
        this.bussinessException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ikamobile.pa.thrift.common.OperateResponse)value);
        }
        break;

      case BUSSINESS_EXCEPTION:
        if (value == null) {
          unsetBussinessException();
        } else {
          setBussinessException((com.ikamobile.pa.thrift.common.TBusinessException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSSINESS_EXCEPTION:
        return getBussinessException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSSINESS_EXCEPTION:
        return isSetBussinessException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lockOrder_result)
        return this.equals((lockOrder_result)that);
      return false;
    }

    public boolean equals(lockOrder_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_bussinessException = true && this.isSetBussinessException();
      boolean that_present_bussinessException = true && that.isSetBussinessException();
      if (this_present_bussinessException || that_present_bussinessException) {
        if (!(this_present_bussinessException && that_present_bussinessException))
          return false;
        if (!this.bussinessException.equals(that.bussinessException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_bussinessException = true && (isSetBussinessException());
      list.add(present_bussinessException);
      if (present_bussinessException)
        list.add(bussinessException);

      return list.hashCode();
    }

    @Override
    public int compareTo(lockOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBussinessException()).compareTo(other.isSetBussinessException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBussinessException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bussinessException, other.bussinessException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("lockOrder_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bussinessException:");
      if (this.bussinessException == null) {
        sb.append("null");
      } else {
        sb.append(this.bussinessException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class lockOrder_resultStandardSchemeFactory implements SchemeFactory {
      public lockOrder_resultStandardScheme getScheme() {
        return new lockOrder_resultStandardScheme();
      }
    }

    private static class lockOrder_resultStandardScheme extends StandardScheme<lockOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, lockOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ikamobile.pa.thrift.common.OperateResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSSINESS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bussinessException = new com.ikamobile.pa.thrift.common.TBusinessException();
                struct.bussinessException.read(iprot);
                struct.setBussinessExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, lockOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bussinessException != null) {
          oprot.writeFieldBegin(BUSSINESS_EXCEPTION_FIELD_DESC);
          struct.bussinessException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class lockOrder_resultTupleSchemeFactory implements SchemeFactory {
      public lockOrder_resultTupleScheme getScheme() {
        return new lockOrder_resultTupleScheme();
      }
    }

    private static class lockOrder_resultTupleScheme extends TupleScheme<lockOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, lockOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBussinessException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBussinessException()) {
          struct.bussinessException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, lockOrder_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ikamobile.pa.thrift.common.OperateResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bussinessException = new com.ikamobile.pa.thrift.common.TBusinessException();
          struct.bussinessException.read(iprot);
          struct.setBussinessExceptionIsSet(true);
        }
      }
    }

  }

  public static class unlock_args implements org.apache.thrift.TBase<unlock_args, unlock_args._Fields>, java.io.Serializable, Cloneable, Comparable<unlock_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unlock_args");

    private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField OPERATOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("operatorId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unlock_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unlock_argsTupleSchemeFactory());
    }

    public String orderId; // required
    public String operatorId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORDER_ID((short)1, "orderId"),
      OPERATOR_ID((short)2, "operatorId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORDER_ID
            return ORDER_ID;
          case 2: // OPERATOR_ID
            return OPERATOR_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OPERATOR_ID, new org.apache.thrift.meta_data.FieldMetaData("operatorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unlock_args.class, metaDataMap);
    }

    public unlock_args() {
    }

    public unlock_args(
      String orderId,
      String operatorId)
    {
      this();
      this.orderId = orderId;
      this.operatorId = operatorId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unlock_args(unlock_args other) {
      if (other.isSetOrderId()) {
        this.orderId = other.orderId;
      }
      if (other.isSetOperatorId()) {
        this.operatorId = other.operatorId;
      }
    }

    public unlock_args deepCopy() {
      return new unlock_args(this);
    }

    @Override
    public void clear() {
      this.orderId = null;
      this.operatorId = null;
    }

    public String getOrderId() {
      return this.orderId;
    }

    public unlock_args setOrderId(String orderId) {
      this.orderId = orderId;
      return this;
    }

    public void unsetOrderId() {
      this.orderId = null;
    }

    /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderId() {
      return this.orderId != null;
    }

    public void setOrderIdIsSet(boolean value) {
      if (!value) {
        this.orderId = null;
      }
    }

    public String getOperatorId() {
      return this.operatorId;
    }

    public unlock_args setOperatorId(String operatorId) {
      this.operatorId = operatorId;
      return this;
    }

    public void unsetOperatorId() {
      this.operatorId = null;
    }

    /** Returns true if field operatorId is set (has been assigned a value) and false otherwise */
    public boolean isSetOperatorId() {
      return this.operatorId != null;
    }

    public void setOperatorIdIsSet(boolean value) {
      if (!value) {
        this.operatorId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ORDER_ID:
        if (value == null) {
          unsetOrderId();
        } else {
          setOrderId((String)value);
        }
        break;

      case OPERATOR_ID:
        if (value == null) {
          unsetOperatorId();
        } else {
          setOperatorId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ORDER_ID:
        return getOrderId();

      case OPERATOR_ID:
        return getOperatorId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ORDER_ID:
        return isSetOrderId();
      case OPERATOR_ID:
        return isSetOperatorId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unlock_args)
        return this.equals((unlock_args)that);
      return false;
    }

    public boolean equals(unlock_args that) {
      if (that == null)
        return false;

      boolean this_present_orderId = true && this.isSetOrderId();
      boolean that_present_orderId = true && that.isSetOrderId();
      if (this_present_orderId || that_present_orderId) {
        if (!(this_present_orderId && that_present_orderId))
          return false;
        if (!this.orderId.equals(that.orderId))
          return false;
      }

      boolean this_present_operatorId = true && this.isSetOperatorId();
      boolean that_present_operatorId = true && that.isSetOperatorId();
      if (this_present_operatorId || that_present_operatorId) {
        if (!(this_present_operatorId && that_present_operatorId))
          return false;
        if (!this.operatorId.equals(that.operatorId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_orderId = true && (isSetOrderId());
      list.add(present_orderId);
      if (present_orderId)
        list.add(orderId);

      boolean present_operatorId = true && (isSetOperatorId());
      list.add(present_operatorId);
      if (present_operatorId)
        list.add(operatorId);

      return list.hashCode();
    }

    @Override
    public int compareTo(unlock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOperatorId()).compareTo(other.isSetOperatorId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOperatorId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operatorId, other.operatorId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unlock_args(");
      boolean first = true;

      sb.append("orderId:");
      if (this.orderId == null) {
        sb.append("null");
      } else {
        sb.append(this.orderId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("operatorId:");
      if (this.operatorId == null) {
        sb.append("null");
      } else {
        sb.append(this.operatorId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unlock_argsStandardSchemeFactory implements SchemeFactory {
      public unlock_argsStandardScheme getScheme() {
        return new unlock_argsStandardScheme();
      }
    }

    private static class unlock_argsStandardScheme extends StandardScheme<unlock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unlock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORDER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orderId = iprot.readString();
                struct.setOrderIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OPERATOR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.operatorId = iprot.readString();
                struct.setOperatorIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unlock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.orderId != null) {
          oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
          oprot.writeString(struct.orderId);
          oprot.writeFieldEnd();
        }
        if (struct.operatorId != null) {
          oprot.writeFieldBegin(OPERATOR_ID_FIELD_DESC);
          oprot.writeString(struct.operatorId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unlock_argsTupleSchemeFactory implements SchemeFactory {
      public unlock_argsTupleScheme getScheme() {
        return new unlock_argsTupleScheme();
      }
    }

    private static class unlock_argsTupleScheme extends TupleScheme<unlock_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unlock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOrderId()) {
          optionals.set(0);
        }
        if (struct.isSetOperatorId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOrderId()) {
          oprot.writeString(struct.orderId);
        }
        if (struct.isSetOperatorId()) {
          oprot.writeString(struct.operatorId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unlock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.orderId = iprot.readString();
          struct.setOrderIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.operatorId = iprot.readString();
          struct.setOperatorIdIsSet(true);
        }
      }
    }

  }

  public static class unlock_result implements org.apache.thrift.TBase<unlock_result, unlock_result._Fields>, java.io.Serializable, Cloneable, Comparable<unlock_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unlock_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSSINESS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("bussinessException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unlock_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unlock_resultTupleSchemeFactory());
    }

    public com.ikamobile.pa.thrift.common.OperateResponse success; // required
    public com.ikamobile.pa.thrift.common.TBusinessException bussinessException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSSINESS_EXCEPTION((short)1, "bussinessException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSSINESS_EXCEPTION
            return BUSSINESS_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ikamobile.pa.thrift.common.OperateResponse.class)));
      tmpMap.put(_Fields.BUSSINESS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("bussinessException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unlock_result.class, metaDataMap);
    }

    public unlock_result() {
    }

    public unlock_result(
      com.ikamobile.pa.thrift.common.OperateResponse success,
      com.ikamobile.pa.thrift.common.TBusinessException bussinessException)
    {
      this();
      this.success = success;
      this.bussinessException = bussinessException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unlock_result(unlock_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ikamobile.pa.thrift.common.OperateResponse(other.success);
      }
      if (other.isSetBussinessException()) {
        this.bussinessException = new com.ikamobile.pa.thrift.common.TBusinessException(other.bussinessException);
      }
    }

    public unlock_result deepCopy() {
      return new unlock_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.bussinessException = null;
    }

    public com.ikamobile.pa.thrift.common.OperateResponse getSuccess() {
      return this.success;
    }

    public unlock_result setSuccess(com.ikamobile.pa.thrift.common.OperateResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ikamobile.pa.thrift.common.TBusinessException getBussinessException() {
      return this.bussinessException;
    }

    public unlock_result setBussinessException(com.ikamobile.pa.thrift.common.TBusinessException bussinessException) {
      this.bussinessException = bussinessException;
      return this;
    }

    public void unsetBussinessException() {
      this.bussinessException = null;
    }

    /** Returns true if field bussinessException is set (has been assigned a value) and false otherwise */
    public boolean isSetBussinessException() {
      return this.bussinessException != null;
    }

    public void setBussinessExceptionIsSet(boolean value) {
      if (!value) {
        this.bussinessException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ikamobile.pa.thrift.common.OperateResponse)value);
        }
        break;

      case BUSSINESS_EXCEPTION:
        if (value == null) {
          unsetBussinessException();
        } else {
          setBussinessException((com.ikamobile.pa.thrift.common.TBusinessException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSSINESS_EXCEPTION:
        return getBussinessException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSSINESS_EXCEPTION:
        return isSetBussinessException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unlock_result)
        return this.equals((unlock_result)that);
      return false;
    }

    public boolean equals(unlock_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_bussinessException = true && this.isSetBussinessException();
      boolean that_present_bussinessException = true && that.isSetBussinessException();
      if (this_present_bussinessException || that_present_bussinessException) {
        if (!(this_present_bussinessException && that_present_bussinessException))
          return false;
        if (!this.bussinessException.equals(that.bussinessException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_bussinessException = true && (isSetBussinessException());
      list.add(present_bussinessException);
      if (present_bussinessException)
        list.add(bussinessException);

      return list.hashCode();
    }

    @Override
    public int compareTo(unlock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBussinessException()).compareTo(other.isSetBussinessException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBussinessException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bussinessException, other.bussinessException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unlock_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bussinessException:");
      if (this.bussinessException == null) {
        sb.append("null");
      } else {
        sb.append(this.bussinessException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unlock_resultStandardSchemeFactory implements SchemeFactory {
      public unlock_resultStandardScheme getScheme() {
        return new unlock_resultStandardScheme();
      }
    }

    private static class unlock_resultStandardScheme extends StandardScheme<unlock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unlock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ikamobile.pa.thrift.common.OperateResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSSINESS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bussinessException = new com.ikamobile.pa.thrift.common.TBusinessException();
                struct.bussinessException.read(iprot);
                struct.setBussinessExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unlock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bussinessException != null) {
          oprot.writeFieldBegin(BUSSINESS_EXCEPTION_FIELD_DESC);
          struct.bussinessException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unlock_resultTupleSchemeFactory implements SchemeFactory {
      public unlock_resultTupleScheme getScheme() {
        return new unlock_resultTupleScheme();
      }
    }

    private static class unlock_resultTupleScheme extends TupleScheme<unlock_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unlock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBussinessException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBussinessException()) {
          struct.bussinessException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unlock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ikamobile.pa.thrift.common.OperateResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bussinessException = new com.ikamobile.pa.thrift.common.TBusinessException();
          struct.bussinessException.read(iprot);
          struct.setBussinessExceptionIsSet(true);
        }
      }
    }

  }

}
