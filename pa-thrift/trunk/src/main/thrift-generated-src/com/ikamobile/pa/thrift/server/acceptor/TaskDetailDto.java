/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ikamobile.pa.thrift.server.acceptor;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-8-16")
public class TaskDetailDto implements org.apache.thrift.TBase<TaskDetailDto, TaskDetailDto._Fields>, java.io.Serializable, Cloneable, Comparable<TaskDetailDto> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TaskDetailDto");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField DRIVER_FIELD_DESC = new org.apache.thrift.protocol.TField("driver", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField VEHICLE_FIELD_DESC = new org.apache.thrift.protocol.TField("vehicle", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField PSG_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("psgCount", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField EARLIST_FLIGHT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("earlistFlightTime", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField FINISH_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("finishTime", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField ORDERS_FIELD_DESC = new org.apache.thrift.protocol.TField("orders", org.apache.thrift.protocol.TType.LIST, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TaskDetailDtoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TaskDetailDtoTupleSchemeFactory());
  }

  /**
   * 任务ID
   */
  public String id; // required
  /**
   * 任务编号
   */
  public String code; // required
  /**
   * 状态 1-未开始 2-进行中 3-已结束
   */
  public int status; // required
  /**
   * 司机信息
   */
  public com.ikamobile.pa.thrift.server.acceptor.DriverDto driver; // required
  /**
   * 分配的车辆信息
   */
  public com.ikamobile.pa.thrift.server.acceptor.VehicleDto vehicle; // required
  /**
   * 乘客数量
   */
  public int psgCount; // required
  /**
   * 最早起飞时间
   */
  public long earlistFlightTime; // required
  /**
   * 任务开始时间
   */
  public long startTime; // required
  /**
   * 任务完成时间
   */
  public long finishTime; // required
  /**
   * 创建时间
   */
  public long createTime; // required
  /**
   * 更新时间
   */
  public long updateTime; // required
  /**
   * 任务中的订单详情
   */
  public List<com.ikamobile.pa.thrift.server.acceptor.OrderDetailDto> orders; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 任务ID
     */
    ID((short)1, "id"),
    /**
     * 任务编号
     */
    CODE((short)2, "code"),
    /**
     * 状态 1-未开始 2-进行中 3-已结束
     */
    STATUS((short)3, "status"),
    /**
     * 司机信息
     */
    DRIVER((short)4, "driver"),
    /**
     * 分配的车辆信息
     */
    VEHICLE((short)5, "vehicle"),
    /**
     * 乘客数量
     */
    PSG_COUNT((short)6, "psgCount"),
    /**
     * 最早起飞时间
     */
    EARLIST_FLIGHT_TIME((short)7, "earlistFlightTime"),
    /**
     * 任务开始时间
     */
    START_TIME((short)8, "startTime"),
    /**
     * 任务完成时间
     */
    FINISH_TIME((short)9, "finishTime"),
    /**
     * 创建时间
     */
    CREATE_TIME((short)10, "createTime"),
    /**
     * 更新时间
     */
    UPDATE_TIME((short)11, "updateTime"),
    /**
     * 任务中的订单详情
     */
    ORDERS((short)12, "orders");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CODE
          return CODE;
        case 3: // STATUS
          return STATUS;
        case 4: // DRIVER
          return DRIVER;
        case 5: // VEHICLE
          return VEHICLE;
        case 6: // PSG_COUNT
          return PSG_COUNT;
        case 7: // EARLIST_FLIGHT_TIME
          return EARLIST_FLIGHT_TIME;
        case 8: // START_TIME
          return START_TIME;
        case 9: // FINISH_TIME
          return FINISH_TIME;
        case 10: // CREATE_TIME
          return CREATE_TIME;
        case 11: // UPDATE_TIME
          return UPDATE_TIME;
        case 12: // ORDERS
          return ORDERS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STATUS_ISSET_ID = 0;
  private static final int __PSGCOUNT_ISSET_ID = 1;
  private static final int __EARLISTFLIGHTTIME_ISSET_ID = 2;
  private static final int __STARTTIME_ISSET_ID = 3;
  private static final int __FINISHTIME_ISSET_ID = 4;
  private static final int __CREATETIME_ISSET_ID = 5;
  private static final int __UPDATETIME_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DRIVER, new org.apache.thrift.meta_data.FieldMetaData("driver", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ikamobile.pa.thrift.server.acceptor.DriverDto.class)));
    tmpMap.put(_Fields.VEHICLE, new org.apache.thrift.meta_data.FieldMetaData("vehicle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ikamobile.pa.thrift.server.acceptor.VehicleDto.class)));
    tmpMap.put(_Fields.PSG_COUNT, new org.apache.thrift.meta_data.FieldMetaData("psgCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EARLIST_FLIGHT_TIME, new org.apache.thrift.meta_data.FieldMetaData("earlistFlightTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FINISH_TIME, new org.apache.thrift.meta_data.FieldMetaData("finishTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ORDERS, new org.apache.thrift.meta_data.FieldMetaData("orders", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ikamobile.pa.thrift.server.acceptor.OrderDetailDto.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TaskDetailDto.class, metaDataMap);
  }

  public TaskDetailDto() {
  }

  public TaskDetailDto(
    String id,
    String code,
    int status,
    com.ikamobile.pa.thrift.server.acceptor.DriverDto driver,
    com.ikamobile.pa.thrift.server.acceptor.VehicleDto vehicle,
    int psgCount,
    long earlistFlightTime,
    long startTime,
    long finishTime,
    long createTime,
    long updateTime,
    List<com.ikamobile.pa.thrift.server.acceptor.OrderDetailDto> orders)
  {
    this();
    this.id = id;
    this.code = code;
    this.status = status;
    setStatusIsSet(true);
    this.driver = driver;
    this.vehicle = vehicle;
    this.psgCount = psgCount;
    setPsgCountIsSet(true);
    this.earlistFlightTime = earlistFlightTime;
    setEarlistFlightTimeIsSet(true);
    this.startTime = startTime;
    setStartTimeIsSet(true);
    this.finishTime = finishTime;
    setFinishTimeIsSet(true);
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    this.orders = orders;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TaskDetailDto(TaskDetailDto other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetCode()) {
      this.code = other.code;
    }
    this.status = other.status;
    if (other.isSetDriver()) {
      this.driver = new com.ikamobile.pa.thrift.server.acceptor.DriverDto(other.driver);
    }
    if (other.isSetVehicle()) {
      this.vehicle = new com.ikamobile.pa.thrift.server.acceptor.VehicleDto(other.vehicle);
    }
    this.psgCount = other.psgCount;
    this.earlistFlightTime = other.earlistFlightTime;
    this.startTime = other.startTime;
    this.finishTime = other.finishTime;
    this.createTime = other.createTime;
    this.updateTime = other.updateTime;
    if (other.isSetOrders()) {
      List<com.ikamobile.pa.thrift.server.acceptor.OrderDetailDto> __this__orders = new ArrayList<com.ikamobile.pa.thrift.server.acceptor.OrderDetailDto>(other.orders.size());
      for (com.ikamobile.pa.thrift.server.acceptor.OrderDetailDto other_element : other.orders) {
        __this__orders.add(new com.ikamobile.pa.thrift.server.acceptor.OrderDetailDto(other_element));
      }
      this.orders = __this__orders;
    }
  }

  public TaskDetailDto deepCopy() {
    return new TaskDetailDto(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.code = null;
    setStatusIsSet(false);
    this.status = 0;
    this.driver = null;
    this.vehicle = null;
    setPsgCountIsSet(false);
    this.psgCount = 0;
    setEarlistFlightTimeIsSet(false);
    this.earlistFlightTime = 0;
    setStartTimeIsSet(false);
    this.startTime = 0;
    setFinishTimeIsSet(false);
    this.finishTime = 0;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setUpdateTimeIsSet(false);
    this.updateTime = 0;
    this.orders = null;
  }

  /**
   * 任务ID
   */
  public String getId() {
    return this.id;
  }

  /**
   * 任务ID
   */
  public TaskDetailDto setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * 任务编号
   */
  public String getCode() {
    return this.code;
  }

  /**
   * 任务编号
   */
  public TaskDetailDto setCode(String code) {
    this.code = code;
    return this;
  }

  public void unsetCode() {
    this.code = null;
  }

  /** Returns true if field code is set (has been assigned a value) and false otherwise */
  public boolean isSetCode() {
    return this.code != null;
  }

  public void setCodeIsSet(boolean value) {
    if (!value) {
      this.code = null;
    }
  }

  /**
   * 状态 1-未开始 2-进行中 3-已结束
   */
  public int getStatus() {
    return this.status;
  }

  /**
   * 状态 1-未开始 2-进行中 3-已结束
   */
  public TaskDetailDto setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  /**
   * 司机信息
   */
  public com.ikamobile.pa.thrift.server.acceptor.DriverDto getDriver() {
    return this.driver;
  }

  /**
   * 司机信息
   */
  public TaskDetailDto setDriver(com.ikamobile.pa.thrift.server.acceptor.DriverDto driver) {
    this.driver = driver;
    return this;
  }

  public void unsetDriver() {
    this.driver = null;
  }

  /** Returns true if field driver is set (has been assigned a value) and false otherwise */
  public boolean isSetDriver() {
    return this.driver != null;
  }

  public void setDriverIsSet(boolean value) {
    if (!value) {
      this.driver = null;
    }
  }

  /**
   * 分配的车辆信息
   */
  public com.ikamobile.pa.thrift.server.acceptor.VehicleDto getVehicle() {
    return this.vehicle;
  }

  /**
   * 分配的车辆信息
   */
  public TaskDetailDto setVehicle(com.ikamobile.pa.thrift.server.acceptor.VehicleDto vehicle) {
    this.vehicle = vehicle;
    return this;
  }

  public void unsetVehicle() {
    this.vehicle = null;
  }

  /** Returns true if field vehicle is set (has been assigned a value) and false otherwise */
  public boolean isSetVehicle() {
    return this.vehicle != null;
  }

  public void setVehicleIsSet(boolean value) {
    if (!value) {
      this.vehicle = null;
    }
  }

  /**
   * 乘客数量
   */
  public int getPsgCount() {
    return this.psgCount;
  }

  /**
   * 乘客数量
   */
  public TaskDetailDto setPsgCount(int psgCount) {
    this.psgCount = psgCount;
    setPsgCountIsSet(true);
    return this;
  }

  public void unsetPsgCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PSGCOUNT_ISSET_ID);
  }

  /** Returns true if field psgCount is set (has been assigned a value) and false otherwise */
  public boolean isSetPsgCount() {
    return EncodingUtils.testBit(__isset_bitfield, __PSGCOUNT_ISSET_ID);
  }

  public void setPsgCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PSGCOUNT_ISSET_ID, value);
  }

  /**
   * 最早起飞时间
   */
  public long getEarlistFlightTime() {
    return this.earlistFlightTime;
  }

  /**
   * 最早起飞时间
   */
  public TaskDetailDto setEarlistFlightTime(long earlistFlightTime) {
    this.earlistFlightTime = earlistFlightTime;
    setEarlistFlightTimeIsSet(true);
    return this;
  }

  public void unsetEarlistFlightTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EARLISTFLIGHTTIME_ISSET_ID);
  }

  /** Returns true if field earlistFlightTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEarlistFlightTime() {
    return EncodingUtils.testBit(__isset_bitfield, __EARLISTFLIGHTTIME_ISSET_ID);
  }

  public void setEarlistFlightTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EARLISTFLIGHTTIME_ISSET_ID, value);
  }

  /**
   * 任务开始时间
   */
  public long getStartTime() {
    return this.startTime;
  }

  /**
   * 任务开始时间
   */
  public TaskDetailDto setStartTime(long startTime) {
    this.startTime = startTime;
    setStartTimeIsSet(true);
    return this;
  }

  public void unsetStartTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  public void setStartTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
  }

  /**
   * 任务完成时间
   */
  public long getFinishTime() {
    return this.finishTime;
  }

  /**
   * 任务完成时间
   */
  public TaskDetailDto setFinishTime(long finishTime) {
    this.finishTime = finishTime;
    setFinishTimeIsSet(true);
    return this;
  }

  public void unsetFinishTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FINISHTIME_ISSET_ID);
  }

  /** Returns true if field finishTime is set (has been assigned a value) and false otherwise */
  public boolean isSetFinishTime() {
    return EncodingUtils.testBit(__isset_bitfield, __FINISHTIME_ISSET_ID);
  }

  public void setFinishTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FINISHTIME_ISSET_ID, value);
  }

  /**
   * 创建时间
   */
  public long getCreateTime() {
    return this.createTime;
  }

  /**
   * 创建时间
   */
  public TaskDetailDto setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  /**
   * 更新时间
   */
  public long getUpdateTime() {
    return this.updateTime;
  }

  /**
   * 更新时间
   */
  public TaskDetailDto setUpdateTime(long updateTime) {
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    return this;
  }

  public void unsetUpdateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  public void setUpdateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATETIME_ISSET_ID, value);
  }

  public int getOrdersSize() {
    return (this.orders == null) ? 0 : this.orders.size();
  }

  public java.util.Iterator<com.ikamobile.pa.thrift.server.acceptor.OrderDetailDto> getOrdersIterator() {
    return (this.orders == null) ? null : this.orders.iterator();
  }

  public void addToOrders(com.ikamobile.pa.thrift.server.acceptor.OrderDetailDto elem) {
    if (this.orders == null) {
      this.orders = new ArrayList<com.ikamobile.pa.thrift.server.acceptor.OrderDetailDto>();
    }
    this.orders.add(elem);
  }

  /**
   * 任务中的订单详情
   */
  public List<com.ikamobile.pa.thrift.server.acceptor.OrderDetailDto> getOrders() {
    return this.orders;
  }

  /**
   * 任务中的订单详情
   */
  public TaskDetailDto setOrders(List<com.ikamobile.pa.thrift.server.acceptor.OrderDetailDto> orders) {
    this.orders = orders;
    return this;
  }

  public void unsetOrders() {
    this.orders = null;
  }

  /** Returns true if field orders is set (has been assigned a value) and false otherwise */
  public boolean isSetOrders() {
    return this.orders != null;
  }

  public void setOrdersIsSet(boolean value) {
    if (!value) {
      this.orders = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case CODE:
      if (value == null) {
        unsetCode();
      } else {
        setCode((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case DRIVER:
      if (value == null) {
        unsetDriver();
      } else {
        setDriver((com.ikamobile.pa.thrift.server.acceptor.DriverDto)value);
      }
      break;

    case VEHICLE:
      if (value == null) {
        unsetVehicle();
      } else {
        setVehicle((com.ikamobile.pa.thrift.server.acceptor.VehicleDto)value);
      }
      break;

    case PSG_COUNT:
      if (value == null) {
        unsetPsgCount();
      } else {
        setPsgCount((Integer)value);
      }
      break;

    case EARLIST_FLIGHT_TIME:
      if (value == null) {
        unsetEarlistFlightTime();
      } else {
        setEarlistFlightTime((Long)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((Long)value);
      }
      break;

    case FINISH_TIME:
      if (value == null) {
        unsetFinishTime();
      } else {
        setFinishTime((Long)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((Long)value);
      }
      break;

    case ORDERS:
      if (value == null) {
        unsetOrders();
      } else {
        setOrders((List<com.ikamobile.pa.thrift.server.acceptor.OrderDetailDto>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case CODE:
      return getCode();

    case STATUS:
      return Integer.valueOf(getStatus());

    case DRIVER:
      return getDriver();

    case VEHICLE:
      return getVehicle();

    case PSG_COUNT:
      return Integer.valueOf(getPsgCount());

    case EARLIST_FLIGHT_TIME:
      return Long.valueOf(getEarlistFlightTime());

    case START_TIME:
      return Long.valueOf(getStartTime());

    case FINISH_TIME:
      return Long.valueOf(getFinishTime());

    case CREATE_TIME:
      return Long.valueOf(getCreateTime());

    case UPDATE_TIME:
      return Long.valueOf(getUpdateTime());

    case ORDERS:
      return getOrders();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CODE:
      return isSetCode();
    case STATUS:
      return isSetStatus();
    case DRIVER:
      return isSetDriver();
    case VEHICLE:
      return isSetVehicle();
    case PSG_COUNT:
      return isSetPsgCount();
    case EARLIST_FLIGHT_TIME:
      return isSetEarlistFlightTime();
    case START_TIME:
      return isSetStartTime();
    case FINISH_TIME:
      return isSetFinishTime();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case ORDERS:
      return isSetOrders();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TaskDetailDto)
      return this.equals((TaskDetailDto)that);
    return false;
  }

  public boolean equals(TaskDetailDto that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_code = true && this.isSetCode();
    boolean that_present_code = true && that.isSetCode();
    if (this_present_code || that_present_code) {
      if (!(this_present_code && that_present_code))
        return false;
      if (!this.code.equals(that.code))
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_driver = true && this.isSetDriver();
    boolean that_present_driver = true && that.isSetDriver();
    if (this_present_driver || that_present_driver) {
      if (!(this_present_driver && that_present_driver))
        return false;
      if (!this.driver.equals(that.driver))
        return false;
    }

    boolean this_present_vehicle = true && this.isSetVehicle();
    boolean that_present_vehicle = true && that.isSetVehicle();
    if (this_present_vehicle || that_present_vehicle) {
      if (!(this_present_vehicle && that_present_vehicle))
        return false;
      if (!this.vehicle.equals(that.vehicle))
        return false;
    }

    boolean this_present_psgCount = true;
    boolean that_present_psgCount = true;
    if (this_present_psgCount || that_present_psgCount) {
      if (!(this_present_psgCount && that_present_psgCount))
        return false;
      if (this.psgCount != that.psgCount)
        return false;
    }

    boolean this_present_earlistFlightTime = true;
    boolean that_present_earlistFlightTime = true;
    if (this_present_earlistFlightTime || that_present_earlistFlightTime) {
      if (!(this_present_earlistFlightTime && that_present_earlistFlightTime))
        return false;
      if (this.earlistFlightTime != that.earlistFlightTime)
        return false;
    }

    boolean this_present_startTime = true;
    boolean that_present_startTime = true;
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (this.startTime != that.startTime)
        return false;
    }

    boolean this_present_finishTime = true;
    boolean that_present_finishTime = true;
    if (this_present_finishTime || that_present_finishTime) {
      if (!(this_present_finishTime && that_present_finishTime))
        return false;
      if (this.finishTime != that.finishTime)
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_updateTime = true;
    boolean that_present_updateTime = true;
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (this.updateTime != that.updateTime)
        return false;
    }

    boolean this_present_orders = true && this.isSetOrders();
    boolean that_present_orders = true && that.isSetOrders();
    if (this_present_orders || that_present_orders) {
      if (!(this_present_orders && that_present_orders))
        return false;
      if (!this.orders.equals(that.orders))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_code = true && (isSetCode());
    list.add(present_code);
    if (present_code)
      list.add(code);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_driver = true && (isSetDriver());
    list.add(present_driver);
    if (present_driver)
      list.add(driver);

    boolean present_vehicle = true && (isSetVehicle());
    list.add(present_vehicle);
    if (present_vehicle)
      list.add(vehicle);

    boolean present_psgCount = true;
    list.add(present_psgCount);
    if (present_psgCount)
      list.add(psgCount);

    boolean present_earlistFlightTime = true;
    list.add(present_earlistFlightTime);
    if (present_earlistFlightTime)
      list.add(earlistFlightTime);

    boolean present_startTime = true;
    list.add(present_startTime);
    if (present_startTime)
      list.add(startTime);

    boolean present_finishTime = true;
    list.add(present_finishTime);
    if (present_finishTime)
      list.add(finishTime);

    boolean present_createTime = true;
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    boolean present_updateTime = true;
    list.add(present_updateTime);
    if (present_updateTime)
      list.add(updateTime);

    boolean present_orders = true && (isSetOrders());
    list.add(present_orders);
    if (present_orders)
      list.add(orders);

    return list.hashCode();
  }

  @Override
  public int compareTo(TaskDetailDto other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDriver()).compareTo(other.isSetDriver());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDriver()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.driver, other.driver);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVehicle()).compareTo(other.isSetVehicle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVehicle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vehicle, other.vehicle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPsgCount()).compareTo(other.isSetPsgCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPsgCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.psgCount, other.psgCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEarlistFlightTime()).compareTo(other.isSetEarlistFlightTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEarlistFlightTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.earlistFlightTime, other.earlistFlightTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFinishTime()).compareTo(other.isSetFinishTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinishTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finishTime, other.finishTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTime()).compareTo(other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrders()).compareTo(other.isSetOrders());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrders()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orders, other.orders);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TaskDetailDto(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("code:");
    if (this.code == null) {
      sb.append("null");
    } else {
      sb.append(this.code);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("driver:");
    if (this.driver == null) {
      sb.append("null");
    } else {
      sb.append(this.driver);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("vehicle:");
    if (this.vehicle == null) {
      sb.append("null");
    } else {
      sb.append(this.vehicle);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("psgCount:");
    sb.append(this.psgCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("earlistFlightTime:");
    sb.append(this.earlistFlightTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    sb.append(this.startTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("finishTime:");
    sb.append(this.finishTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTime:");
    sb.append(this.updateTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orders:");
    if (this.orders == null) {
      sb.append("null");
    } else {
      sb.append(this.orders);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (driver != null) {
      driver.validate();
    }
    if (vehicle != null) {
      vehicle.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TaskDetailDtoStandardSchemeFactory implements SchemeFactory {
    public TaskDetailDtoStandardScheme getScheme() {
      return new TaskDetailDtoStandardScheme();
    }
  }

  private static class TaskDetailDtoStandardScheme extends StandardScheme<TaskDetailDto> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TaskDetailDto struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.code = iprot.readString();
              struct.setCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DRIVER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.driver = new com.ikamobile.pa.thrift.server.acceptor.DriverDto();
              struct.driver.read(iprot);
              struct.setDriverIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // VEHICLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.vehicle = new com.ikamobile.pa.thrift.server.acceptor.VehicleDto();
              struct.vehicle.read(iprot);
              struct.setVehicleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PSG_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.psgCount = iprot.readI32();
              struct.setPsgCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EARLIST_FLIGHT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.earlistFlightTime = iprot.readI64();
              struct.setEarlistFlightTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startTime = iprot.readI64();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FINISH_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.finishTime = iprot.readI64();
              struct.setFinishTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updateTime = iprot.readI64();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ORDERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.orders = new ArrayList<com.ikamobile.pa.thrift.server.acceptor.OrderDetailDto>(_list0.size);
                com.ikamobile.pa.thrift.server.acceptor.OrderDetailDto _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new com.ikamobile.pa.thrift.server.acceptor.OrderDetailDto();
                  _elem1.read(iprot);
                  struct.orders.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setOrdersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TaskDetailDto struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.code != null) {
        oprot.writeFieldBegin(CODE_FIELD_DESC);
        oprot.writeString(struct.code);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.driver != null) {
        oprot.writeFieldBegin(DRIVER_FIELD_DESC);
        struct.driver.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.vehicle != null) {
        oprot.writeFieldBegin(VEHICLE_FIELD_DESC);
        struct.vehicle.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PSG_COUNT_FIELD_DESC);
      oprot.writeI32(struct.psgCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EARLIST_FLIGHT_TIME_FIELD_DESC);
      oprot.writeI64(struct.earlistFlightTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_TIME_FIELD_DESC);
      oprot.writeI64(struct.startTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FINISH_TIME_FIELD_DESC);
      oprot.writeI64(struct.finishTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.updateTime);
      oprot.writeFieldEnd();
      if (struct.orders != null) {
        oprot.writeFieldBegin(ORDERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.orders.size()));
          for (com.ikamobile.pa.thrift.server.acceptor.OrderDetailDto _iter3 : struct.orders)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TaskDetailDtoTupleSchemeFactory implements SchemeFactory {
    public TaskDetailDtoTupleScheme getScheme() {
      return new TaskDetailDtoTupleScheme();
    }
  }

  private static class TaskDetailDtoTupleScheme extends TupleScheme<TaskDetailDto> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TaskDetailDto struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetCode()) {
        optionals.set(1);
      }
      if (struct.isSetStatus()) {
        optionals.set(2);
      }
      if (struct.isSetDriver()) {
        optionals.set(3);
      }
      if (struct.isSetVehicle()) {
        optionals.set(4);
      }
      if (struct.isSetPsgCount()) {
        optionals.set(5);
      }
      if (struct.isSetEarlistFlightTime()) {
        optionals.set(6);
      }
      if (struct.isSetStartTime()) {
        optionals.set(7);
      }
      if (struct.isSetFinishTime()) {
        optionals.set(8);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(9);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(10);
      }
      if (struct.isSetOrders()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetCode()) {
        oprot.writeString(struct.code);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetDriver()) {
        struct.driver.write(oprot);
      }
      if (struct.isSetVehicle()) {
        struct.vehicle.write(oprot);
      }
      if (struct.isSetPsgCount()) {
        oprot.writeI32(struct.psgCount);
      }
      if (struct.isSetEarlistFlightTime()) {
        oprot.writeI64(struct.earlistFlightTime);
      }
      if (struct.isSetStartTime()) {
        oprot.writeI64(struct.startTime);
      }
      if (struct.isSetFinishTime()) {
        oprot.writeI64(struct.finishTime);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeI64(struct.updateTime);
      }
      if (struct.isSetOrders()) {
        {
          oprot.writeI32(struct.orders.size());
          for (com.ikamobile.pa.thrift.server.acceptor.OrderDetailDto _iter4 : struct.orders)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TaskDetailDto struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.code = iprot.readString();
        struct.setCodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(3)) {
        struct.driver = new com.ikamobile.pa.thrift.server.acceptor.DriverDto();
        struct.driver.read(iprot);
        struct.setDriverIsSet(true);
      }
      if (incoming.get(4)) {
        struct.vehicle = new com.ikamobile.pa.thrift.server.acceptor.VehicleDto();
        struct.vehicle.read(iprot);
        struct.setVehicleIsSet(true);
      }
      if (incoming.get(5)) {
        struct.psgCount = iprot.readI32();
        struct.setPsgCountIsSet(true);
      }
      if (incoming.get(6)) {
        struct.earlistFlightTime = iprot.readI64();
        struct.setEarlistFlightTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.startTime = iprot.readI64();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.finishTime = iprot.readI64();
        struct.setFinishTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.updateTime = iprot.readI64();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.orders = new ArrayList<com.ikamobile.pa.thrift.server.acceptor.OrderDetailDto>(_list5.size);
          com.ikamobile.pa.thrift.server.acceptor.OrderDetailDto _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new com.ikamobile.pa.thrift.server.acceptor.OrderDetailDto();
            _elem6.read(iprot);
            struct.orders.add(_elem6);
          }
        }
        struct.setOrdersIsSet(true);
      }
    }
  }

}

