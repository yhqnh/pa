/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ikamobile.pa.thrift.server.acceptor;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-8-31")
public class VehicleThriftService {

  public interface Iface {

    /**
     * 获取待派车辆
     * 
     * 
     * @param expectBoardTime
     */
    public List<VehicleDto> findWaitSendList(long expectBoardTime) throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException;

    /**
     * 获取所有车辆
     * 
     * 
     * @param pagerDto
     */
    public VehiclePagerDto getAllList(com.ikamobile.pa.thrift.common.PagerDto pagerDto) throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException;

    /**
     * 根据过滤条件获取车辆
     * 
     * 
     * @param pagerDto
     * @param filterDto
     */
    public VehiclePagerDto getFilterList(com.ikamobile.pa.thrift.common.PagerDto pagerDto, FilterDto filterDto) throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException;

    /**
     * 更新车辆
     * 
     * 
     * @param vehicleUpdateParam
     */
    public com.ikamobile.pa.thrift.common.OperateResponse update(VehicleUpdateParam vehicleUpdateParam) throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void findWaitSendList(long expectBoardTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAllList(com.ikamobile.pa.thrift.common.PagerDto pagerDto, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFilterList(com.ikamobile.pa.thrift.common.PagerDto pagerDto, FilterDto filterDto, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void update(VehicleUpdateParam vehicleUpdateParam, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<VehicleDto> findWaitSendList(long expectBoardTime) throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException
    {
      send_findWaitSendList(expectBoardTime);
      return recv_findWaitSendList();
    }

    public void send_findWaitSendList(long expectBoardTime) throws org.apache.thrift.TException
    {
      findWaitSendList_args args = new findWaitSendList_args();
      args.setExpectBoardTime(expectBoardTime);
      sendBase("findWaitSendList", args);
    }

    public List<VehicleDto> recv_findWaitSendList() throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException
    {
      findWaitSendList_result result = new findWaitSendList_result();
      receiveBase(result, "findWaitSendList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.bussinessException != null) {
        throw result.bussinessException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findWaitSendList failed: unknown result");
    }

    public VehiclePagerDto getAllList(com.ikamobile.pa.thrift.common.PagerDto pagerDto) throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException
    {
      send_getAllList(pagerDto);
      return recv_getAllList();
    }

    public void send_getAllList(com.ikamobile.pa.thrift.common.PagerDto pagerDto) throws org.apache.thrift.TException
    {
      getAllList_args args = new getAllList_args();
      args.setPagerDto(pagerDto);
      sendBase("getAllList", args);
    }

    public VehiclePagerDto recv_getAllList() throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException
    {
      getAllList_result result = new getAllList_result();
      receiveBase(result, "getAllList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.bussinessException != null) {
        throw result.bussinessException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllList failed: unknown result");
    }

    public VehiclePagerDto getFilterList(com.ikamobile.pa.thrift.common.PagerDto pagerDto, FilterDto filterDto) throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException
    {
      send_getFilterList(pagerDto, filterDto);
      return recv_getFilterList();
    }

    public void send_getFilterList(com.ikamobile.pa.thrift.common.PagerDto pagerDto, FilterDto filterDto) throws org.apache.thrift.TException
    {
      getFilterList_args args = new getFilterList_args();
      args.setPagerDto(pagerDto);
      args.setFilterDto(filterDto);
      sendBase("getFilterList", args);
    }

    public VehiclePagerDto recv_getFilterList() throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException
    {
      getFilterList_result result = new getFilterList_result();
      receiveBase(result, "getFilterList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.bussinessException != null) {
        throw result.bussinessException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFilterList failed: unknown result");
    }

    public com.ikamobile.pa.thrift.common.OperateResponse update(VehicleUpdateParam vehicleUpdateParam) throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException
    {
      send_update(vehicleUpdateParam);
      return recv_update();
    }

    public void send_update(VehicleUpdateParam vehicleUpdateParam) throws org.apache.thrift.TException
    {
      update_args args = new update_args();
      args.setVehicleUpdateParam(vehicleUpdateParam);
      sendBase("update", args);
    }

    public com.ikamobile.pa.thrift.common.OperateResponse recv_update() throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException
    {
      update_result result = new update_result();
      receiveBase(result, "update");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.bussinessException != null) {
        throw result.bussinessException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "update failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void findWaitSendList(long expectBoardTime, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findWaitSendList_call method_call = new findWaitSendList_call(expectBoardTime, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findWaitSendList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long expectBoardTime;
      public findWaitSendList_call(long expectBoardTime, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.expectBoardTime = expectBoardTime;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findWaitSendList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findWaitSendList_args args = new findWaitSendList_args();
        args.setExpectBoardTime(expectBoardTime);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<VehicleDto> getResult() throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findWaitSendList();
      }
    }

    public void getAllList(com.ikamobile.pa.thrift.common.PagerDto pagerDto, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllList_call method_call = new getAllList_call(pagerDto, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ikamobile.pa.thrift.common.PagerDto pagerDto;
      public getAllList_call(com.ikamobile.pa.thrift.common.PagerDto pagerDto, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pagerDto = pagerDto;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllList_args args = new getAllList_args();
        args.setPagerDto(pagerDto);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public VehiclePagerDto getResult() throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllList();
      }
    }

    public void getFilterList(com.ikamobile.pa.thrift.common.PagerDto pagerDto, FilterDto filterDto, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFilterList_call method_call = new getFilterList_call(pagerDto, filterDto, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFilterList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ikamobile.pa.thrift.common.PagerDto pagerDto;
      private FilterDto filterDto;
      public getFilterList_call(com.ikamobile.pa.thrift.common.PagerDto pagerDto, FilterDto filterDto, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pagerDto = pagerDto;
        this.filterDto = filterDto;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFilterList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFilterList_args args = new getFilterList_args();
        args.setPagerDto(pagerDto);
        args.setFilterDto(filterDto);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public VehiclePagerDto getResult() throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFilterList();
      }
    }

    public void update(VehicleUpdateParam vehicleUpdateParam, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      update_call method_call = new update_call(vehicleUpdateParam, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class update_call extends org.apache.thrift.async.TAsyncMethodCall {
      private VehicleUpdateParam vehicleUpdateParam;
      public update_call(VehicleUpdateParam vehicleUpdateParam, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vehicleUpdateParam = vehicleUpdateParam;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("update", org.apache.thrift.protocol.TMessageType.CALL, 0));
        update_args args = new update_args();
        args.setVehicleUpdateParam(vehicleUpdateParam);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ikamobile.pa.thrift.common.OperateResponse getResult() throws com.ikamobile.pa.thrift.common.TBusinessException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_update();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("findWaitSendList", new findWaitSendList());
      processMap.put("getAllList", new getAllList());
      processMap.put("getFilterList", new getFilterList());
      processMap.put("update", new update());
      return processMap;
    }

    public static class findWaitSendList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findWaitSendList_args> {
      public findWaitSendList() {
        super("findWaitSendList");
      }

      public findWaitSendList_args getEmptyArgsInstance() {
        return new findWaitSendList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findWaitSendList_result getResult(I iface, findWaitSendList_args args) throws org.apache.thrift.TException {
        findWaitSendList_result result = new findWaitSendList_result();
        try {
          result.success = iface.findWaitSendList(args.expectBoardTime);
        } catch (com.ikamobile.pa.thrift.common.TBusinessException bussinessException) {
          result.bussinessException = bussinessException;
        }
        return result;
      }
    }

    public static class getAllList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllList_args> {
      public getAllList() {
        super("getAllList");
      }

      public getAllList_args getEmptyArgsInstance() {
        return new getAllList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllList_result getResult(I iface, getAllList_args args) throws org.apache.thrift.TException {
        getAllList_result result = new getAllList_result();
        try {
          result.success = iface.getAllList(args.pagerDto);
        } catch (com.ikamobile.pa.thrift.common.TBusinessException bussinessException) {
          result.bussinessException = bussinessException;
        }
        return result;
      }
    }

    public static class getFilterList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFilterList_args> {
      public getFilterList() {
        super("getFilterList");
      }

      public getFilterList_args getEmptyArgsInstance() {
        return new getFilterList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFilterList_result getResult(I iface, getFilterList_args args) throws org.apache.thrift.TException {
        getFilterList_result result = new getFilterList_result();
        try {
          result.success = iface.getFilterList(args.pagerDto, args.filterDto);
        } catch (com.ikamobile.pa.thrift.common.TBusinessException bussinessException) {
          result.bussinessException = bussinessException;
        }
        return result;
      }
    }

    public static class update<I extends Iface> extends org.apache.thrift.ProcessFunction<I, update_args> {
      public update() {
        super("update");
      }

      public update_args getEmptyArgsInstance() {
        return new update_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public update_result getResult(I iface, update_args args) throws org.apache.thrift.TException {
        update_result result = new update_result();
        try {
          result.success = iface.update(args.vehicleUpdateParam);
        } catch (com.ikamobile.pa.thrift.common.TBusinessException bussinessException) {
          result.bussinessException = bussinessException;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("findWaitSendList", new findWaitSendList());
      processMap.put("getAllList", new getAllList());
      processMap.put("getFilterList", new getFilterList());
      processMap.put("update", new update());
      return processMap;
    }

    public static class findWaitSendList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findWaitSendList_args, List<VehicleDto>> {
      public findWaitSendList() {
        super("findWaitSendList");
      }

      public findWaitSendList_args getEmptyArgsInstance() {
        return new findWaitSendList_args();
      }

      public AsyncMethodCallback<List<VehicleDto>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<VehicleDto>>() { 
          public void onComplete(List<VehicleDto> o) {
            findWaitSendList_result result = new findWaitSendList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findWaitSendList_result result = new findWaitSendList_result();
            if (e instanceof com.ikamobile.pa.thrift.common.TBusinessException) {
                        result.bussinessException = (com.ikamobile.pa.thrift.common.TBusinessException) e;
                        result.setBussinessExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findWaitSendList_args args, org.apache.thrift.async.AsyncMethodCallback<List<VehicleDto>> resultHandler) throws TException {
        iface.findWaitSendList(args.expectBoardTime,resultHandler);
      }
    }

    public static class getAllList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllList_args, VehiclePagerDto> {
      public getAllList() {
        super("getAllList");
      }

      public getAllList_args getEmptyArgsInstance() {
        return new getAllList_args();
      }

      public AsyncMethodCallback<VehiclePagerDto> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<VehiclePagerDto>() { 
          public void onComplete(VehiclePagerDto o) {
            getAllList_result result = new getAllList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllList_result result = new getAllList_result();
            if (e instanceof com.ikamobile.pa.thrift.common.TBusinessException) {
                        result.bussinessException = (com.ikamobile.pa.thrift.common.TBusinessException) e;
                        result.setBussinessExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllList_args args, org.apache.thrift.async.AsyncMethodCallback<VehiclePagerDto> resultHandler) throws TException {
        iface.getAllList(args.pagerDto,resultHandler);
      }
    }

    public static class getFilterList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFilterList_args, VehiclePagerDto> {
      public getFilterList() {
        super("getFilterList");
      }

      public getFilterList_args getEmptyArgsInstance() {
        return new getFilterList_args();
      }

      public AsyncMethodCallback<VehiclePagerDto> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<VehiclePagerDto>() { 
          public void onComplete(VehiclePagerDto o) {
            getFilterList_result result = new getFilterList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFilterList_result result = new getFilterList_result();
            if (e instanceof com.ikamobile.pa.thrift.common.TBusinessException) {
                        result.bussinessException = (com.ikamobile.pa.thrift.common.TBusinessException) e;
                        result.setBussinessExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFilterList_args args, org.apache.thrift.async.AsyncMethodCallback<VehiclePagerDto> resultHandler) throws TException {
        iface.getFilterList(args.pagerDto, args.filterDto,resultHandler);
      }
    }

    public static class update<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, update_args, com.ikamobile.pa.thrift.common.OperateResponse> {
      public update() {
        super("update");
      }

      public update_args getEmptyArgsInstance() {
        return new update_args();
      }

      public AsyncMethodCallback<com.ikamobile.pa.thrift.common.OperateResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<com.ikamobile.pa.thrift.common.OperateResponse>() { 
          public void onComplete(com.ikamobile.pa.thrift.common.OperateResponse o) {
            update_result result = new update_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            update_result result = new update_result();
            if (e instanceof com.ikamobile.pa.thrift.common.TBusinessException) {
                        result.bussinessException = (com.ikamobile.pa.thrift.common.TBusinessException) e;
                        result.setBussinessExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, update_args args, org.apache.thrift.async.AsyncMethodCallback<com.ikamobile.pa.thrift.common.OperateResponse> resultHandler) throws TException {
        iface.update(args.vehicleUpdateParam,resultHandler);
      }
    }

  }

  public static class findWaitSendList_args implements org.apache.thrift.TBase<findWaitSendList_args, findWaitSendList_args._Fields>, java.io.Serializable, Cloneable, Comparable<findWaitSendList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findWaitSendList_args");

    private static final org.apache.thrift.protocol.TField EXPECT_BOARD_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("expectBoardTime", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findWaitSendList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findWaitSendList_argsTupleSchemeFactory());
    }

    public long expectBoardTime; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXPECT_BOARD_TIME((short)1, "expectBoardTime");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXPECT_BOARD_TIME
            return EXPECT_BOARD_TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EXPECTBOARDTIME_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXPECT_BOARD_TIME, new org.apache.thrift.meta_data.FieldMetaData("expectBoardTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findWaitSendList_args.class, metaDataMap);
    }

    public findWaitSendList_args() {
    }

    public findWaitSendList_args(
      long expectBoardTime)
    {
      this();
      this.expectBoardTime = expectBoardTime;
      setExpectBoardTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findWaitSendList_args(findWaitSendList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.expectBoardTime = other.expectBoardTime;
    }

    public findWaitSendList_args deepCopy() {
      return new findWaitSendList_args(this);
    }

    @Override
    public void clear() {
      setExpectBoardTimeIsSet(false);
      this.expectBoardTime = 0;
    }

    public long getExpectBoardTime() {
      return this.expectBoardTime;
    }

    public findWaitSendList_args setExpectBoardTime(long expectBoardTime) {
      this.expectBoardTime = expectBoardTime;
      setExpectBoardTimeIsSet(true);
      return this;
    }

    public void unsetExpectBoardTime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPECTBOARDTIME_ISSET_ID);
    }

    /** Returns true if field expectBoardTime is set (has been assigned a value) and false otherwise */
    public boolean isSetExpectBoardTime() {
      return EncodingUtils.testBit(__isset_bitfield, __EXPECTBOARDTIME_ISSET_ID);
    }

    public void setExpectBoardTimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPECTBOARDTIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXPECT_BOARD_TIME:
        if (value == null) {
          unsetExpectBoardTime();
        } else {
          setExpectBoardTime((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXPECT_BOARD_TIME:
        return Long.valueOf(getExpectBoardTime());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXPECT_BOARD_TIME:
        return isSetExpectBoardTime();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findWaitSendList_args)
        return this.equals((findWaitSendList_args)that);
      return false;
    }

    public boolean equals(findWaitSendList_args that) {
      if (that == null)
        return false;

      boolean this_present_expectBoardTime = true;
      boolean that_present_expectBoardTime = true;
      if (this_present_expectBoardTime || that_present_expectBoardTime) {
        if (!(this_present_expectBoardTime && that_present_expectBoardTime))
          return false;
        if (this.expectBoardTime != that.expectBoardTime)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_expectBoardTime = true;
      list.add(present_expectBoardTime);
      if (present_expectBoardTime)
        list.add(expectBoardTime);

      return list.hashCode();
    }

    @Override
    public int compareTo(findWaitSendList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetExpectBoardTime()).compareTo(other.isSetExpectBoardTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExpectBoardTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expectBoardTime, other.expectBoardTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findWaitSendList_args(");
      boolean first = true;

      sb.append("expectBoardTime:");
      sb.append(this.expectBoardTime);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findWaitSendList_argsStandardSchemeFactory implements SchemeFactory {
      public findWaitSendList_argsStandardScheme getScheme() {
        return new findWaitSendList_argsStandardScheme();
      }
    }

    private static class findWaitSendList_argsStandardScheme extends StandardScheme<findWaitSendList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findWaitSendList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXPECT_BOARD_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.expectBoardTime = iprot.readI64();
                struct.setExpectBoardTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findWaitSendList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(EXPECT_BOARD_TIME_FIELD_DESC);
        oprot.writeI64(struct.expectBoardTime);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findWaitSendList_argsTupleSchemeFactory implements SchemeFactory {
      public findWaitSendList_argsTupleScheme getScheme() {
        return new findWaitSendList_argsTupleScheme();
      }
    }

    private static class findWaitSendList_argsTupleScheme extends TupleScheme<findWaitSendList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findWaitSendList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExpectBoardTime()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExpectBoardTime()) {
          oprot.writeI64(struct.expectBoardTime);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findWaitSendList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.expectBoardTime = iprot.readI64();
          struct.setExpectBoardTimeIsSet(true);
        }
      }
    }

  }

  public static class findWaitSendList_result implements org.apache.thrift.TBase<findWaitSendList_result, findWaitSendList_result._Fields>, java.io.Serializable, Cloneable, Comparable<findWaitSendList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findWaitSendList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField BUSSINESS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("bussinessException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findWaitSendList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findWaitSendList_resultTupleSchemeFactory());
    }

    public List<VehicleDto> success; // required
    public com.ikamobile.pa.thrift.common.TBusinessException bussinessException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSSINESS_EXCEPTION((short)1, "bussinessException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSSINESS_EXCEPTION
            return BUSSINESS_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, VehicleDto.class))));
      tmpMap.put(_Fields.BUSSINESS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("bussinessException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findWaitSendList_result.class, metaDataMap);
    }

    public findWaitSendList_result() {
    }

    public findWaitSendList_result(
      List<VehicleDto> success,
      com.ikamobile.pa.thrift.common.TBusinessException bussinessException)
    {
      this();
      this.success = success;
      this.bussinessException = bussinessException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findWaitSendList_result(findWaitSendList_result other) {
      if (other.isSetSuccess()) {
        List<VehicleDto> __this__success = new ArrayList<VehicleDto>(other.success.size());
        for (VehicleDto other_element : other.success) {
          __this__success.add(new VehicleDto(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetBussinessException()) {
        this.bussinessException = new com.ikamobile.pa.thrift.common.TBusinessException(other.bussinessException);
      }
    }

    public findWaitSendList_result deepCopy() {
      return new findWaitSendList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.bussinessException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<VehicleDto> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(VehicleDto elem) {
      if (this.success == null) {
        this.success = new ArrayList<VehicleDto>();
      }
      this.success.add(elem);
    }

    public List<VehicleDto> getSuccess() {
      return this.success;
    }

    public findWaitSendList_result setSuccess(List<VehicleDto> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ikamobile.pa.thrift.common.TBusinessException getBussinessException() {
      return this.bussinessException;
    }

    public findWaitSendList_result setBussinessException(com.ikamobile.pa.thrift.common.TBusinessException bussinessException) {
      this.bussinessException = bussinessException;
      return this;
    }

    public void unsetBussinessException() {
      this.bussinessException = null;
    }

    /** Returns true if field bussinessException is set (has been assigned a value) and false otherwise */
    public boolean isSetBussinessException() {
      return this.bussinessException != null;
    }

    public void setBussinessExceptionIsSet(boolean value) {
      if (!value) {
        this.bussinessException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<VehicleDto>)value);
        }
        break;

      case BUSSINESS_EXCEPTION:
        if (value == null) {
          unsetBussinessException();
        } else {
          setBussinessException((com.ikamobile.pa.thrift.common.TBusinessException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSSINESS_EXCEPTION:
        return getBussinessException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSSINESS_EXCEPTION:
        return isSetBussinessException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findWaitSendList_result)
        return this.equals((findWaitSendList_result)that);
      return false;
    }

    public boolean equals(findWaitSendList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_bussinessException = true && this.isSetBussinessException();
      boolean that_present_bussinessException = true && that.isSetBussinessException();
      if (this_present_bussinessException || that_present_bussinessException) {
        if (!(this_present_bussinessException && that_present_bussinessException))
          return false;
        if (!this.bussinessException.equals(that.bussinessException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_bussinessException = true && (isSetBussinessException());
      list.add(present_bussinessException);
      if (present_bussinessException)
        list.add(bussinessException);

      return list.hashCode();
    }

    @Override
    public int compareTo(findWaitSendList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBussinessException()).compareTo(other.isSetBussinessException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBussinessException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bussinessException, other.bussinessException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findWaitSendList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bussinessException:");
      if (this.bussinessException == null) {
        sb.append("null");
      } else {
        sb.append(this.bussinessException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findWaitSendList_resultStandardSchemeFactory implements SchemeFactory {
      public findWaitSendList_resultStandardScheme getScheme() {
        return new findWaitSendList_resultStandardScheme();
      }
    }

    private static class findWaitSendList_resultStandardScheme extends StandardScheme<findWaitSendList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findWaitSendList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<VehicleDto>(_list8.size);
                  VehicleDto _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new VehicleDto();
                    _elem9.read(iprot);
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSSINESS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bussinessException = new com.ikamobile.pa.thrift.common.TBusinessException();
                struct.bussinessException.read(iprot);
                struct.setBussinessExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findWaitSendList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (VehicleDto _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.bussinessException != null) {
          oprot.writeFieldBegin(BUSSINESS_EXCEPTION_FIELD_DESC);
          struct.bussinessException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findWaitSendList_resultTupleSchemeFactory implements SchemeFactory {
      public findWaitSendList_resultTupleScheme getScheme() {
        return new findWaitSendList_resultTupleScheme();
      }
    }

    private static class findWaitSendList_resultTupleScheme extends TupleScheme<findWaitSendList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findWaitSendList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBussinessException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (VehicleDto _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
        if (struct.isSetBussinessException()) {
          struct.bussinessException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findWaitSendList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<VehicleDto>(_list13.size);
            VehicleDto _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new VehicleDto();
              _elem14.read(iprot);
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bussinessException = new com.ikamobile.pa.thrift.common.TBusinessException();
          struct.bussinessException.read(iprot);
          struct.setBussinessExceptionIsSet(true);
        }
      }
    }

  }

  public static class getAllList_args implements org.apache.thrift.TBase<getAllList_args, getAllList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllList_args");

    private static final org.apache.thrift.protocol.TField PAGER_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("pagerDto", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllList_argsTupleSchemeFactory());
    }

    public com.ikamobile.pa.thrift.common.PagerDto pagerDto; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGER_DTO((short)1, "pagerDto");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGER_DTO
            return PAGER_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGER_DTO, new org.apache.thrift.meta_data.FieldMetaData("pagerDto", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ikamobile.pa.thrift.common.PagerDto.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllList_args.class, metaDataMap);
    }

    public getAllList_args() {
    }

    public getAllList_args(
      com.ikamobile.pa.thrift.common.PagerDto pagerDto)
    {
      this();
      this.pagerDto = pagerDto;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllList_args(getAllList_args other) {
      if (other.isSetPagerDto()) {
        this.pagerDto = new com.ikamobile.pa.thrift.common.PagerDto(other.pagerDto);
      }
    }

    public getAllList_args deepCopy() {
      return new getAllList_args(this);
    }

    @Override
    public void clear() {
      this.pagerDto = null;
    }

    public com.ikamobile.pa.thrift.common.PagerDto getPagerDto() {
      return this.pagerDto;
    }

    public getAllList_args setPagerDto(com.ikamobile.pa.thrift.common.PagerDto pagerDto) {
      this.pagerDto = pagerDto;
      return this;
    }

    public void unsetPagerDto() {
      this.pagerDto = null;
    }

    /** Returns true if field pagerDto is set (has been assigned a value) and false otherwise */
    public boolean isSetPagerDto() {
      return this.pagerDto != null;
    }

    public void setPagerDtoIsSet(boolean value) {
      if (!value) {
        this.pagerDto = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGER_DTO:
        if (value == null) {
          unsetPagerDto();
        } else {
          setPagerDto((com.ikamobile.pa.thrift.common.PagerDto)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGER_DTO:
        return getPagerDto();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGER_DTO:
        return isSetPagerDto();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllList_args)
        return this.equals((getAllList_args)that);
      return false;
    }

    public boolean equals(getAllList_args that) {
      if (that == null)
        return false;

      boolean this_present_pagerDto = true && this.isSetPagerDto();
      boolean that_present_pagerDto = true && that.isSetPagerDto();
      if (this_present_pagerDto || that_present_pagerDto) {
        if (!(this_present_pagerDto && that_present_pagerDto))
          return false;
        if (!this.pagerDto.equals(that.pagerDto))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pagerDto = true && (isSetPagerDto());
      list.add(present_pagerDto);
      if (present_pagerDto)
        list.add(pagerDto);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPagerDto()).compareTo(other.isSetPagerDto());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPagerDto()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pagerDto, other.pagerDto);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllList_args(");
      boolean first = true;

      sb.append("pagerDto:");
      if (this.pagerDto == null) {
        sb.append("null");
      } else {
        sb.append(this.pagerDto);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pagerDto != null) {
        pagerDto.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllList_argsStandardSchemeFactory implements SchemeFactory {
      public getAllList_argsStandardScheme getScheme() {
        return new getAllList_argsStandardScheme();
      }
    }

    private static class getAllList_argsStandardScheme extends StandardScheme<getAllList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGER_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pagerDto = new com.ikamobile.pa.thrift.common.PagerDto();
                struct.pagerDto.read(iprot);
                struct.setPagerDtoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pagerDto != null) {
          oprot.writeFieldBegin(PAGER_DTO_FIELD_DESC);
          struct.pagerDto.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllList_argsTupleSchemeFactory implements SchemeFactory {
      public getAllList_argsTupleScheme getScheme() {
        return new getAllList_argsTupleScheme();
      }
    }

    private static class getAllList_argsTupleScheme extends TupleScheme<getAllList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPagerDto()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPagerDto()) {
          struct.pagerDto.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pagerDto = new com.ikamobile.pa.thrift.common.PagerDto();
          struct.pagerDto.read(iprot);
          struct.setPagerDtoIsSet(true);
        }
      }
    }

  }

  public static class getAllList_result implements org.apache.thrift.TBase<getAllList_result, getAllList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSSINESS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("bussinessException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllList_resultTupleSchemeFactory());
    }

    public VehiclePagerDto success; // required
    public com.ikamobile.pa.thrift.common.TBusinessException bussinessException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSSINESS_EXCEPTION((short)1, "bussinessException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSSINESS_EXCEPTION
            return BUSSINESS_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, VehiclePagerDto.class)));
      tmpMap.put(_Fields.BUSSINESS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("bussinessException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllList_result.class, metaDataMap);
    }

    public getAllList_result() {
    }

    public getAllList_result(
      VehiclePagerDto success,
      com.ikamobile.pa.thrift.common.TBusinessException bussinessException)
    {
      this();
      this.success = success;
      this.bussinessException = bussinessException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllList_result(getAllList_result other) {
      if (other.isSetSuccess()) {
        this.success = new VehiclePagerDto(other.success);
      }
      if (other.isSetBussinessException()) {
        this.bussinessException = new com.ikamobile.pa.thrift.common.TBusinessException(other.bussinessException);
      }
    }

    public getAllList_result deepCopy() {
      return new getAllList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.bussinessException = null;
    }

    public VehiclePagerDto getSuccess() {
      return this.success;
    }

    public getAllList_result setSuccess(VehiclePagerDto success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ikamobile.pa.thrift.common.TBusinessException getBussinessException() {
      return this.bussinessException;
    }

    public getAllList_result setBussinessException(com.ikamobile.pa.thrift.common.TBusinessException bussinessException) {
      this.bussinessException = bussinessException;
      return this;
    }

    public void unsetBussinessException() {
      this.bussinessException = null;
    }

    /** Returns true if field bussinessException is set (has been assigned a value) and false otherwise */
    public boolean isSetBussinessException() {
      return this.bussinessException != null;
    }

    public void setBussinessExceptionIsSet(boolean value) {
      if (!value) {
        this.bussinessException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((VehiclePagerDto)value);
        }
        break;

      case BUSSINESS_EXCEPTION:
        if (value == null) {
          unsetBussinessException();
        } else {
          setBussinessException((com.ikamobile.pa.thrift.common.TBusinessException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSSINESS_EXCEPTION:
        return getBussinessException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSSINESS_EXCEPTION:
        return isSetBussinessException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllList_result)
        return this.equals((getAllList_result)that);
      return false;
    }

    public boolean equals(getAllList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_bussinessException = true && this.isSetBussinessException();
      boolean that_present_bussinessException = true && that.isSetBussinessException();
      if (this_present_bussinessException || that_present_bussinessException) {
        if (!(this_present_bussinessException && that_present_bussinessException))
          return false;
        if (!this.bussinessException.equals(that.bussinessException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_bussinessException = true && (isSetBussinessException());
      list.add(present_bussinessException);
      if (present_bussinessException)
        list.add(bussinessException);

      return list.hashCode();
    }

    @Override
    public int compareTo(getAllList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBussinessException()).compareTo(other.isSetBussinessException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBussinessException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bussinessException, other.bussinessException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bussinessException:");
      if (this.bussinessException == null) {
        sb.append("null");
      } else {
        sb.append(this.bussinessException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllList_resultStandardSchemeFactory implements SchemeFactory {
      public getAllList_resultStandardScheme getScheme() {
        return new getAllList_resultStandardScheme();
      }
    }

    private static class getAllList_resultStandardScheme extends StandardScheme<getAllList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new VehiclePagerDto();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSSINESS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bussinessException = new com.ikamobile.pa.thrift.common.TBusinessException();
                struct.bussinessException.read(iprot);
                struct.setBussinessExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bussinessException != null) {
          oprot.writeFieldBegin(BUSSINESS_EXCEPTION_FIELD_DESC);
          struct.bussinessException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllList_resultTupleSchemeFactory implements SchemeFactory {
      public getAllList_resultTupleScheme getScheme() {
        return new getAllList_resultTupleScheme();
      }
    }

    private static class getAllList_resultTupleScheme extends TupleScheme<getAllList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBussinessException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBussinessException()) {
          struct.bussinessException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new VehiclePagerDto();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bussinessException = new com.ikamobile.pa.thrift.common.TBusinessException();
          struct.bussinessException.read(iprot);
          struct.setBussinessExceptionIsSet(true);
        }
      }
    }

  }

  public static class getFilterList_args implements org.apache.thrift.TBase<getFilterList_args, getFilterList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFilterList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFilterList_args");

    private static final org.apache.thrift.protocol.TField PAGER_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("pagerDto", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField FILTER_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("filterDto", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFilterList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFilterList_argsTupleSchemeFactory());
    }

    public com.ikamobile.pa.thrift.common.PagerDto pagerDto; // required
    public FilterDto filterDto; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PAGER_DTO((short)1, "pagerDto"),
      FILTER_DTO((short)2, "filterDto");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PAGER_DTO
            return PAGER_DTO;
          case 2: // FILTER_DTO
            return FILTER_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PAGER_DTO, new org.apache.thrift.meta_data.FieldMetaData("pagerDto", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ikamobile.pa.thrift.common.PagerDto.class)));
      tmpMap.put(_Fields.FILTER_DTO, new org.apache.thrift.meta_data.FieldMetaData("filterDto", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FilterDto.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFilterList_args.class, metaDataMap);
    }

    public getFilterList_args() {
    }

    public getFilterList_args(
      com.ikamobile.pa.thrift.common.PagerDto pagerDto,
      FilterDto filterDto)
    {
      this();
      this.pagerDto = pagerDto;
      this.filterDto = filterDto;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFilterList_args(getFilterList_args other) {
      if (other.isSetPagerDto()) {
        this.pagerDto = new com.ikamobile.pa.thrift.common.PagerDto(other.pagerDto);
      }
      if (other.isSetFilterDto()) {
        this.filterDto = new FilterDto(other.filterDto);
      }
    }

    public getFilterList_args deepCopy() {
      return new getFilterList_args(this);
    }

    @Override
    public void clear() {
      this.pagerDto = null;
      this.filterDto = null;
    }

    public com.ikamobile.pa.thrift.common.PagerDto getPagerDto() {
      return this.pagerDto;
    }

    public getFilterList_args setPagerDto(com.ikamobile.pa.thrift.common.PagerDto pagerDto) {
      this.pagerDto = pagerDto;
      return this;
    }

    public void unsetPagerDto() {
      this.pagerDto = null;
    }

    /** Returns true if field pagerDto is set (has been assigned a value) and false otherwise */
    public boolean isSetPagerDto() {
      return this.pagerDto != null;
    }

    public void setPagerDtoIsSet(boolean value) {
      if (!value) {
        this.pagerDto = null;
      }
    }

    public FilterDto getFilterDto() {
      return this.filterDto;
    }

    public getFilterList_args setFilterDto(FilterDto filterDto) {
      this.filterDto = filterDto;
      return this;
    }

    public void unsetFilterDto() {
      this.filterDto = null;
    }

    /** Returns true if field filterDto is set (has been assigned a value) and false otherwise */
    public boolean isSetFilterDto() {
      return this.filterDto != null;
    }

    public void setFilterDtoIsSet(boolean value) {
      if (!value) {
        this.filterDto = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PAGER_DTO:
        if (value == null) {
          unsetPagerDto();
        } else {
          setPagerDto((com.ikamobile.pa.thrift.common.PagerDto)value);
        }
        break;

      case FILTER_DTO:
        if (value == null) {
          unsetFilterDto();
        } else {
          setFilterDto((FilterDto)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PAGER_DTO:
        return getPagerDto();

      case FILTER_DTO:
        return getFilterDto();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PAGER_DTO:
        return isSetPagerDto();
      case FILTER_DTO:
        return isSetFilterDto();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFilterList_args)
        return this.equals((getFilterList_args)that);
      return false;
    }

    public boolean equals(getFilterList_args that) {
      if (that == null)
        return false;

      boolean this_present_pagerDto = true && this.isSetPagerDto();
      boolean that_present_pagerDto = true && that.isSetPagerDto();
      if (this_present_pagerDto || that_present_pagerDto) {
        if (!(this_present_pagerDto && that_present_pagerDto))
          return false;
        if (!this.pagerDto.equals(that.pagerDto))
          return false;
      }

      boolean this_present_filterDto = true && this.isSetFilterDto();
      boolean that_present_filterDto = true && that.isSetFilterDto();
      if (this_present_filterDto || that_present_filterDto) {
        if (!(this_present_filterDto && that_present_filterDto))
          return false;
        if (!this.filterDto.equals(that.filterDto))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_pagerDto = true && (isSetPagerDto());
      list.add(present_pagerDto);
      if (present_pagerDto)
        list.add(pagerDto);

      boolean present_filterDto = true && (isSetFilterDto());
      list.add(present_filterDto);
      if (present_filterDto)
        list.add(filterDto);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFilterList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPagerDto()).compareTo(other.isSetPagerDto());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPagerDto()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pagerDto, other.pagerDto);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFilterDto()).compareTo(other.isSetFilterDto());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilterDto()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filterDto, other.filterDto);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFilterList_args(");
      boolean first = true;

      sb.append("pagerDto:");
      if (this.pagerDto == null) {
        sb.append("null");
      } else {
        sb.append(this.pagerDto);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("filterDto:");
      if (this.filterDto == null) {
        sb.append("null");
      } else {
        sb.append(this.filterDto);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (pagerDto != null) {
        pagerDto.validate();
      }
      if (filterDto != null) {
        filterDto.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFilterList_argsStandardSchemeFactory implements SchemeFactory {
      public getFilterList_argsStandardScheme getScheme() {
        return new getFilterList_argsStandardScheme();
      }
    }

    private static class getFilterList_argsStandardScheme extends StandardScheme<getFilterList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFilterList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PAGER_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pagerDto = new com.ikamobile.pa.thrift.common.PagerDto();
                struct.pagerDto.read(iprot);
                struct.setPagerDtoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILTER_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.filterDto = new FilterDto();
                struct.filterDto.read(iprot);
                struct.setFilterDtoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFilterList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pagerDto != null) {
          oprot.writeFieldBegin(PAGER_DTO_FIELD_DESC);
          struct.pagerDto.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.filterDto != null) {
          oprot.writeFieldBegin(FILTER_DTO_FIELD_DESC);
          struct.filterDto.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFilterList_argsTupleSchemeFactory implements SchemeFactory {
      public getFilterList_argsTupleScheme getScheme() {
        return new getFilterList_argsTupleScheme();
      }
    }

    private static class getFilterList_argsTupleScheme extends TupleScheme<getFilterList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFilterList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPagerDto()) {
          optionals.set(0);
        }
        if (struct.isSetFilterDto()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPagerDto()) {
          struct.pagerDto.write(oprot);
        }
        if (struct.isSetFilterDto()) {
          struct.filterDto.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFilterList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pagerDto = new com.ikamobile.pa.thrift.common.PagerDto();
          struct.pagerDto.read(iprot);
          struct.setPagerDtoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.filterDto = new FilterDto();
          struct.filterDto.read(iprot);
          struct.setFilterDtoIsSet(true);
        }
      }
    }

  }

  public static class getFilterList_result implements org.apache.thrift.TBase<getFilterList_result, getFilterList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFilterList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFilterList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSSINESS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("bussinessException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFilterList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFilterList_resultTupleSchemeFactory());
    }

    public VehiclePagerDto success; // required
    public com.ikamobile.pa.thrift.common.TBusinessException bussinessException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSSINESS_EXCEPTION((short)1, "bussinessException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSSINESS_EXCEPTION
            return BUSSINESS_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, VehiclePagerDto.class)));
      tmpMap.put(_Fields.BUSSINESS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("bussinessException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFilterList_result.class, metaDataMap);
    }

    public getFilterList_result() {
    }

    public getFilterList_result(
      VehiclePagerDto success,
      com.ikamobile.pa.thrift.common.TBusinessException bussinessException)
    {
      this();
      this.success = success;
      this.bussinessException = bussinessException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFilterList_result(getFilterList_result other) {
      if (other.isSetSuccess()) {
        this.success = new VehiclePagerDto(other.success);
      }
      if (other.isSetBussinessException()) {
        this.bussinessException = new com.ikamobile.pa.thrift.common.TBusinessException(other.bussinessException);
      }
    }

    public getFilterList_result deepCopy() {
      return new getFilterList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.bussinessException = null;
    }

    public VehiclePagerDto getSuccess() {
      return this.success;
    }

    public getFilterList_result setSuccess(VehiclePagerDto success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ikamobile.pa.thrift.common.TBusinessException getBussinessException() {
      return this.bussinessException;
    }

    public getFilterList_result setBussinessException(com.ikamobile.pa.thrift.common.TBusinessException bussinessException) {
      this.bussinessException = bussinessException;
      return this;
    }

    public void unsetBussinessException() {
      this.bussinessException = null;
    }

    /** Returns true if field bussinessException is set (has been assigned a value) and false otherwise */
    public boolean isSetBussinessException() {
      return this.bussinessException != null;
    }

    public void setBussinessExceptionIsSet(boolean value) {
      if (!value) {
        this.bussinessException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((VehiclePagerDto)value);
        }
        break;

      case BUSSINESS_EXCEPTION:
        if (value == null) {
          unsetBussinessException();
        } else {
          setBussinessException((com.ikamobile.pa.thrift.common.TBusinessException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSSINESS_EXCEPTION:
        return getBussinessException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSSINESS_EXCEPTION:
        return isSetBussinessException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFilterList_result)
        return this.equals((getFilterList_result)that);
      return false;
    }

    public boolean equals(getFilterList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_bussinessException = true && this.isSetBussinessException();
      boolean that_present_bussinessException = true && that.isSetBussinessException();
      if (this_present_bussinessException || that_present_bussinessException) {
        if (!(this_present_bussinessException && that_present_bussinessException))
          return false;
        if (!this.bussinessException.equals(that.bussinessException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_bussinessException = true && (isSetBussinessException());
      list.add(present_bussinessException);
      if (present_bussinessException)
        list.add(bussinessException);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFilterList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBussinessException()).compareTo(other.isSetBussinessException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBussinessException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bussinessException, other.bussinessException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFilterList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bussinessException:");
      if (this.bussinessException == null) {
        sb.append("null");
      } else {
        sb.append(this.bussinessException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFilterList_resultStandardSchemeFactory implements SchemeFactory {
      public getFilterList_resultStandardScheme getScheme() {
        return new getFilterList_resultStandardScheme();
      }
    }

    private static class getFilterList_resultStandardScheme extends StandardScheme<getFilterList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFilterList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new VehiclePagerDto();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSSINESS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bussinessException = new com.ikamobile.pa.thrift.common.TBusinessException();
                struct.bussinessException.read(iprot);
                struct.setBussinessExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFilterList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bussinessException != null) {
          oprot.writeFieldBegin(BUSSINESS_EXCEPTION_FIELD_DESC);
          struct.bussinessException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFilterList_resultTupleSchemeFactory implements SchemeFactory {
      public getFilterList_resultTupleScheme getScheme() {
        return new getFilterList_resultTupleScheme();
      }
    }

    private static class getFilterList_resultTupleScheme extends TupleScheme<getFilterList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFilterList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBussinessException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBussinessException()) {
          struct.bussinessException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFilterList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new VehiclePagerDto();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bussinessException = new com.ikamobile.pa.thrift.common.TBusinessException();
          struct.bussinessException.read(iprot);
          struct.setBussinessExceptionIsSet(true);
        }
      }
    }

  }

  public static class update_args implements org.apache.thrift.TBase<update_args, update_args._Fields>, java.io.Serializable, Cloneable, Comparable<update_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("update_args");

    private static final org.apache.thrift.protocol.TField VEHICLE_UPDATE_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("vehicleUpdateParam", org.apache.thrift.protocol.TType.STRUCT, (short)-1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new update_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new update_argsTupleSchemeFactory());
    }

    public VehicleUpdateParam vehicleUpdateParam; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VEHICLE_UPDATE_PARAM((short)-1, "vehicleUpdateParam");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case -1: // VEHICLE_UPDATE_PARAM
            return VEHICLE_UPDATE_PARAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VEHICLE_UPDATE_PARAM, new org.apache.thrift.meta_data.FieldMetaData("vehicleUpdateParam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, VehicleUpdateParam.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(update_args.class, metaDataMap);
    }

    public update_args() {
    }

    public update_args(
      VehicleUpdateParam vehicleUpdateParam)
    {
      this();
      this.vehicleUpdateParam = vehicleUpdateParam;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public update_args(update_args other) {
      if (other.isSetVehicleUpdateParam()) {
        this.vehicleUpdateParam = new VehicleUpdateParam(other.vehicleUpdateParam);
      }
    }

    public update_args deepCopy() {
      return new update_args(this);
    }

    @Override
    public void clear() {
      this.vehicleUpdateParam = null;
    }

    public VehicleUpdateParam getVehicleUpdateParam() {
      return this.vehicleUpdateParam;
    }

    public update_args setVehicleUpdateParam(VehicleUpdateParam vehicleUpdateParam) {
      this.vehicleUpdateParam = vehicleUpdateParam;
      return this;
    }

    public void unsetVehicleUpdateParam() {
      this.vehicleUpdateParam = null;
    }

    /** Returns true if field vehicleUpdateParam is set (has been assigned a value) and false otherwise */
    public boolean isSetVehicleUpdateParam() {
      return this.vehicleUpdateParam != null;
    }

    public void setVehicleUpdateParamIsSet(boolean value) {
      if (!value) {
        this.vehicleUpdateParam = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VEHICLE_UPDATE_PARAM:
        if (value == null) {
          unsetVehicleUpdateParam();
        } else {
          setVehicleUpdateParam((VehicleUpdateParam)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VEHICLE_UPDATE_PARAM:
        return getVehicleUpdateParam();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VEHICLE_UPDATE_PARAM:
        return isSetVehicleUpdateParam();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof update_args)
        return this.equals((update_args)that);
      return false;
    }

    public boolean equals(update_args that) {
      if (that == null)
        return false;

      boolean this_present_vehicleUpdateParam = true && this.isSetVehicleUpdateParam();
      boolean that_present_vehicleUpdateParam = true && that.isSetVehicleUpdateParam();
      if (this_present_vehicleUpdateParam || that_present_vehicleUpdateParam) {
        if (!(this_present_vehicleUpdateParam && that_present_vehicleUpdateParam))
          return false;
        if (!this.vehicleUpdateParam.equals(that.vehicleUpdateParam))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_vehicleUpdateParam = true && (isSetVehicleUpdateParam());
      list.add(present_vehicleUpdateParam);
      if (present_vehicleUpdateParam)
        list.add(vehicleUpdateParam);

      return list.hashCode();
    }

    @Override
    public int compareTo(update_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetVehicleUpdateParam()).compareTo(other.isSetVehicleUpdateParam());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVehicleUpdateParam()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vehicleUpdateParam, other.vehicleUpdateParam);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("update_args(");
      boolean first = true;

      sb.append("vehicleUpdateParam:");
      if (this.vehicleUpdateParam == null) {
        sb.append("null");
      } else {
        sb.append(this.vehicleUpdateParam);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (vehicleUpdateParam != null) {
        vehicleUpdateParam.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class update_argsStandardSchemeFactory implements SchemeFactory {
      public update_argsStandardScheme getScheme() {
        return new update_argsStandardScheme();
      }
    }

    private static class update_argsStandardScheme extends StandardScheme<update_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, update_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case -1: // VEHICLE_UPDATE_PARAM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.vehicleUpdateParam = new VehicleUpdateParam();
                struct.vehicleUpdateParam.read(iprot);
                struct.setVehicleUpdateParamIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, update_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.vehicleUpdateParam != null) {
          oprot.writeFieldBegin(VEHICLE_UPDATE_PARAM_FIELD_DESC);
          struct.vehicleUpdateParam.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class update_argsTupleSchemeFactory implements SchemeFactory {
      public update_argsTupleScheme getScheme() {
        return new update_argsTupleScheme();
      }
    }

    private static class update_argsTupleScheme extends TupleScheme<update_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, update_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVehicleUpdateParam()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetVehicleUpdateParam()) {
          struct.vehicleUpdateParam.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, update_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.vehicleUpdateParam = new VehicleUpdateParam();
          struct.vehicleUpdateParam.read(iprot);
          struct.setVehicleUpdateParamIsSet(true);
        }
      }
    }

  }

  public static class update_result implements org.apache.thrift.TBase<update_result, update_result._Fields>, java.io.Serializable, Cloneable, Comparable<update_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("update_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField BUSSINESS_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("bussinessException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new update_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new update_resultTupleSchemeFactory());
    }

    public com.ikamobile.pa.thrift.common.OperateResponse success; // required
    public com.ikamobile.pa.thrift.common.TBusinessException bussinessException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      BUSSINESS_EXCEPTION((short)1, "bussinessException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // BUSSINESS_EXCEPTION
            return BUSSINESS_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ikamobile.pa.thrift.common.OperateResponse.class)));
      tmpMap.put(_Fields.BUSSINESS_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("bussinessException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(update_result.class, metaDataMap);
    }

    public update_result() {
    }

    public update_result(
      com.ikamobile.pa.thrift.common.OperateResponse success,
      com.ikamobile.pa.thrift.common.TBusinessException bussinessException)
    {
      this();
      this.success = success;
      this.bussinessException = bussinessException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public update_result(update_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ikamobile.pa.thrift.common.OperateResponse(other.success);
      }
      if (other.isSetBussinessException()) {
        this.bussinessException = new com.ikamobile.pa.thrift.common.TBusinessException(other.bussinessException);
      }
    }

    public update_result deepCopy() {
      return new update_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.bussinessException = null;
    }

    public com.ikamobile.pa.thrift.common.OperateResponse getSuccess() {
      return this.success;
    }

    public update_result setSuccess(com.ikamobile.pa.thrift.common.OperateResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.ikamobile.pa.thrift.common.TBusinessException getBussinessException() {
      return this.bussinessException;
    }

    public update_result setBussinessException(com.ikamobile.pa.thrift.common.TBusinessException bussinessException) {
      this.bussinessException = bussinessException;
      return this;
    }

    public void unsetBussinessException() {
      this.bussinessException = null;
    }

    /** Returns true if field bussinessException is set (has been assigned a value) and false otherwise */
    public boolean isSetBussinessException() {
      return this.bussinessException != null;
    }

    public void setBussinessExceptionIsSet(boolean value) {
      if (!value) {
        this.bussinessException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ikamobile.pa.thrift.common.OperateResponse)value);
        }
        break;

      case BUSSINESS_EXCEPTION:
        if (value == null) {
          unsetBussinessException();
        } else {
          setBussinessException((com.ikamobile.pa.thrift.common.TBusinessException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case BUSSINESS_EXCEPTION:
        return getBussinessException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case BUSSINESS_EXCEPTION:
        return isSetBussinessException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof update_result)
        return this.equals((update_result)that);
      return false;
    }

    public boolean equals(update_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_bussinessException = true && this.isSetBussinessException();
      boolean that_present_bussinessException = true && that.isSetBussinessException();
      if (this_present_bussinessException || that_present_bussinessException) {
        if (!(this_present_bussinessException && that_present_bussinessException))
          return false;
        if (!this.bussinessException.equals(that.bussinessException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_bussinessException = true && (isSetBussinessException());
      list.add(present_bussinessException);
      if (present_bussinessException)
        list.add(bussinessException);

      return list.hashCode();
    }

    @Override
    public int compareTo(update_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBussinessException()).compareTo(other.isSetBussinessException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBussinessException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bussinessException, other.bussinessException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("update_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bussinessException:");
      if (this.bussinessException == null) {
        sb.append("null");
      } else {
        sb.append(this.bussinessException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class update_resultStandardSchemeFactory implements SchemeFactory {
      public update_resultStandardScheme getScheme() {
        return new update_resultStandardScheme();
      }
    }

    private static class update_resultStandardScheme extends StandardScheme<update_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, update_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ikamobile.pa.thrift.common.OperateResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // BUSSINESS_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bussinessException = new com.ikamobile.pa.thrift.common.TBusinessException();
                struct.bussinessException.read(iprot);
                struct.setBussinessExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, update_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.bussinessException != null) {
          oprot.writeFieldBegin(BUSSINESS_EXCEPTION_FIELD_DESC);
          struct.bussinessException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class update_resultTupleSchemeFactory implements SchemeFactory {
      public update_resultTupleScheme getScheme() {
        return new update_resultTupleScheme();
      }
    }

    private static class update_resultTupleScheme extends TupleScheme<update_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, update_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetBussinessException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetBussinessException()) {
          struct.bussinessException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, update_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.ikamobile.pa.thrift.common.OperateResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.bussinessException = new com.ikamobile.pa.thrift.common.TBusinessException();
          struct.bussinessException.read(iprot);
          struct.setBussinessExceptionIsSet(true);
        }
      }
    }

  }

}
