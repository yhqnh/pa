/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ikamobile.pa.thrift.server.acceptor;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-8-31")
public class PassengerDto implements org.apache.thrift.TBase<PassengerDto, PassengerDto._Fields>, java.io.Serializable, Cloneable, Comparable<PassengerDto> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PassengerDto");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField GENDER_FIELD_DESC = new org.apache.thrift.protocol.TField("gender", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CERTIFICATE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("certificateType", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CERTIFICATE_TYPE_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("certificateTypeDesc", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CERTIFICATE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("certificateNumber", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField BIRTHDAY_FIELD_DESC = new org.apache.thrift.protocol.TField("birthday", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField AGE_FIELD_DESC = new org.apache.thrift.protocol.TField("age", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PassengerDtoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PassengerDtoTupleSchemeFactory());
  }

  public String id; // required
  /**
   * 姓名
   */
  public String name; // required
  /**
   * 性别（0-未知，1-男，2-女） todo 换枚举
   */
  public int gender; // required
  /**
   * 证件类型（NI-身份证）
   */
  public String certificateType; // required
  public String certificateTypeDesc; // required
  /**
   * 证件号码
   */
  public String certificateNumber; // required
  /**
   * 生日
   */
  public String birthday; // required
  /**
   * 订单关联id
   */
  public String orderId; // required
  /**
   * 年龄
   */
  public int age; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    /**
     * 姓名
     */
    NAME((short)2, "name"),
    /**
     * 性别（0-未知，1-男，2-女） todo 换枚举
     */
    GENDER((short)3, "gender"),
    /**
     * 证件类型（NI-身份证）
     */
    CERTIFICATE_TYPE((short)4, "certificateType"),
    CERTIFICATE_TYPE_DESC((short)5, "certificateTypeDesc"),
    /**
     * 证件号码
     */
    CERTIFICATE_NUMBER((short)6, "certificateNumber"),
    /**
     * 生日
     */
    BIRTHDAY((short)7, "birthday"),
    /**
     * 订单关联id
     */
    ORDER_ID((short)8, "orderId"),
    /**
     * 年龄
     */
    AGE((short)9, "age");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // GENDER
          return GENDER;
        case 4: // CERTIFICATE_TYPE
          return CERTIFICATE_TYPE;
        case 5: // CERTIFICATE_TYPE_DESC
          return CERTIFICATE_TYPE_DESC;
        case 6: // CERTIFICATE_NUMBER
          return CERTIFICATE_NUMBER;
        case 7: // BIRTHDAY
          return BIRTHDAY;
        case 8: // ORDER_ID
          return ORDER_ID;
        case 9: // AGE
          return AGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __GENDER_ISSET_ID = 0;
  private static final int __AGE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GENDER, new org.apache.thrift.meta_data.FieldMetaData("gender", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CERTIFICATE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("certificateType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CERTIFICATE_TYPE_DESC, new org.apache.thrift.meta_data.FieldMetaData("certificateTypeDesc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CERTIFICATE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("certificateNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BIRTHDAY, new org.apache.thrift.meta_data.FieldMetaData("birthday", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AGE, new org.apache.thrift.meta_data.FieldMetaData("age", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PassengerDto.class, metaDataMap);
  }

  public PassengerDto() {
  }

  public PassengerDto(
    String id,
    String name,
    int gender,
    String certificateType,
    String certificateTypeDesc,
    String certificateNumber,
    String birthday,
    String orderId,
    int age)
  {
    this();
    this.id = id;
    this.name = name;
    this.gender = gender;
    setGenderIsSet(true);
    this.certificateType = certificateType;
    this.certificateTypeDesc = certificateTypeDesc;
    this.certificateNumber = certificateNumber;
    this.birthday = birthday;
    this.orderId = orderId;
    this.age = age;
    setAgeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PassengerDto(PassengerDto other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.gender = other.gender;
    if (other.isSetCertificateType()) {
      this.certificateType = other.certificateType;
    }
    if (other.isSetCertificateTypeDesc()) {
      this.certificateTypeDesc = other.certificateTypeDesc;
    }
    if (other.isSetCertificateNumber()) {
      this.certificateNumber = other.certificateNumber;
    }
    if (other.isSetBirthday()) {
      this.birthday = other.birthday;
    }
    if (other.isSetOrderId()) {
      this.orderId = other.orderId;
    }
    this.age = other.age;
  }

  public PassengerDto deepCopy() {
    return new PassengerDto(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.name = null;
    setGenderIsSet(false);
    this.gender = 0;
    this.certificateType = null;
    this.certificateTypeDesc = null;
    this.certificateNumber = null;
    this.birthday = null;
    this.orderId = null;
    setAgeIsSet(false);
    this.age = 0;
  }

  public String getId() {
    return this.id;
  }

  public PassengerDto setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * 姓名
   */
  public String getName() {
    return this.name;
  }

  /**
   * 姓名
   */
  public PassengerDto setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  /**
   * 性别（0-未知，1-男，2-女） todo 换枚举
   */
  public int getGender() {
    return this.gender;
  }

  /**
   * 性别（0-未知，1-男，2-女） todo 换枚举
   */
  public PassengerDto setGender(int gender) {
    this.gender = gender;
    setGenderIsSet(true);
    return this;
  }

  public void unsetGender() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GENDER_ISSET_ID);
  }

  /** Returns true if field gender is set (has been assigned a value) and false otherwise */
  public boolean isSetGender() {
    return EncodingUtils.testBit(__isset_bitfield, __GENDER_ISSET_ID);
  }

  public void setGenderIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GENDER_ISSET_ID, value);
  }

  /**
   * 证件类型（NI-身份证）
   */
  public String getCertificateType() {
    return this.certificateType;
  }

  /**
   * 证件类型（NI-身份证）
   */
  public PassengerDto setCertificateType(String certificateType) {
    this.certificateType = certificateType;
    return this;
  }

  public void unsetCertificateType() {
    this.certificateType = null;
  }

  /** Returns true if field certificateType is set (has been assigned a value) and false otherwise */
  public boolean isSetCertificateType() {
    return this.certificateType != null;
  }

  public void setCertificateTypeIsSet(boolean value) {
    if (!value) {
      this.certificateType = null;
    }
  }

  public String getCertificateTypeDesc() {
    return this.certificateTypeDesc;
  }

  public PassengerDto setCertificateTypeDesc(String certificateTypeDesc) {
    this.certificateTypeDesc = certificateTypeDesc;
    return this;
  }

  public void unsetCertificateTypeDesc() {
    this.certificateTypeDesc = null;
  }

  /** Returns true if field certificateTypeDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetCertificateTypeDesc() {
    return this.certificateTypeDesc != null;
  }

  public void setCertificateTypeDescIsSet(boolean value) {
    if (!value) {
      this.certificateTypeDesc = null;
    }
  }

  /**
   * 证件号码
   */
  public String getCertificateNumber() {
    return this.certificateNumber;
  }

  /**
   * 证件号码
   */
  public PassengerDto setCertificateNumber(String certificateNumber) {
    this.certificateNumber = certificateNumber;
    return this;
  }

  public void unsetCertificateNumber() {
    this.certificateNumber = null;
  }

  /** Returns true if field certificateNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetCertificateNumber() {
    return this.certificateNumber != null;
  }

  public void setCertificateNumberIsSet(boolean value) {
    if (!value) {
      this.certificateNumber = null;
    }
  }

  /**
   * 生日
   */
  public String getBirthday() {
    return this.birthday;
  }

  /**
   * 生日
   */
  public PassengerDto setBirthday(String birthday) {
    this.birthday = birthday;
    return this;
  }

  public void unsetBirthday() {
    this.birthday = null;
  }

  /** Returns true if field birthday is set (has been assigned a value) and false otherwise */
  public boolean isSetBirthday() {
    return this.birthday != null;
  }

  public void setBirthdayIsSet(boolean value) {
    if (!value) {
      this.birthday = null;
    }
  }

  /**
   * 订单关联id
   */
  public String getOrderId() {
    return this.orderId;
  }

  /**
   * 订单关联id
   */
  public PassengerDto setOrderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  public void unsetOrderId() {
    this.orderId = null;
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return this.orderId != null;
  }

  public void setOrderIdIsSet(boolean value) {
    if (!value) {
      this.orderId = null;
    }
  }

  /**
   * 年龄
   */
  public int getAge() {
    return this.age;
  }

  /**
   * 年龄
   */
  public PassengerDto setAge(int age) {
    this.age = age;
    setAgeIsSet(true);
    return this;
  }

  public void unsetAge() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AGE_ISSET_ID);
  }

  /** Returns true if field age is set (has been assigned a value) and false otherwise */
  public boolean isSetAge() {
    return EncodingUtils.testBit(__isset_bitfield, __AGE_ISSET_ID);
  }

  public void setAgeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AGE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case GENDER:
      if (value == null) {
        unsetGender();
      } else {
        setGender((Integer)value);
      }
      break;

    case CERTIFICATE_TYPE:
      if (value == null) {
        unsetCertificateType();
      } else {
        setCertificateType((String)value);
      }
      break;

    case CERTIFICATE_TYPE_DESC:
      if (value == null) {
        unsetCertificateTypeDesc();
      } else {
        setCertificateTypeDesc((String)value);
      }
      break;

    case CERTIFICATE_NUMBER:
      if (value == null) {
        unsetCertificateNumber();
      } else {
        setCertificateNumber((String)value);
      }
      break;

    case BIRTHDAY:
      if (value == null) {
        unsetBirthday();
      } else {
        setBirthday((String)value);
      }
      break;

    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((String)value);
      }
      break;

    case AGE:
      if (value == null) {
        unsetAge();
      } else {
        setAge((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case GENDER:
      return Integer.valueOf(getGender());

    case CERTIFICATE_TYPE:
      return getCertificateType();

    case CERTIFICATE_TYPE_DESC:
      return getCertificateTypeDesc();

    case CERTIFICATE_NUMBER:
      return getCertificateNumber();

    case BIRTHDAY:
      return getBirthday();

    case ORDER_ID:
      return getOrderId();

    case AGE:
      return Integer.valueOf(getAge());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case GENDER:
      return isSetGender();
    case CERTIFICATE_TYPE:
      return isSetCertificateType();
    case CERTIFICATE_TYPE_DESC:
      return isSetCertificateTypeDesc();
    case CERTIFICATE_NUMBER:
      return isSetCertificateNumber();
    case BIRTHDAY:
      return isSetBirthday();
    case ORDER_ID:
      return isSetOrderId();
    case AGE:
      return isSetAge();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PassengerDto)
      return this.equals((PassengerDto)that);
    return false;
  }

  public boolean equals(PassengerDto that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_gender = true;
    boolean that_present_gender = true;
    if (this_present_gender || that_present_gender) {
      if (!(this_present_gender && that_present_gender))
        return false;
      if (this.gender != that.gender)
        return false;
    }

    boolean this_present_certificateType = true && this.isSetCertificateType();
    boolean that_present_certificateType = true && that.isSetCertificateType();
    if (this_present_certificateType || that_present_certificateType) {
      if (!(this_present_certificateType && that_present_certificateType))
        return false;
      if (!this.certificateType.equals(that.certificateType))
        return false;
    }

    boolean this_present_certificateTypeDesc = true && this.isSetCertificateTypeDesc();
    boolean that_present_certificateTypeDesc = true && that.isSetCertificateTypeDesc();
    if (this_present_certificateTypeDesc || that_present_certificateTypeDesc) {
      if (!(this_present_certificateTypeDesc && that_present_certificateTypeDesc))
        return false;
      if (!this.certificateTypeDesc.equals(that.certificateTypeDesc))
        return false;
    }

    boolean this_present_certificateNumber = true && this.isSetCertificateNumber();
    boolean that_present_certificateNumber = true && that.isSetCertificateNumber();
    if (this_present_certificateNumber || that_present_certificateNumber) {
      if (!(this_present_certificateNumber && that_present_certificateNumber))
        return false;
      if (!this.certificateNumber.equals(that.certificateNumber))
        return false;
    }

    boolean this_present_birthday = true && this.isSetBirthday();
    boolean that_present_birthday = true && that.isSetBirthday();
    if (this_present_birthday || that_present_birthday) {
      if (!(this_present_birthday && that_present_birthday))
        return false;
      if (!this.birthday.equals(that.birthday))
        return false;
    }

    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (!this.orderId.equals(that.orderId))
        return false;
    }

    boolean this_present_age = true;
    boolean that_present_age = true;
    if (this_present_age || that_present_age) {
      if (!(this_present_age && that_present_age))
        return false;
      if (this.age != that.age)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_gender = true;
    list.add(present_gender);
    if (present_gender)
      list.add(gender);

    boolean present_certificateType = true && (isSetCertificateType());
    list.add(present_certificateType);
    if (present_certificateType)
      list.add(certificateType);

    boolean present_certificateTypeDesc = true && (isSetCertificateTypeDesc());
    list.add(present_certificateTypeDesc);
    if (present_certificateTypeDesc)
      list.add(certificateTypeDesc);

    boolean present_certificateNumber = true && (isSetCertificateNumber());
    list.add(present_certificateNumber);
    if (present_certificateNumber)
      list.add(certificateNumber);

    boolean present_birthday = true && (isSetBirthday());
    list.add(present_birthday);
    if (present_birthday)
      list.add(birthday);

    boolean present_orderId = true && (isSetOrderId());
    list.add(present_orderId);
    if (present_orderId)
      list.add(orderId);

    boolean present_age = true;
    list.add(present_age);
    if (present_age)
      list.add(age);

    return list.hashCode();
  }

  @Override
  public int compareTo(PassengerDto other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGender()).compareTo(other.isSetGender());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGender()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gender, other.gender);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCertificateType()).compareTo(other.isSetCertificateType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCertificateType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.certificateType, other.certificateType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCertificateTypeDesc()).compareTo(other.isSetCertificateTypeDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCertificateTypeDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.certificateTypeDesc, other.certificateTypeDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCertificateNumber()).compareTo(other.isSetCertificateNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCertificateNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.certificateNumber, other.certificateNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBirthday()).compareTo(other.isSetBirthday());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBirthday()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.birthday, other.birthday);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAge()).compareTo(other.isSetAge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.age, other.age);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PassengerDto(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("gender:");
    sb.append(this.gender);
    first = false;
    if (!first) sb.append(", ");
    sb.append("certificateType:");
    if (this.certificateType == null) {
      sb.append("null");
    } else {
      sb.append(this.certificateType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("certificateTypeDesc:");
    if (this.certificateTypeDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.certificateTypeDesc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("certificateNumber:");
    if (this.certificateNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.certificateNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("birthday:");
    if (this.birthday == null) {
      sb.append("null");
    } else {
      sb.append(this.birthday);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderId:");
    if (this.orderId == null) {
      sb.append("null");
    } else {
      sb.append(this.orderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("age:");
    sb.append(this.age);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PassengerDtoStandardSchemeFactory implements SchemeFactory {
    public PassengerDtoStandardScheme getScheme() {
      return new PassengerDtoStandardScheme();
    }
  }

  private static class PassengerDtoStandardScheme extends StandardScheme<PassengerDto> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PassengerDto struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GENDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.gender = iprot.readI32();
              struct.setGenderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CERTIFICATE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.certificateType = iprot.readString();
              struct.setCertificateTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CERTIFICATE_TYPE_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.certificateTypeDesc = iprot.readString();
              struct.setCertificateTypeDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CERTIFICATE_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.certificateNumber = iprot.readString();
              struct.setCertificateNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BIRTHDAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.birthday = iprot.readString();
              struct.setBirthdayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderId = iprot.readString();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // AGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.age = iprot.readI32();
              struct.setAgeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PassengerDto struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(GENDER_FIELD_DESC);
      oprot.writeI32(struct.gender);
      oprot.writeFieldEnd();
      if (struct.certificateType != null) {
        oprot.writeFieldBegin(CERTIFICATE_TYPE_FIELD_DESC);
        oprot.writeString(struct.certificateType);
        oprot.writeFieldEnd();
      }
      if (struct.certificateTypeDesc != null) {
        oprot.writeFieldBegin(CERTIFICATE_TYPE_DESC_FIELD_DESC);
        oprot.writeString(struct.certificateTypeDesc);
        oprot.writeFieldEnd();
      }
      if (struct.certificateNumber != null) {
        oprot.writeFieldBegin(CERTIFICATE_NUMBER_FIELD_DESC);
        oprot.writeString(struct.certificateNumber);
        oprot.writeFieldEnd();
      }
      if (struct.birthday != null) {
        oprot.writeFieldBegin(BIRTHDAY_FIELD_DESC);
        oprot.writeString(struct.birthday);
        oprot.writeFieldEnd();
      }
      if (struct.orderId != null) {
        oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
        oprot.writeString(struct.orderId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AGE_FIELD_DESC);
      oprot.writeI32(struct.age);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PassengerDtoTupleSchemeFactory implements SchemeFactory {
    public PassengerDtoTupleScheme getScheme() {
      return new PassengerDtoTupleScheme();
    }
  }

  private static class PassengerDtoTupleScheme extends TupleScheme<PassengerDto> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PassengerDto struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetGender()) {
        optionals.set(2);
      }
      if (struct.isSetCertificateType()) {
        optionals.set(3);
      }
      if (struct.isSetCertificateTypeDesc()) {
        optionals.set(4);
      }
      if (struct.isSetCertificateNumber()) {
        optionals.set(5);
      }
      if (struct.isSetBirthday()) {
        optionals.set(6);
      }
      if (struct.isSetOrderId()) {
        optionals.set(7);
      }
      if (struct.isSetAge()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetGender()) {
        oprot.writeI32(struct.gender);
      }
      if (struct.isSetCertificateType()) {
        oprot.writeString(struct.certificateType);
      }
      if (struct.isSetCertificateTypeDesc()) {
        oprot.writeString(struct.certificateTypeDesc);
      }
      if (struct.isSetCertificateNumber()) {
        oprot.writeString(struct.certificateNumber);
      }
      if (struct.isSetBirthday()) {
        oprot.writeString(struct.birthday);
      }
      if (struct.isSetOrderId()) {
        oprot.writeString(struct.orderId);
      }
      if (struct.isSetAge()) {
        oprot.writeI32(struct.age);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PassengerDto struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.gender = iprot.readI32();
        struct.setGenderIsSet(true);
      }
      if (incoming.get(3)) {
        struct.certificateType = iprot.readString();
        struct.setCertificateTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.certificateTypeDesc = iprot.readString();
        struct.setCertificateTypeDescIsSet(true);
      }
      if (incoming.get(5)) {
        struct.certificateNumber = iprot.readString();
        struct.setCertificateNumberIsSet(true);
      }
      if (incoming.get(6)) {
        struct.birthday = iprot.readString();
        struct.setBirthdayIsSet(true);
      }
      if (incoming.get(7)) {
        struct.orderId = iprot.readString();
        struct.setOrderIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.age = iprot.readI32();
        struct.setAgeIsSet(true);
      }
    }
  }

}

