/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ikamobile.pa.thrift.server.acceptor;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-8-31")
public class OrderSearchParam implements org.apache.thrift.TBase<OrderSearchParam, OrderSearchParam._Fields>, java.io.Serializable, Cloneable, Comparable<OrderSearchParam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OrderSearchParam");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField BOOKER_MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("bookerMobile", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField FLIGHT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("flightNumber", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField FLIGHT_DEP_TIME_FLOOR_FIELD_DESC = new org.apache.thrift.protocol.TField("flightDepTimeFloor", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField FLIGHT_DEP_TIME_TOP_FIELD_DESC = new org.apache.thrift.protocol.TField("flightDepTimeTop", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField FOR_ONLINE_FIELD_DESC = new org.apache.thrift.protocol.TField("forOnline", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField VOUCHER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("voucherCode", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FLOOR_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimeFloor", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_TOP_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimeTop", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField OPERATOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("operatorId", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField VEHICLE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("vehicleCode", org.apache.thrift.protocol.TType.STRING, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OrderSearchParamStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OrderSearchParamTupleSchemeFactory());
  }

  public String id; // required
  public String code; // required
  public List<String> status; // required
  public String bookerMobile; // required
  public String flightNumber; // required
  public long flightDepTimeFloor; // required
  public long flightDepTimeTop; // required
  public String forOnline; // required
  public String voucherCode; // required
  public long createTimeFloor; // required
  public long createTimeTop; // required
  public String operatorId; // required
  public String vehicleCode; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    CODE((short)2, "code"),
    STATUS((short)3, "status"),
    BOOKER_MOBILE((short)4, "bookerMobile"),
    FLIGHT_NUMBER((short)5, "flightNumber"),
    FLIGHT_DEP_TIME_FLOOR((short)6, "flightDepTimeFloor"),
    FLIGHT_DEP_TIME_TOP((short)7, "flightDepTimeTop"),
    FOR_ONLINE((short)8, "forOnline"),
    VOUCHER_CODE((short)9, "voucherCode"),
    CREATE_TIME_FLOOR((short)10, "createTimeFloor"),
    CREATE_TIME_TOP((short)11, "createTimeTop"),
    OPERATOR_ID((short)12, "operatorId"),
    VEHICLE_CODE((short)13, "vehicleCode");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CODE
          return CODE;
        case 3: // STATUS
          return STATUS;
        case 4: // BOOKER_MOBILE
          return BOOKER_MOBILE;
        case 5: // FLIGHT_NUMBER
          return FLIGHT_NUMBER;
        case 6: // FLIGHT_DEP_TIME_FLOOR
          return FLIGHT_DEP_TIME_FLOOR;
        case 7: // FLIGHT_DEP_TIME_TOP
          return FLIGHT_DEP_TIME_TOP;
        case 8: // FOR_ONLINE
          return FOR_ONLINE;
        case 9: // VOUCHER_CODE
          return VOUCHER_CODE;
        case 10: // CREATE_TIME_FLOOR
          return CREATE_TIME_FLOOR;
        case 11: // CREATE_TIME_TOP
          return CREATE_TIME_TOP;
        case 12: // OPERATOR_ID
          return OPERATOR_ID;
        case 13: // VEHICLE_CODE
          return VEHICLE_CODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FLIGHTDEPTIMEFLOOR_ISSET_ID = 0;
  private static final int __FLIGHTDEPTIMETOP_ISSET_ID = 1;
  private static final int __CREATETIMEFLOOR_ISSET_ID = 2;
  private static final int __CREATETIMETOP_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.BOOKER_MOBILE, new org.apache.thrift.meta_data.FieldMetaData("bookerMobile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FLIGHT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("flightNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FLIGHT_DEP_TIME_FLOOR, new org.apache.thrift.meta_data.FieldMetaData("flightDepTimeFloor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FLIGHT_DEP_TIME_TOP, new org.apache.thrift.meta_data.FieldMetaData("flightDepTimeTop", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FOR_ONLINE, new org.apache.thrift.meta_data.FieldMetaData("forOnline", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VOUCHER_CODE, new org.apache.thrift.meta_data.FieldMetaData("voucherCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME_FLOOR, new org.apache.thrift.meta_data.FieldMetaData("createTimeFloor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_TIME_TOP, new org.apache.thrift.meta_data.FieldMetaData("createTimeTop", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OPERATOR_ID, new org.apache.thrift.meta_data.FieldMetaData("operatorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VEHICLE_CODE, new org.apache.thrift.meta_data.FieldMetaData("vehicleCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OrderSearchParam.class, metaDataMap);
  }

  public OrderSearchParam() {
  }

  public OrderSearchParam(
    String id,
    String code,
    List<String> status,
    String bookerMobile,
    String flightNumber,
    long flightDepTimeFloor,
    long flightDepTimeTop,
    String forOnline,
    String voucherCode,
    long createTimeFloor,
    long createTimeTop,
    String operatorId,
    String vehicleCode)
  {
    this();
    this.id = id;
    this.code = code;
    this.status = status;
    this.bookerMobile = bookerMobile;
    this.flightNumber = flightNumber;
    this.flightDepTimeFloor = flightDepTimeFloor;
    setFlightDepTimeFloorIsSet(true);
    this.flightDepTimeTop = flightDepTimeTop;
    setFlightDepTimeTopIsSet(true);
    this.forOnline = forOnline;
    this.voucherCode = voucherCode;
    this.createTimeFloor = createTimeFloor;
    setCreateTimeFloorIsSet(true);
    this.createTimeTop = createTimeTop;
    setCreateTimeTopIsSet(true);
    this.operatorId = operatorId;
    this.vehicleCode = vehicleCode;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OrderSearchParam(OrderSearchParam other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetCode()) {
      this.code = other.code;
    }
    if (other.isSetStatus()) {
      List<String> __this__status = new ArrayList<String>(other.status);
      this.status = __this__status;
    }
    if (other.isSetBookerMobile()) {
      this.bookerMobile = other.bookerMobile;
    }
    if (other.isSetFlightNumber()) {
      this.flightNumber = other.flightNumber;
    }
    this.flightDepTimeFloor = other.flightDepTimeFloor;
    this.flightDepTimeTop = other.flightDepTimeTop;
    if (other.isSetForOnline()) {
      this.forOnline = other.forOnline;
    }
    if (other.isSetVoucherCode()) {
      this.voucherCode = other.voucherCode;
    }
    this.createTimeFloor = other.createTimeFloor;
    this.createTimeTop = other.createTimeTop;
    if (other.isSetOperatorId()) {
      this.operatorId = other.operatorId;
    }
    if (other.isSetVehicleCode()) {
      this.vehicleCode = other.vehicleCode;
    }
  }

  public OrderSearchParam deepCopy() {
    return new OrderSearchParam(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.code = null;
    this.status = null;
    this.bookerMobile = null;
    this.flightNumber = null;
    setFlightDepTimeFloorIsSet(false);
    this.flightDepTimeFloor = 0;
    setFlightDepTimeTopIsSet(false);
    this.flightDepTimeTop = 0;
    this.forOnline = null;
    this.voucherCode = null;
    setCreateTimeFloorIsSet(false);
    this.createTimeFloor = 0;
    setCreateTimeTopIsSet(false);
    this.createTimeTop = 0;
    this.operatorId = null;
    this.vehicleCode = null;
  }

  public String getId() {
    return this.id;
  }

  public OrderSearchParam setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getCode() {
    return this.code;
  }

  public OrderSearchParam setCode(String code) {
    this.code = code;
    return this;
  }

  public void unsetCode() {
    this.code = null;
  }

  /** Returns true if field code is set (has been assigned a value) and false otherwise */
  public boolean isSetCode() {
    return this.code != null;
  }

  public void setCodeIsSet(boolean value) {
    if (!value) {
      this.code = null;
    }
  }

  public int getStatusSize() {
    return (this.status == null) ? 0 : this.status.size();
  }

  public java.util.Iterator<String> getStatusIterator() {
    return (this.status == null) ? null : this.status.iterator();
  }

  public void addToStatus(String elem) {
    if (this.status == null) {
      this.status = new ArrayList<String>();
    }
    this.status.add(elem);
  }

  public List<String> getStatus() {
    return this.status;
  }

  public OrderSearchParam setStatus(List<String> status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public String getBookerMobile() {
    return this.bookerMobile;
  }

  public OrderSearchParam setBookerMobile(String bookerMobile) {
    this.bookerMobile = bookerMobile;
    return this;
  }

  public void unsetBookerMobile() {
    this.bookerMobile = null;
  }

  /** Returns true if field bookerMobile is set (has been assigned a value) and false otherwise */
  public boolean isSetBookerMobile() {
    return this.bookerMobile != null;
  }

  public void setBookerMobileIsSet(boolean value) {
    if (!value) {
      this.bookerMobile = null;
    }
  }

  public String getFlightNumber() {
    return this.flightNumber;
  }

  public OrderSearchParam setFlightNumber(String flightNumber) {
    this.flightNumber = flightNumber;
    return this;
  }

  public void unsetFlightNumber() {
    this.flightNumber = null;
  }

  /** Returns true if field flightNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetFlightNumber() {
    return this.flightNumber != null;
  }

  public void setFlightNumberIsSet(boolean value) {
    if (!value) {
      this.flightNumber = null;
    }
  }

  public long getFlightDepTimeFloor() {
    return this.flightDepTimeFloor;
  }

  public OrderSearchParam setFlightDepTimeFloor(long flightDepTimeFloor) {
    this.flightDepTimeFloor = flightDepTimeFloor;
    setFlightDepTimeFloorIsSet(true);
    return this;
  }

  public void unsetFlightDepTimeFloor() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FLIGHTDEPTIMEFLOOR_ISSET_ID);
  }

  /** Returns true if field flightDepTimeFloor is set (has been assigned a value) and false otherwise */
  public boolean isSetFlightDepTimeFloor() {
    return EncodingUtils.testBit(__isset_bitfield, __FLIGHTDEPTIMEFLOOR_ISSET_ID);
  }

  public void setFlightDepTimeFloorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FLIGHTDEPTIMEFLOOR_ISSET_ID, value);
  }

  public long getFlightDepTimeTop() {
    return this.flightDepTimeTop;
  }

  public OrderSearchParam setFlightDepTimeTop(long flightDepTimeTop) {
    this.flightDepTimeTop = flightDepTimeTop;
    setFlightDepTimeTopIsSet(true);
    return this;
  }

  public void unsetFlightDepTimeTop() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FLIGHTDEPTIMETOP_ISSET_ID);
  }

  /** Returns true if field flightDepTimeTop is set (has been assigned a value) and false otherwise */
  public boolean isSetFlightDepTimeTop() {
    return EncodingUtils.testBit(__isset_bitfield, __FLIGHTDEPTIMETOP_ISSET_ID);
  }

  public void setFlightDepTimeTopIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FLIGHTDEPTIMETOP_ISSET_ID, value);
  }

  public String getForOnline() {
    return this.forOnline;
  }

  public OrderSearchParam setForOnline(String forOnline) {
    this.forOnline = forOnline;
    return this;
  }

  public void unsetForOnline() {
    this.forOnline = null;
  }

  /** Returns true if field forOnline is set (has been assigned a value) and false otherwise */
  public boolean isSetForOnline() {
    return this.forOnline != null;
  }

  public void setForOnlineIsSet(boolean value) {
    if (!value) {
      this.forOnline = null;
    }
  }

  public String getVoucherCode() {
    return this.voucherCode;
  }

  public OrderSearchParam setVoucherCode(String voucherCode) {
    this.voucherCode = voucherCode;
    return this;
  }

  public void unsetVoucherCode() {
    this.voucherCode = null;
  }

  /** Returns true if field voucherCode is set (has been assigned a value) and false otherwise */
  public boolean isSetVoucherCode() {
    return this.voucherCode != null;
  }

  public void setVoucherCodeIsSet(boolean value) {
    if (!value) {
      this.voucherCode = null;
    }
  }

  public long getCreateTimeFloor() {
    return this.createTimeFloor;
  }

  public OrderSearchParam setCreateTimeFloor(long createTimeFloor) {
    this.createTimeFloor = createTimeFloor;
    setCreateTimeFloorIsSet(true);
    return this;
  }

  public void unsetCreateTimeFloor() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMEFLOOR_ISSET_ID);
  }

  /** Returns true if field createTimeFloor is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimeFloor() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMEFLOOR_ISSET_ID);
  }

  public void setCreateTimeFloorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMEFLOOR_ISSET_ID, value);
  }

  public long getCreateTimeTop() {
    return this.createTimeTop;
  }

  public OrderSearchParam setCreateTimeTop(long createTimeTop) {
    this.createTimeTop = createTimeTop;
    setCreateTimeTopIsSet(true);
    return this;
  }

  public void unsetCreateTimeTop() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMETOP_ISSET_ID);
  }

  /** Returns true if field createTimeTop is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimeTop() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMETOP_ISSET_ID);
  }

  public void setCreateTimeTopIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMETOP_ISSET_ID, value);
  }

  public String getOperatorId() {
    return this.operatorId;
  }

  public OrderSearchParam setOperatorId(String operatorId) {
    this.operatorId = operatorId;
    return this;
  }

  public void unsetOperatorId() {
    this.operatorId = null;
  }

  /** Returns true if field operatorId is set (has been assigned a value) and false otherwise */
  public boolean isSetOperatorId() {
    return this.operatorId != null;
  }

  public void setOperatorIdIsSet(boolean value) {
    if (!value) {
      this.operatorId = null;
    }
  }

  public String getVehicleCode() {
    return this.vehicleCode;
  }

  public OrderSearchParam setVehicleCode(String vehicleCode) {
    this.vehicleCode = vehicleCode;
    return this;
  }

  public void unsetVehicleCode() {
    this.vehicleCode = null;
  }

  /** Returns true if field vehicleCode is set (has been assigned a value) and false otherwise */
  public boolean isSetVehicleCode() {
    return this.vehicleCode != null;
  }

  public void setVehicleCodeIsSet(boolean value) {
    if (!value) {
      this.vehicleCode = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case CODE:
      if (value == null) {
        unsetCode();
      } else {
        setCode((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((List<String>)value);
      }
      break;

    case BOOKER_MOBILE:
      if (value == null) {
        unsetBookerMobile();
      } else {
        setBookerMobile((String)value);
      }
      break;

    case FLIGHT_NUMBER:
      if (value == null) {
        unsetFlightNumber();
      } else {
        setFlightNumber((String)value);
      }
      break;

    case FLIGHT_DEP_TIME_FLOOR:
      if (value == null) {
        unsetFlightDepTimeFloor();
      } else {
        setFlightDepTimeFloor((Long)value);
      }
      break;

    case FLIGHT_DEP_TIME_TOP:
      if (value == null) {
        unsetFlightDepTimeTop();
      } else {
        setFlightDepTimeTop((Long)value);
      }
      break;

    case FOR_ONLINE:
      if (value == null) {
        unsetForOnline();
      } else {
        setForOnline((String)value);
      }
      break;

    case VOUCHER_CODE:
      if (value == null) {
        unsetVoucherCode();
      } else {
        setVoucherCode((String)value);
      }
      break;

    case CREATE_TIME_FLOOR:
      if (value == null) {
        unsetCreateTimeFloor();
      } else {
        setCreateTimeFloor((Long)value);
      }
      break;

    case CREATE_TIME_TOP:
      if (value == null) {
        unsetCreateTimeTop();
      } else {
        setCreateTimeTop((Long)value);
      }
      break;

    case OPERATOR_ID:
      if (value == null) {
        unsetOperatorId();
      } else {
        setOperatorId((String)value);
      }
      break;

    case VEHICLE_CODE:
      if (value == null) {
        unsetVehicleCode();
      } else {
        setVehicleCode((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case CODE:
      return getCode();

    case STATUS:
      return getStatus();

    case BOOKER_MOBILE:
      return getBookerMobile();

    case FLIGHT_NUMBER:
      return getFlightNumber();

    case FLIGHT_DEP_TIME_FLOOR:
      return Long.valueOf(getFlightDepTimeFloor());

    case FLIGHT_DEP_TIME_TOP:
      return Long.valueOf(getFlightDepTimeTop());

    case FOR_ONLINE:
      return getForOnline();

    case VOUCHER_CODE:
      return getVoucherCode();

    case CREATE_TIME_FLOOR:
      return Long.valueOf(getCreateTimeFloor());

    case CREATE_TIME_TOP:
      return Long.valueOf(getCreateTimeTop());

    case OPERATOR_ID:
      return getOperatorId();

    case VEHICLE_CODE:
      return getVehicleCode();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CODE:
      return isSetCode();
    case STATUS:
      return isSetStatus();
    case BOOKER_MOBILE:
      return isSetBookerMobile();
    case FLIGHT_NUMBER:
      return isSetFlightNumber();
    case FLIGHT_DEP_TIME_FLOOR:
      return isSetFlightDepTimeFloor();
    case FLIGHT_DEP_TIME_TOP:
      return isSetFlightDepTimeTop();
    case FOR_ONLINE:
      return isSetForOnline();
    case VOUCHER_CODE:
      return isSetVoucherCode();
    case CREATE_TIME_FLOOR:
      return isSetCreateTimeFloor();
    case CREATE_TIME_TOP:
      return isSetCreateTimeTop();
    case OPERATOR_ID:
      return isSetOperatorId();
    case VEHICLE_CODE:
      return isSetVehicleCode();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OrderSearchParam)
      return this.equals((OrderSearchParam)that);
    return false;
  }

  public boolean equals(OrderSearchParam that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_code = true && this.isSetCode();
    boolean that_present_code = true && that.isSetCode();
    if (this_present_code || that_present_code) {
      if (!(this_present_code && that_present_code))
        return false;
      if (!this.code.equals(that.code))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_bookerMobile = true && this.isSetBookerMobile();
    boolean that_present_bookerMobile = true && that.isSetBookerMobile();
    if (this_present_bookerMobile || that_present_bookerMobile) {
      if (!(this_present_bookerMobile && that_present_bookerMobile))
        return false;
      if (!this.bookerMobile.equals(that.bookerMobile))
        return false;
    }

    boolean this_present_flightNumber = true && this.isSetFlightNumber();
    boolean that_present_flightNumber = true && that.isSetFlightNumber();
    if (this_present_flightNumber || that_present_flightNumber) {
      if (!(this_present_flightNumber && that_present_flightNumber))
        return false;
      if (!this.flightNumber.equals(that.flightNumber))
        return false;
    }

    boolean this_present_flightDepTimeFloor = true;
    boolean that_present_flightDepTimeFloor = true;
    if (this_present_flightDepTimeFloor || that_present_flightDepTimeFloor) {
      if (!(this_present_flightDepTimeFloor && that_present_flightDepTimeFloor))
        return false;
      if (this.flightDepTimeFloor != that.flightDepTimeFloor)
        return false;
    }

    boolean this_present_flightDepTimeTop = true;
    boolean that_present_flightDepTimeTop = true;
    if (this_present_flightDepTimeTop || that_present_flightDepTimeTop) {
      if (!(this_present_flightDepTimeTop && that_present_flightDepTimeTop))
        return false;
      if (this.flightDepTimeTop != that.flightDepTimeTop)
        return false;
    }

    boolean this_present_forOnline = true && this.isSetForOnline();
    boolean that_present_forOnline = true && that.isSetForOnline();
    if (this_present_forOnline || that_present_forOnline) {
      if (!(this_present_forOnline && that_present_forOnline))
        return false;
      if (!this.forOnline.equals(that.forOnline))
        return false;
    }

    boolean this_present_voucherCode = true && this.isSetVoucherCode();
    boolean that_present_voucherCode = true && that.isSetVoucherCode();
    if (this_present_voucherCode || that_present_voucherCode) {
      if (!(this_present_voucherCode && that_present_voucherCode))
        return false;
      if (!this.voucherCode.equals(that.voucherCode))
        return false;
    }

    boolean this_present_createTimeFloor = true;
    boolean that_present_createTimeFloor = true;
    if (this_present_createTimeFloor || that_present_createTimeFloor) {
      if (!(this_present_createTimeFloor && that_present_createTimeFloor))
        return false;
      if (this.createTimeFloor != that.createTimeFloor)
        return false;
    }

    boolean this_present_createTimeTop = true;
    boolean that_present_createTimeTop = true;
    if (this_present_createTimeTop || that_present_createTimeTop) {
      if (!(this_present_createTimeTop && that_present_createTimeTop))
        return false;
      if (this.createTimeTop != that.createTimeTop)
        return false;
    }

    boolean this_present_operatorId = true && this.isSetOperatorId();
    boolean that_present_operatorId = true && that.isSetOperatorId();
    if (this_present_operatorId || that_present_operatorId) {
      if (!(this_present_operatorId && that_present_operatorId))
        return false;
      if (!this.operatorId.equals(that.operatorId))
        return false;
    }

    boolean this_present_vehicleCode = true && this.isSetVehicleCode();
    boolean that_present_vehicleCode = true && that.isSetVehicleCode();
    if (this_present_vehicleCode || that_present_vehicleCode) {
      if (!(this_present_vehicleCode && that_present_vehicleCode))
        return false;
      if (!this.vehicleCode.equals(that.vehicleCode))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_code = true && (isSetCode());
    list.add(present_code);
    if (present_code)
      list.add(code);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_bookerMobile = true && (isSetBookerMobile());
    list.add(present_bookerMobile);
    if (present_bookerMobile)
      list.add(bookerMobile);

    boolean present_flightNumber = true && (isSetFlightNumber());
    list.add(present_flightNumber);
    if (present_flightNumber)
      list.add(flightNumber);

    boolean present_flightDepTimeFloor = true;
    list.add(present_flightDepTimeFloor);
    if (present_flightDepTimeFloor)
      list.add(flightDepTimeFloor);

    boolean present_flightDepTimeTop = true;
    list.add(present_flightDepTimeTop);
    if (present_flightDepTimeTop)
      list.add(flightDepTimeTop);

    boolean present_forOnline = true && (isSetForOnline());
    list.add(present_forOnline);
    if (present_forOnline)
      list.add(forOnline);

    boolean present_voucherCode = true && (isSetVoucherCode());
    list.add(present_voucherCode);
    if (present_voucherCode)
      list.add(voucherCode);

    boolean present_createTimeFloor = true;
    list.add(present_createTimeFloor);
    if (present_createTimeFloor)
      list.add(createTimeFloor);

    boolean present_createTimeTop = true;
    list.add(present_createTimeTop);
    if (present_createTimeTop)
      list.add(createTimeTop);

    boolean present_operatorId = true && (isSetOperatorId());
    list.add(present_operatorId);
    if (present_operatorId)
      list.add(operatorId);

    boolean present_vehicleCode = true && (isSetVehicleCode());
    list.add(present_vehicleCode);
    if (present_vehicleCode)
      list.add(vehicleCode);

    return list.hashCode();
  }

  @Override
  public int compareTo(OrderSearchParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBookerMobile()).compareTo(other.isSetBookerMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBookerMobile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bookerMobile, other.bookerMobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlightNumber()).compareTo(other.isSetFlightNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlightNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flightNumber, other.flightNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlightDepTimeFloor()).compareTo(other.isSetFlightDepTimeFloor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlightDepTimeFloor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flightDepTimeFloor, other.flightDepTimeFloor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlightDepTimeTop()).compareTo(other.isSetFlightDepTimeTop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlightDepTimeTop()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flightDepTimeTop, other.flightDepTimeTop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForOnline()).compareTo(other.isSetForOnline());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForOnline()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.forOnline, other.forOnline);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVoucherCode()).compareTo(other.isSetVoucherCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVoucherCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.voucherCode, other.voucherCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimeFloor()).compareTo(other.isSetCreateTimeFloor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimeFloor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimeFloor, other.createTimeFloor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimeTop()).compareTo(other.isSetCreateTimeTop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimeTop()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimeTop, other.createTimeTop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperatorId()).compareTo(other.isSetOperatorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperatorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operatorId, other.operatorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVehicleCode()).compareTo(other.isSetVehicleCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVehicleCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vehicleCode, other.vehicleCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OrderSearchParam(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("code:");
    if (this.code == null) {
      sb.append("null");
    } else {
      sb.append(this.code);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bookerMobile:");
    if (this.bookerMobile == null) {
      sb.append("null");
    } else {
      sb.append(this.bookerMobile);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("flightNumber:");
    if (this.flightNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.flightNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("flightDepTimeFloor:");
    sb.append(this.flightDepTimeFloor);
    first = false;
    if (!first) sb.append(", ");
    sb.append("flightDepTimeTop:");
    sb.append(this.flightDepTimeTop);
    first = false;
    if (!first) sb.append(", ");
    sb.append("forOnline:");
    if (this.forOnline == null) {
      sb.append("null");
    } else {
      sb.append(this.forOnline);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("voucherCode:");
    if (this.voucherCode == null) {
      sb.append("null");
    } else {
      sb.append(this.voucherCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTimeFloor:");
    sb.append(this.createTimeFloor);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTimeTop:");
    sb.append(this.createTimeTop);
    first = false;
    if (!first) sb.append(", ");
    sb.append("operatorId:");
    if (this.operatorId == null) {
      sb.append("null");
    } else {
      sb.append(this.operatorId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("vehicleCode:");
    if (this.vehicleCode == null) {
      sb.append("null");
    } else {
      sb.append(this.vehicleCode);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OrderSearchParamStandardSchemeFactory implements SchemeFactory {
    public OrderSearchParamStandardScheme getScheme() {
      return new OrderSearchParamStandardScheme();
    }
  }

  private static class OrderSearchParamStandardScheme extends StandardScheme<OrderSearchParam> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OrderSearchParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.code = iprot.readString();
              struct.setCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.status = new ArrayList<String>(_list24.size);
                String _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  _elem25 = iprot.readString();
                  struct.status.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BOOKER_MOBILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bookerMobile = iprot.readString();
              struct.setBookerMobileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FLIGHT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.flightNumber = iprot.readString();
              struct.setFlightNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FLIGHT_DEP_TIME_FLOOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.flightDepTimeFloor = iprot.readI64();
              struct.setFlightDepTimeFloorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FLIGHT_DEP_TIME_TOP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.flightDepTimeTop = iprot.readI64();
              struct.setFlightDepTimeTopIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FOR_ONLINE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.forOnline = iprot.readString();
              struct.setForOnlineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // VOUCHER_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.voucherCode = iprot.readString();
              struct.setVoucherCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CREATE_TIME_FLOOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimeFloor = iprot.readI64();
              struct.setCreateTimeFloorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CREATE_TIME_TOP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimeTop = iprot.readI64();
              struct.setCreateTimeTopIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // OPERATOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operatorId = iprot.readString();
              struct.setOperatorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // VEHICLE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vehicleCode = iprot.readString();
              struct.setVehicleCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OrderSearchParam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.code != null) {
        oprot.writeFieldBegin(CODE_FIELD_DESC);
        oprot.writeString(struct.code);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.status.size()));
          for (String _iter27 : struct.status)
          {
            oprot.writeString(_iter27);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.bookerMobile != null) {
        oprot.writeFieldBegin(BOOKER_MOBILE_FIELD_DESC);
        oprot.writeString(struct.bookerMobile);
        oprot.writeFieldEnd();
      }
      if (struct.flightNumber != null) {
        oprot.writeFieldBegin(FLIGHT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.flightNumber);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FLIGHT_DEP_TIME_FLOOR_FIELD_DESC);
      oprot.writeI64(struct.flightDepTimeFloor);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FLIGHT_DEP_TIME_TOP_FIELD_DESC);
      oprot.writeI64(struct.flightDepTimeTop);
      oprot.writeFieldEnd();
      if (struct.forOnline != null) {
        oprot.writeFieldBegin(FOR_ONLINE_FIELD_DESC);
        oprot.writeString(struct.forOnline);
        oprot.writeFieldEnd();
      }
      if (struct.voucherCode != null) {
        oprot.writeFieldBegin(VOUCHER_CODE_FIELD_DESC);
        oprot.writeString(struct.voucherCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATE_TIME_FLOOR_FIELD_DESC);
      oprot.writeI64(struct.createTimeFloor);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_TIME_TOP_FIELD_DESC);
      oprot.writeI64(struct.createTimeTop);
      oprot.writeFieldEnd();
      if (struct.operatorId != null) {
        oprot.writeFieldBegin(OPERATOR_ID_FIELD_DESC);
        oprot.writeString(struct.operatorId);
        oprot.writeFieldEnd();
      }
      if (struct.vehicleCode != null) {
        oprot.writeFieldBegin(VEHICLE_CODE_FIELD_DESC);
        oprot.writeString(struct.vehicleCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OrderSearchParamTupleSchemeFactory implements SchemeFactory {
    public OrderSearchParamTupleScheme getScheme() {
      return new OrderSearchParamTupleScheme();
    }
  }

  private static class OrderSearchParamTupleScheme extends TupleScheme<OrderSearchParam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OrderSearchParam struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetCode()) {
        optionals.set(1);
      }
      if (struct.isSetStatus()) {
        optionals.set(2);
      }
      if (struct.isSetBookerMobile()) {
        optionals.set(3);
      }
      if (struct.isSetFlightNumber()) {
        optionals.set(4);
      }
      if (struct.isSetFlightDepTimeFloor()) {
        optionals.set(5);
      }
      if (struct.isSetFlightDepTimeTop()) {
        optionals.set(6);
      }
      if (struct.isSetForOnline()) {
        optionals.set(7);
      }
      if (struct.isSetVoucherCode()) {
        optionals.set(8);
      }
      if (struct.isSetCreateTimeFloor()) {
        optionals.set(9);
      }
      if (struct.isSetCreateTimeTop()) {
        optionals.set(10);
      }
      if (struct.isSetOperatorId()) {
        optionals.set(11);
      }
      if (struct.isSetVehicleCode()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetCode()) {
        oprot.writeString(struct.code);
      }
      if (struct.isSetStatus()) {
        {
          oprot.writeI32(struct.status.size());
          for (String _iter28 : struct.status)
          {
            oprot.writeString(_iter28);
          }
        }
      }
      if (struct.isSetBookerMobile()) {
        oprot.writeString(struct.bookerMobile);
      }
      if (struct.isSetFlightNumber()) {
        oprot.writeString(struct.flightNumber);
      }
      if (struct.isSetFlightDepTimeFloor()) {
        oprot.writeI64(struct.flightDepTimeFloor);
      }
      if (struct.isSetFlightDepTimeTop()) {
        oprot.writeI64(struct.flightDepTimeTop);
      }
      if (struct.isSetForOnline()) {
        oprot.writeString(struct.forOnline);
      }
      if (struct.isSetVoucherCode()) {
        oprot.writeString(struct.voucherCode);
      }
      if (struct.isSetCreateTimeFloor()) {
        oprot.writeI64(struct.createTimeFloor);
      }
      if (struct.isSetCreateTimeTop()) {
        oprot.writeI64(struct.createTimeTop);
      }
      if (struct.isSetOperatorId()) {
        oprot.writeString(struct.operatorId);
      }
      if (struct.isSetVehicleCode()) {
        oprot.writeString(struct.vehicleCode);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OrderSearchParam struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.code = iprot.readString();
        struct.setCodeIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.status = new ArrayList<String>(_list29.size);
          String _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = iprot.readString();
            struct.status.add(_elem30);
          }
        }
        struct.setStatusIsSet(true);
      }
      if (incoming.get(3)) {
        struct.bookerMobile = iprot.readString();
        struct.setBookerMobileIsSet(true);
      }
      if (incoming.get(4)) {
        struct.flightNumber = iprot.readString();
        struct.setFlightNumberIsSet(true);
      }
      if (incoming.get(5)) {
        struct.flightDepTimeFloor = iprot.readI64();
        struct.setFlightDepTimeFloorIsSet(true);
      }
      if (incoming.get(6)) {
        struct.flightDepTimeTop = iprot.readI64();
        struct.setFlightDepTimeTopIsSet(true);
      }
      if (incoming.get(7)) {
        struct.forOnline = iprot.readString();
        struct.setForOnlineIsSet(true);
      }
      if (incoming.get(8)) {
        struct.voucherCode = iprot.readString();
        struct.setVoucherCodeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.createTimeFloor = iprot.readI64();
        struct.setCreateTimeFloorIsSet(true);
      }
      if (incoming.get(10)) {
        struct.createTimeTop = iprot.readI64();
        struct.setCreateTimeTopIsSet(true);
      }
      if (incoming.get(11)) {
        struct.operatorId = iprot.readString();
        struct.setOperatorIdIsSet(true);
      }
      if (incoming.get(12)) {
        struct.vehicleCode = iprot.readString();
        struct.setVehicleCodeIsSet(true);
      }
    }
  }

}

