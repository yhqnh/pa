/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ikamobile.pa.thrift.server.acceptor;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-8-31")
public class OrderDetailDto implements org.apache.thrift.TBase<OrderDetailDto, OrderDetailDto._Fields>, java.io.Serializable, Cloneable, Comparable<OrderDetailDto> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OrderDetailDto");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField BOOKER_FIELD_DESC = new org.apache.thrift.protocol.TField("booker", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField PASSENGERS_FIELD_DESC = new org.apache.thrift.protocol.TField("passengers", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField ABOARD_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("aboardPosition", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField ARR_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("arrPosition", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField FLIGHT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("flightNumber", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField FLIGHT_DEP_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("flightDepTime", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField VEHICLE_FIELD_DESC = new org.apache.thrift.protocol.TField("vehicle", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField DRIVER_FIELD_DESC = new org.apache.thrift.protocol.TField("driver", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField ONLINE_FIELD_DESC = new org.apache.thrift.protocol.TField("online", org.apache.thrift.protocol.TType.BOOL, (short)12);
  private static final org.apache.thrift.protocol.TField VOUCHER_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("voucherCode", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField EXPECT_BOARD_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("expectBoardTime", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField ACTUAL_BOARD_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("actualBoardTime", org.apache.thrift.protocol.TType.I64, (short)15);
  private static final org.apache.thrift.protocol.TField ARR_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("arrTime", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)17);
  private static final org.apache.thrift.protocol.TField OPERATE_LOGS_FIELD_DESC = new org.apache.thrift.protocol.TField("operateLogs", org.apache.thrift.protocol.TType.LIST, (short)18);
  private static final org.apache.thrift.protocol.TField OPERATOR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("operatorName", org.apache.thrift.protocol.TType.STRING, (short)19);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OrderDetailDtoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OrderDetailDtoTupleSchemeFactory());
  }

  public String id; // required
  public String code; // required
  public String status; // required
  public com.ikamobile.pa.thrift.server.acceptor.UserDto booker; // required
  public List<PassengerDto> passengers; // required
  public com.ikamobile.pa.thrift.server.acceptor.PositionDto aboardPosition; // required
  public com.ikamobile.pa.thrift.server.acceptor.PositionDto arrPosition; // required
  public String flightNumber; // required
  public long flightDepTime; // required
  public com.ikamobile.pa.thrift.server.acceptor.VehicleDto vehicle; // required
  public com.ikamobile.pa.thrift.server.acceptor.DriverDto driver; // required
  public boolean online; // required
  public String voucherCode; // required
  public long expectBoardTime; // required
  public long actualBoardTime; // required
  public long arrTime; // required
  public long createTime; // required
  public List<com.ikamobile.pa.thrift.common.OperateLogDto> operateLogs; // required
  public String operatorName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    CODE((short)2, "code"),
    STATUS((short)3, "status"),
    BOOKER((short)4, "booker"),
    PASSENGERS((short)5, "passengers"),
    ABOARD_POSITION((short)6, "aboardPosition"),
    ARR_POSITION((short)7, "arrPosition"),
    FLIGHT_NUMBER((short)8, "flightNumber"),
    FLIGHT_DEP_TIME((short)9, "flightDepTime"),
    VEHICLE((short)10, "vehicle"),
    DRIVER((short)11, "driver"),
    ONLINE((short)12, "online"),
    VOUCHER_CODE((short)13, "voucherCode"),
    EXPECT_BOARD_TIME((short)14, "expectBoardTime"),
    ACTUAL_BOARD_TIME((short)15, "actualBoardTime"),
    ARR_TIME((short)16, "arrTime"),
    CREATE_TIME((short)17, "createTime"),
    OPERATE_LOGS((short)18, "operateLogs"),
    OPERATOR_NAME((short)19, "operatorName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CODE
          return CODE;
        case 3: // STATUS
          return STATUS;
        case 4: // BOOKER
          return BOOKER;
        case 5: // PASSENGERS
          return PASSENGERS;
        case 6: // ABOARD_POSITION
          return ABOARD_POSITION;
        case 7: // ARR_POSITION
          return ARR_POSITION;
        case 8: // FLIGHT_NUMBER
          return FLIGHT_NUMBER;
        case 9: // FLIGHT_DEP_TIME
          return FLIGHT_DEP_TIME;
        case 10: // VEHICLE
          return VEHICLE;
        case 11: // DRIVER
          return DRIVER;
        case 12: // ONLINE
          return ONLINE;
        case 13: // VOUCHER_CODE
          return VOUCHER_CODE;
        case 14: // EXPECT_BOARD_TIME
          return EXPECT_BOARD_TIME;
        case 15: // ACTUAL_BOARD_TIME
          return ACTUAL_BOARD_TIME;
        case 16: // ARR_TIME
          return ARR_TIME;
        case 17: // CREATE_TIME
          return CREATE_TIME;
        case 18: // OPERATE_LOGS
          return OPERATE_LOGS;
        case 19: // OPERATOR_NAME
          return OPERATOR_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FLIGHTDEPTIME_ISSET_ID = 0;
  private static final int __ONLINE_ISSET_ID = 1;
  private static final int __EXPECTBOARDTIME_ISSET_ID = 2;
  private static final int __ACTUALBOARDTIME_ISSET_ID = 3;
  private static final int __ARRTIME_ISSET_ID = 4;
  private static final int __CREATETIME_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BOOKER, new org.apache.thrift.meta_data.FieldMetaData("booker", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ikamobile.pa.thrift.server.acceptor.UserDto.class)));
    tmpMap.put(_Fields.PASSENGERS, new org.apache.thrift.meta_data.FieldMetaData("passengers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PassengerDto.class))));
    tmpMap.put(_Fields.ABOARD_POSITION, new org.apache.thrift.meta_data.FieldMetaData("aboardPosition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ikamobile.pa.thrift.server.acceptor.PositionDto.class)));
    tmpMap.put(_Fields.ARR_POSITION, new org.apache.thrift.meta_data.FieldMetaData("arrPosition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ikamobile.pa.thrift.server.acceptor.PositionDto.class)));
    tmpMap.put(_Fields.FLIGHT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("flightNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FLIGHT_DEP_TIME, new org.apache.thrift.meta_data.FieldMetaData("flightDepTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VEHICLE, new org.apache.thrift.meta_data.FieldMetaData("vehicle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ikamobile.pa.thrift.server.acceptor.VehicleDto.class)));
    tmpMap.put(_Fields.DRIVER, new org.apache.thrift.meta_data.FieldMetaData("driver", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ikamobile.pa.thrift.server.acceptor.DriverDto.class)));
    tmpMap.put(_Fields.ONLINE, new org.apache.thrift.meta_data.FieldMetaData("online", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.VOUCHER_CODE, new org.apache.thrift.meta_data.FieldMetaData("voucherCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXPECT_BOARD_TIME, new org.apache.thrift.meta_data.FieldMetaData("expectBoardTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ACTUAL_BOARD_TIME, new org.apache.thrift.meta_data.FieldMetaData("actualBoardTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ARR_TIME, new org.apache.thrift.meta_data.FieldMetaData("arrTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OPERATE_LOGS, new org.apache.thrift.meta_data.FieldMetaData("operateLogs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ikamobile.pa.thrift.common.OperateLogDto.class))));
    tmpMap.put(_Fields.OPERATOR_NAME, new org.apache.thrift.meta_data.FieldMetaData("operatorName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OrderDetailDto.class, metaDataMap);
  }

  public OrderDetailDto() {
  }

  public OrderDetailDto(
    String id,
    String code,
    String status,
    com.ikamobile.pa.thrift.server.acceptor.UserDto booker,
    List<PassengerDto> passengers,
    com.ikamobile.pa.thrift.server.acceptor.PositionDto aboardPosition,
    com.ikamobile.pa.thrift.server.acceptor.PositionDto arrPosition,
    String flightNumber,
    long flightDepTime,
    com.ikamobile.pa.thrift.server.acceptor.VehicleDto vehicle,
    com.ikamobile.pa.thrift.server.acceptor.DriverDto driver,
    boolean online,
    String voucherCode,
    long expectBoardTime,
    long actualBoardTime,
    long arrTime,
    long createTime,
    List<com.ikamobile.pa.thrift.common.OperateLogDto> operateLogs,
    String operatorName)
  {
    this();
    this.id = id;
    this.code = code;
    this.status = status;
    this.booker = booker;
    this.passengers = passengers;
    this.aboardPosition = aboardPosition;
    this.arrPosition = arrPosition;
    this.flightNumber = flightNumber;
    this.flightDepTime = flightDepTime;
    setFlightDepTimeIsSet(true);
    this.vehicle = vehicle;
    this.driver = driver;
    this.online = online;
    setOnlineIsSet(true);
    this.voucherCode = voucherCode;
    this.expectBoardTime = expectBoardTime;
    setExpectBoardTimeIsSet(true);
    this.actualBoardTime = actualBoardTime;
    setActualBoardTimeIsSet(true);
    this.arrTime = arrTime;
    setArrTimeIsSet(true);
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.operateLogs = operateLogs;
    this.operatorName = operatorName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OrderDetailDto(OrderDetailDto other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetCode()) {
      this.code = other.code;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetBooker()) {
      this.booker = new com.ikamobile.pa.thrift.server.acceptor.UserDto(other.booker);
    }
    if (other.isSetPassengers()) {
      List<PassengerDto> __this__passengers = new ArrayList<PassengerDto>(other.passengers.size());
      for (PassengerDto other_element : other.passengers) {
        __this__passengers.add(new PassengerDto(other_element));
      }
      this.passengers = __this__passengers;
    }
    if (other.isSetAboardPosition()) {
      this.aboardPosition = new com.ikamobile.pa.thrift.server.acceptor.PositionDto(other.aboardPosition);
    }
    if (other.isSetArrPosition()) {
      this.arrPosition = new com.ikamobile.pa.thrift.server.acceptor.PositionDto(other.arrPosition);
    }
    if (other.isSetFlightNumber()) {
      this.flightNumber = other.flightNumber;
    }
    this.flightDepTime = other.flightDepTime;
    if (other.isSetVehicle()) {
      this.vehicle = new com.ikamobile.pa.thrift.server.acceptor.VehicleDto(other.vehicle);
    }
    if (other.isSetDriver()) {
      this.driver = new com.ikamobile.pa.thrift.server.acceptor.DriverDto(other.driver);
    }
    this.online = other.online;
    if (other.isSetVoucherCode()) {
      this.voucherCode = other.voucherCode;
    }
    this.expectBoardTime = other.expectBoardTime;
    this.actualBoardTime = other.actualBoardTime;
    this.arrTime = other.arrTime;
    this.createTime = other.createTime;
    if (other.isSetOperateLogs()) {
      List<com.ikamobile.pa.thrift.common.OperateLogDto> __this__operateLogs = new ArrayList<com.ikamobile.pa.thrift.common.OperateLogDto>(other.operateLogs.size());
      for (com.ikamobile.pa.thrift.common.OperateLogDto other_element : other.operateLogs) {
        __this__operateLogs.add(new com.ikamobile.pa.thrift.common.OperateLogDto(other_element));
      }
      this.operateLogs = __this__operateLogs;
    }
    if (other.isSetOperatorName()) {
      this.operatorName = other.operatorName;
    }
  }

  public OrderDetailDto deepCopy() {
    return new OrderDetailDto(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.code = null;
    this.status = null;
    this.booker = null;
    this.passengers = null;
    this.aboardPosition = null;
    this.arrPosition = null;
    this.flightNumber = null;
    setFlightDepTimeIsSet(false);
    this.flightDepTime = 0;
    this.vehicle = null;
    this.driver = null;
    setOnlineIsSet(false);
    this.online = false;
    this.voucherCode = null;
    setExpectBoardTimeIsSet(false);
    this.expectBoardTime = 0;
    setActualBoardTimeIsSet(false);
    this.actualBoardTime = 0;
    setArrTimeIsSet(false);
    this.arrTime = 0;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    this.operateLogs = null;
    this.operatorName = null;
  }

  public String getId() {
    return this.id;
  }

  public OrderDetailDto setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getCode() {
    return this.code;
  }

  public OrderDetailDto setCode(String code) {
    this.code = code;
    return this;
  }

  public void unsetCode() {
    this.code = null;
  }

  /** Returns true if field code is set (has been assigned a value) and false otherwise */
  public boolean isSetCode() {
    return this.code != null;
  }

  public void setCodeIsSet(boolean value) {
    if (!value) {
      this.code = null;
    }
  }

  public String getStatus() {
    return this.status;
  }

  public OrderDetailDto setStatus(String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public com.ikamobile.pa.thrift.server.acceptor.UserDto getBooker() {
    return this.booker;
  }

  public OrderDetailDto setBooker(com.ikamobile.pa.thrift.server.acceptor.UserDto booker) {
    this.booker = booker;
    return this;
  }

  public void unsetBooker() {
    this.booker = null;
  }

  /** Returns true if field booker is set (has been assigned a value) and false otherwise */
  public boolean isSetBooker() {
    return this.booker != null;
  }

  public void setBookerIsSet(boolean value) {
    if (!value) {
      this.booker = null;
    }
  }

  public int getPassengersSize() {
    return (this.passengers == null) ? 0 : this.passengers.size();
  }

  public java.util.Iterator<PassengerDto> getPassengersIterator() {
    return (this.passengers == null) ? null : this.passengers.iterator();
  }

  public void addToPassengers(PassengerDto elem) {
    if (this.passengers == null) {
      this.passengers = new ArrayList<PassengerDto>();
    }
    this.passengers.add(elem);
  }

  public List<PassengerDto> getPassengers() {
    return this.passengers;
  }

  public OrderDetailDto setPassengers(List<PassengerDto> passengers) {
    this.passengers = passengers;
    return this;
  }

  public void unsetPassengers() {
    this.passengers = null;
  }

  /** Returns true if field passengers is set (has been assigned a value) and false otherwise */
  public boolean isSetPassengers() {
    return this.passengers != null;
  }

  public void setPassengersIsSet(boolean value) {
    if (!value) {
      this.passengers = null;
    }
  }

  public com.ikamobile.pa.thrift.server.acceptor.PositionDto getAboardPosition() {
    return this.aboardPosition;
  }

  public OrderDetailDto setAboardPosition(com.ikamobile.pa.thrift.server.acceptor.PositionDto aboardPosition) {
    this.aboardPosition = aboardPosition;
    return this;
  }

  public void unsetAboardPosition() {
    this.aboardPosition = null;
  }

  /** Returns true if field aboardPosition is set (has been assigned a value) and false otherwise */
  public boolean isSetAboardPosition() {
    return this.aboardPosition != null;
  }

  public void setAboardPositionIsSet(boolean value) {
    if (!value) {
      this.aboardPosition = null;
    }
  }

  public com.ikamobile.pa.thrift.server.acceptor.PositionDto getArrPosition() {
    return this.arrPosition;
  }

  public OrderDetailDto setArrPosition(com.ikamobile.pa.thrift.server.acceptor.PositionDto arrPosition) {
    this.arrPosition = arrPosition;
    return this;
  }

  public void unsetArrPosition() {
    this.arrPosition = null;
  }

  /** Returns true if field arrPosition is set (has been assigned a value) and false otherwise */
  public boolean isSetArrPosition() {
    return this.arrPosition != null;
  }

  public void setArrPositionIsSet(boolean value) {
    if (!value) {
      this.arrPosition = null;
    }
  }

  public String getFlightNumber() {
    return this.flightNumber;
  }

  public OrderDetailDto setFlightNumber(String flightNumber) {
    this.flightNumber = flightNumber;
    return this;
  }

  public void unsetFlightNumber() {
    this.flightNumber = null;
  }

  /** Returns true if field flightNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetFlightNumber() {
    return this.flightNumber != null;
  }

  public void setFlightNumberIsSet(boolean value) {
    if (!value) {
      this.flightNumber = null;
    }
  }

  public long getFlightDepTime() {
    return this.flightDepTime;
  }

  public OrderDetailDto setFlightDepTime(long flightDepTime) {
    this.flightDepTime = flightDepTime;
    setFlightDepTimeIsSet(true);
    return this;
  }

  public void unsetFlightDepTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FLIGHTDEPTIME_ISSET_ID);
  }

  /** Returns true if field flightDepTime is set (has been assigned a value) and false otherwise */
  public boolean isSetFlightDepTime() {
    return EncodingUtils.testBit(__isset_bitfield, __FLIGHTDEPTIME_ISSET_ID);
  }

  public void setFlightDepTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FLIGHTDEPTIME_ISSET_ID, value);
  }

  public com.ikamobile.pa.thrift.server.acceptor.VehicleDto getVehicle() {
    return this.vehicle;
  }

  public OrderDetailDto setVehicle(com.ikamobile.pa.thrift.server.acceptor.VehicleDto vehicle) {
    this.vehicle = vehicle;
    return this;
  }

  public void unsetVehicle() {
    this.vehicle = null;
  }

  /** Returns true if field vehicle is set (has been assigned a value) and false otherwise */
  public boolean isSetVehicle() {
    return this.vehicle != null;
  }

  public void setVehicleIsSet(boolean value) {
    if (!value) {
      this.vehicle = null;
    }
  }

  public com.ikamobile.pa.thrift.server.acceptor.DriverDto getDriver() {
    return this.driver;
  }

  public OrderDetailDto setDriver(com.ikamobile.pa.thrift.server.acceptor.DriverDto driver) {
    this.driver = driver;
    return this;
  }

  public void unsetDriver() {
    this.driver = null;
  }

  /** Returns true if field driver is set (has been assigned a value) and false otherwise */
  public boolean isSetDriver() {
    return this.driver != null;
  }

  public void setDriverIsSet(boolean value) {
    if (!value) {
      this.driver = null;
    }
  }

  public boolean isOnline() {
    return this.online;
  }

  public OrderDetailDto setOnline(boolean online) {
    this.online = online;
    setOnlineIsSet(true);
    return this;
  }

  public void unsetOnline() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ONLINE_ISSET_ID);
  }

  /** Returns true if field online is set (has been assigned a value) and false otherwise */
  public boolean isSetOnline() {
    return EncodingUtils.testBit(__isset_bitfield, __ONLINE_ISSET_ID);
  }

  public void setOnlineIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ONLINE_ISSET_ID, value);
  }

  public String getVoucherCode() {
    return this.voucherCode;
  }

  public OrderDetailDto setVoucherCode(String voucherCode) {
    this.voucherCode = voucherCode;
    return this;
  }

  public void unsetVoucherCode() {
    this.voucherCode = null;
  }

  /** Returns true if field voucherCode is set (has been assigned a value) and false otherwise */
  public boolean isSetVoucherCode() {
    return this.voucherCode != null;
  }

  public void setVoucherCodeIsSet(boolean value) {
    if (!value) {
      this.voucherCode = null;
    }
  }

  public long getExpectBoardTime() {
    return this.expectBoardTime;
  }

  public OrderDetailDto setExpectBoardTime(long expectBoardTime) {
    this.expectBoardTime = expectBoardTime;
    setExpectBoardTimeIsSet(true);
    return this;
  }

  public void unsetExpectBoardTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPECTBOARDTIME_ISSET_ID);
  }

  /** Returns true if field expectBoardTime is set (has been assigned a value) and false otherwise */
  public boolean isSetExpectBoardTime() {
    return EncodingUtils.testBit(__isset_bitfield, __EXPECTBOARDTIME_ISSET_ID);
  }

  public void setExpectBoardTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPECTBOARDTIME_ISSET_ID, value);
  }

  public long getActualBoardTime() {
    return this.actualBoardTime;
  }

  public OrderDetailDto setActualBoardTime(long actualBoardTime) {
    this.actualBoardTime = actualBoardTime;
    setActualBoardTimeIsSet(true);
    return this;
  }

  public void unsetActualBoardTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTUALBOARDTIME_ISSET_ID);
  }

  /** Returns true if field actualBoardTime is set (has been assigned a value) and false otherwise */
  public boolean isSetActualBoardTime() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTUALBOARDTIME_ISSET_ID);
  }

  public void setActualBoardTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTUALBOARDTIME_ISSET_ID, value);
  }

  public long getArrTime() {
    return this.arrTime;
  }

  public OrderDetailDto setArrTime(long arrTime) {
    this.arrTime = arrTime;
    setArrTimeIsSet(true);
    return this;
  }

  public void unsetArrTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARRTIME_ISSET_ID);
  }

  /** Returns true if field arrTime is set (has been assigned a value) and false otherwise */
  public boolean isSetArrTime() {
    return EncodingUtils.testBit(__isset_bitfield, __ARRTIME_ISSET_ID);
  }

  public void setArrTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARRTIME_ISSET_ID, value);
  }

  public long getCreateTime() {
    return this.createTime;
  }

  public OrderDetailDto setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public int getOperateLogsSize() {
    return (this.operateLogs == null) ? 0 : this.operateLogs.size();
  }

  public java.util.Iterator<com.ikamobile.pa.thrift.common.OperateLogDto> getOperateLogsIterator() {
    return (this.operateLogs == null) ? null : this.operateLogs.iterator();
  }

  public void addToOperateLogs(com.ikamobile.pa.thrift.common.OperateLogDto elem) {
    if (this.operateLogs == null) {
      this.operateLogs = new ArrayList<com.ikamobile.pa.thrift.common.OperateLogDto>();
    }
    this.operateLogs.add(elem);
  }

  public List<com.ikamobile.pa.thrift.common.OperateLogDto> getOperateLogs() {
    return this.operateLogs;
  }

  public OrderDetailDto setOperateLogs(List<com.ikamobile.pa.thrift.common.OperateLogDto> operateLogs) {
    this.operateLogs = operateLogs;
    return this;
  }

  public void unsetOperateLogs() {
    this.operateLogs = null;
  }

  /** Returns true if field operateLogs is set (has been assigned a value) and false otherwise */
  public boolean isSetOperateLogs() {
    return this.operateLogs != null;
  }

  public void setOperateLogsIsSet(boolean value) {
    if (!value) {
      this.operateLogs = null;
    }
  }

  public String getOperatorName() {
    return this.operatorName;
  }

  public OrderDetailDto setOperatorName(String operatorName) {
    this.operatorName = operatorName;
    return this;
  }

  public void unsetOperatorName() {
    this.operatorName = null;
  }

  /** Returns true if field operatorName is set (has been assigned a value) and false otherwise */
  public boolean isSetOperatorName() {
    return this.operatorName != null;
  }

  public void setOperatorNameIsSet(boolean value) {
    if (!value) {
      this.operatorName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case CODE:
      if (value == null) {
        unsetCode();
      } else {
        setCode((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((String)value);
      }
      break;

    case BOOKER:
      if (value == null) {
        unsetBooker();
      } else {
        setBooker((com.ikamobile.pa.thrift.server.acceptor.UserDto)value);
      }
      break;

    case PASSENGERS:
      if (value == null) {
        unsetPassengers();
      } else {
        setPassengers((List<PassengerDto>)value);
      }
      break;

    case ABOARD_POSITION:
      if (value == null) {
        unsetAboardPosition();
      } else {
        setAboardPosition((com.ikamobile.pa.thrift.server.acceptor.PositionDto)value);
      }
      break;

    case ARR_POSITION:
      if (value == null) {
        unsetArrPosition();
      } else {
        setArrPosition((com.ikamobile.pa.thrift.server.acceptor.PositionDto)value);
      }
      break;

    case FLIGHT_NUMBER:
      if (value == null) {
        unsetFlightNumber();
      } else {
        setFlightNumber((String)value);
      }
      break;

    case FLIGHT_DEP_TIME:
      if (value == null) {
        unsetFlightDepTime();
      } else {
        setFlightDepTime((Long)value);
      }
      break;

    case VEHICLE:
      if (value == null) {
        unsetVehicle();
      } else {
        setVehicle((com.ikamobile.pa.thrift.server.acceptor.VehicleDto)value);
      }
      break;

    case DRIVER:
      if (value == null) {
        unsetDriver();
      } else {
        setDriver((com.ikamobile.pa.thrift.server.acceptor.DriverDto)value);
      }
      break;

    case ONLINE:
      if (value == null) {
        unsetOnline();
      } else {
        setOnline((Boolean)value);
      }
      break;

    case VOUCHER_CODE:
      if (value == null) {
        unsetVoucherCode();
      } else {
        setVoucherCode((String)value);
      }
      break;

    case EXPECT_BOARD_TIME:
      if (value == null) {
        unsetExpectBoardTime();
      } else {
        setExpectBoardTime((Long)value);
      }
      break;

    case ACTUAL_BOARD_TIME:
      if (value == null) {
        unsetActualBoardTime();
      } else {
        setActualBoardTime((Long)value);
      }
      break;

    case ARR_TIME:
      if (value == null) {
        unsetArrTime();
      } else {
        setArrTime((Long)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((Long)value);
      }
      break;

    case OPERATE_LOGS:
      if (value == null) {
        unsetOperateLogs();
      } else {
        setOperateLogs((List<com.ikamobile.pa.thrift.common.OperateLogDto>)value);
      }
      break;

    case OPERATOR_NAME:
      if (value == null) {
        unsetOperatorName();
      } else {
        setOperatorName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case CODE:
      return getCode();

    case STATUS:
      return getStatus();

    case BOOKER:
      return getBooker();

    case PASSENGERS:
      return getPassengers();

    case ABOARD_POSITION:
      return getAboardPosition();

    case ARR_POSITION:
      return getArrPosition();

    case FLIGHT_NUMBER:
      return getFlightNumber();

    case FLIGHT_DEP_TIME:
      return Long.valueOf(getFlightDepTime());

    case VEHICLE:
      return getVehicle();

    case DRIVER:
      return getDriver();

    case ONLINE:
      return Boolean.valueOf(isOnline());

    case VOUCHER_CODE:
      return getVoucherCode();

    case EXPECT_BOARD_TIME:
      return Long.valueOf(getExpectBoardTime());

    case ACTUAL_BOARD_TIME:
      return Long.valueOf(getActualBoardTime());

    case ARR_TIME:
      return Long.valueOf(getArrTime());

    case CREATE_TIME:
      return Long.valueOf(getCreateTime());

    case OPERATE_LOGS:
      return getOperateLogs();

    case OPERATOR_NAME:
      return getOperatorName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CODE:
      return isSetCode();
    case STATUS:
      return isSetStatus();
    case BOOKER:
      return isSetBooker();
    case PASSENGERS:
      return isSetPassengers();
    case ABOARD_POSITION:
      return isSetAboardPosition();
    case ARR_POSITION:
      return isSetArrPosition();
    case FLIGHT_NUMBER:
      return isSetFlightNumber();
    case FLIGHT_DEP_TIME:
      return isSetFlightDepTime();
    case VEHICLE:
      return isSetVehicle();
    case DRIVER:
      return isSetDriver();
    case ONLINE:
      return isSetOnline();
    case VOUCHER_CODE:
      return isSetVoucherCode();
    case EXPECT_BOARD_TIME:
      return isSetExpectBoardTime();
    case ACTUAL_BOARD_TIME:
      return isSetActualBoardTime();
    case ARR_TIME:
      return isSetArrTime();
    case CREATE_TIME:
      return isSetCreateTime();
    case OPERATE_LOGS:
      return isSetOperateLogs();
    case OPERATOR_NAME:
      return isSetOperatorName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OrderDetailDto)
      return this.equals((OrderDetailDto)that);
    return false;
  }

  public boolean equals(OrderDetailDto that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_code = true && this.isSetCode();
    boolean that_present_code = true && that.isSetCode();
    if (this_present_code || that_present_code) {
      if (!(this_present_code && that_present_code))
        return false;
      if (!this.code.equals(that.code))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_booker = true && this.isSetBooker();
    boolean that_present_booker = true && that.isSetBooker();
    if (this_present_booker || that_present_booker) {
      if (!(this_present_booker && that_present_booker))
        return false;
      if (!this.booker.equals(that.booker))
        return false;
    }

    boolean this_present_passengers = true && this.isSetPassengers();
    boolean that_present_passengers = true && that.isSetPassengers();
    if (this_present_passengers || that_present_passengers) {
      if (!(this_present_passengers && that_present_passengers))
        return false;
      if (!this.passengers.equals(that.passengers))
        return false;
    }

    boolean this_present_aboardPosition = true && this.isSetAboardPosition();
    boolean that_present_aboardPosition = true && that.isSetAboardPosition();
    if (this_present_aboardPosition || that_present_aboardPosition) {
      if (!(this_present_aboardPosition && that_present_aboardPosition))
        return false;
      if (!this.aboardPosition.equals(that.aboardPosition))
        return false;
    }

    boolean this_present_arrPosition = true && this.isSetArrPosition();
    boolean that_present_arrPosition = true && that.isSetArrPosition();
    if (this_present_arrPosition || that_present_arrPosition) {
      if (!(this_present_arrPosition && that_present_arrPosition))
        return false;
      if (!this.arrPosition.equals(that.arrPosition))
        return false;
    }

    boolean this_present_flightNumber = true && this.isSetFlightNumber();
    boolean that_present_flightNumber = true && that.isSetFlightNumber();
    if (this_present_flightNumber || that_present_flightNumber) {
      if (!(this_present_flightNumber && that_present_flightNumber))
        return false;
      if (!this.flightNumber.equals(that.flightNumber))
        return false;
    }

    boolean this_present_flightDepTime = true;
    boolean that_present_flightDepTime = true;
    if (this_present_flightDepTime || that_present_flightDepTime) {
      if (!(this_present_flightDepTime && that_present_flightDepTime))
        return false;
      if (this.flightDepTime != that.flightDepTime)
        return false;
    }

    boolean this_present_vehicle = true && this.isSetVehicle();
    boolean that_present_vehicle = true && that.isSetVehicle();
    if (this_present_vehicle || that_present_vehicle) {
      if (!(this_present_vehicle && that_present_vehicle))
        return false;
      if (!this.vehicle.equals(that.vehicle))
        return false;
    }

    boolean this_present_driver = true && this.isSetDriver();
    boolean that_present_driver = true && that.isSetDriver();
    if (this_present_driver || that_present_driver) {
      if (!(this_present_driver && that_present_driver))
        return false;
      if (!this.driver.equals(that.driver))
        return false;
    }

    boolean this_present_online = true;
    boolean that_present_online = true;
    if (this_present_online || that_present_online) {
      if (!(this_present_online && that_present_online))
        return false;
      if (this.online != that.online)
        return false;
    }

    boolean this_present_voucherCode = true && this.isSetVoucherCode();
    boolean that_present_voucherCode = true && that.isSetVoucherCode();
    if (this_present_voucherCode || that_present_voucherCode) {
      if (!(this_present_voucherCode && that_present_voucherCode))
        return false;
      if (!this.voucherCode.equals(that.voucherCode))
        return false;
    }

    boolean this_present_expectBoardTime = true;
    boolean that_present_expectBoardTime = true;
    if (this_present_expectBoardTime || that_present_expectBoardTime) {
      if (!(this_present_expectBoardTime && that_present_expectBoardTime))
        return false;
      if (this.expectBoardTime != that.expectBoardTime)
        return false;
    }

    boolean this_present_actualBoardTime = true;
    boolean that_present_actualBoardTime = true;
    if (this_present_actualBoardTime || that_present_actualBoardTime) {
      if (!(this_present_actualBoardTime && that_present_actualBoardTime))
        return false;
      if (this.actualBoardTime != that.actualBoardTime)
        return false;
    }

    boolean this_present_arrTime = true;
    boolean that_present_arrTime = true;
    if (this_present_arrTime || that_present_arrTime) {
      if (!(this_present_arrTime && that_present_arrTime))
        return false;
      if (this.arrTime != that.arrTime)
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_operateLogs = true && this.isSetOperateLogs();
    boolean that_present_operateLogs = true && that.isSetOperateLogs();
    if (this_present_operateLogs || that_present_operateLogs) {
      if (!(this_present_operateLogs && that_present_operateLogs))
        return false;
      if (!this.operateLogs.equals(that.operateLogs))
        return false;
    }

    boolean this_present_operatorName = true && this.isSetOperatorName();
    boolean that_present_operatorName = true && that.isSetOperatorName();
    if (this_present_operatorName || that_present_operatorName) {
      if (!(this_present_operatorName && that_present_operatorName))
        return false;
      if (!this.operatorName.equals(that.operatorName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_code = true && (isSetCode());
    list.add(present_code);
    if (present_code)
      list.add(code);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_booker = true && (isSetBooker());
    list.add(present_booker);
    if (present_booker)
      list.add(booker);

    boolean present_passengers = true && (isSetPassengers());
    list.add(present_passengers);
    if (present_passengers)
      list.add(passengers);

    boolean present_aboardPosition = true && (isSetAboardPosition());
    list.add(present_aboardPosition);
    if (present_aboardPosition)
      list.add(aboardPosition);

    boolean present_arrPosition = true && (isSetArrPosition());
    list.add(present_arrPosition);
    if (present_arrPosition)
      list.add(arrPosition);

    boolean present_flightNumber = true && (isSetFlightNumber());
    list.add(present_flightNumber);
    if (present_flightNumber)
      list.add(flightNumber);

    boolean present_flightDepTime = true;
    list.add(present_flightDepTime);
    if (present_flightDepTime)
      list.add(flightDepTime);

    boolean present_vehicle = true && (isSetVehicle());
    list.add(present_vehicle);
    if (present_vehicle)
      list.add(vehicle);

    boolean present_driver = true && (isSetDriver());
    list.add(present_driver);
    if (present_driver)
      list.add(driver);

    boolean present_online = true;
    list.add(present_online);
    if (present_online)
      list.add(online);

    boolean present_voucherCode = true && (isSetVoucherCode());
    list.add(present_voucherCode);
    if (present_voucherCode)
      list.add(voucherCode);

    boolean present_expectBoardTime = true;
    list.add(present_expectBoardTime);
    if (present_expectBoardTime)
      list.add(expectBoardTime);

    boolean present_actualBoardTime = true;
    list.add(present_actualBoardTime);
    if (present_actualBoardTime)
      list.add(actualBoardTime);

    boolean present_arrTime = true;
    list.add(present_arrTime);
    if (present_arrTime)
      list.add(arrTime);

    boolean present_createTime = true;
    list.add(present_createTime);
    if (present_createTime)
      list.add(createTime);

    boolean present_operateLogs = true && (isSetOperateLogs());
    list.add(present_operateLogs);
    if (present_operateLogs)
      list.add(operateLogs);

    boolean present_operatorName = true && (isSetOperatorName());
    list.add(present_operatorName);
    if (present_operatorName)
      list.add(operatorName);

    return list.hashCode();
  }

  @Override
  public int compareTo(OrderDetailDto other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBooker()).compareTo(other.isSetBooker());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBooker()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.booker, other.booker);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassengers()).compareTo(other.isSetPassengers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassengers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passengers, other.passengers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAboardPosition()).compareTo(other.isSetAboardPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAboardPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aboardPosition, other.aboardPosition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArrPosition()).compareTo(other.isSetArrPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArrPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arrPosition, other.arrPosition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlightNumber()).compareTo(other.isSetFlightNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlightNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flightNumber, other.flightNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlightDepTime()).compareTo(other.isSetFlightDepTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlightDepTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flightDepTime, other.flightDepTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVehicle()).compareTo(other.isSetVehicle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVehicle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vehicle, other.vehicle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDriver()).compareTo(other.isSetDriver());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDriver()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.driver, other.driver);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOnline()).compareTo(other.isSetOnline());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOnline()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.online, other.online);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVoucherCode()).compareTo(other.isSetVoucherCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVoucherCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.voucherCode, other.voucherCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpectBoardTime()).compareTo(other.isSetExpectBoardTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpectBoardTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expectBoardTime, other.expectBoardTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActualBoardTime()).compareTo(other.isSetActualBoardTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActualBoardTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actualBoardTime, other.actualBoardTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArrTime()).compareTo(other.isSetArrTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArrTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arrTime, other.arrTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperateLogs()).compareTo(other.isSetOperateLogs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperateLogs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operateLogs, other.operateLogs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperatorName()).compareTo(other.isSetOperatorName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperatorName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operatorName, other.operatorName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OrderDetailDto(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("code:");
    if (this.code == null) {
      sb.append("null");
    } else {
      sb.append(this.code);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("booker:");
    if (this.booker == null) {
      sb.append("null");
    } else {
      sb.append(this.booker);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("passengers:");
    if (this.passengers == null) {
      sb.append("null");
    } else {
      sb.append(this.passengers);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("aboardPosition:");
    if (this.aboardPosition == null) {
      sb.append("null");
    } else {
      sb.append(this.aboardPosition);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("arrPosition:");
    if (this.arrPosition == null) {
      sb.append("null");
    } else {
      sb.append(this.arrPosition);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("flightNumber:");
    if (this.flightNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.flightNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("flightDepTime:");
    sb.append(this.flightDepTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vehicle:");
    if (this.vehicle == null) {
      sb.append("null");
    } else {
      sb.append(this.vehicle);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("driver:");
    if (this.driver == null) {
      sb.append("null");
    } else {
      sb.append(this.driver);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("online:");
    sb.append(this.online);
    first = false;
    if (!first) sb.append(", ");
    sb.append("voucherCode:");
    if (this.voucherCode == null) {
      sb.append("null");
    } else {
      sb.append(this.voucherCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("expectBoardTime:");
    sb.append(this.expectBoardTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("actualBoardTime:");
    sb.append(this.actualBoardTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("arrTime:");
    sb.append(this.arrTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("operateLogs:");
    if (this.operateLogs == null) {
      sb.append("null");
    } else {
      sb.append(this.operateLogs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("operatorName:");
    if (this.operatorName == null) {
      sb.append("null");
    } else {
      sb.append(this.operatorName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (booker != null) {
      booker.validate();
    }
    if (aboardPosition != null) {
      aboardPosition.validate();
    }
    if (arrPosition != null) {
      arrPosition.validate();
    }
    if (vehicle != null) {
      vehicle.validate();
    }
    if (driver != null) {
      driver.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OrderDetailDtoStandardSchemeFactory implements SchemeFactory {
    public OrderDetailDtoStandardScheme getScheme() {
      return new OrderDetailDtoStandardScheme();
    }
  }

  private static class OrderDetailDtoStandardScheme extends StandardScheme<OrderDetailDto> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OrderDetailDto struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.code = iprot.readString();
              struct.setCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BOOKER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.booker = new com.ikamobile.pa.thrift.server.acceptor.UserDto();
              struct.booker.read(iprot);
              struct.setBookerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PASSENGERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.passengers = new ArrayList<PassengerDto>(_list0.size);
                PassengerDto _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new PassengerDto();
                  _elem1.read(iprot);
                  struct.passengers.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setPassengersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ABOARD_POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.aboardPosition = new com.ikamobile.pa.thrift.server.acceptor.PositionDto();
              struct.aboardPosition.read(iprot);
              struct.setAboardPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ARR_POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.arrPosition = new com.ikamobile.pa.thrift.server.acceptor.PositionDto();
              struct.arrPosition.read(iprot);
              struct.setArrPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FLIGHT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.flightNumber = iprot.readString();
              struct.setFlightNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FLIGHT_DEP_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.flightDepTime = iprot.readI64();
              struct.setFlightDepTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // VEHICLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.vehicle = new com.ikamobile.pa.thrift.server.acceptor.VehicleDto();
              struct.vehicle.read(iprot);
              struct.setVehicleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DRIVER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.driver = new com.ikamobile.pa.thrift.server.acceptor.DriverDto();
              struct.driver.read(iprot);
              struct.setDriverIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ONLINE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.online = iprot.readBool();
              struct.setOnlineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // VOUCHER_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.voucherCode = iprot.readString();
              struct.setVoucherCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // EXPECT_BOARD_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.expectBoardTime = iprot.readI64();
              struct.setExpectBoardTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ACTUAL_BOARD_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.actualBoardTime = iprot.readI64();
              struct.setActualBoardTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // ARR_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.arrTime = iprot.readI64();
              struct.setArrTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // OPERATE_LOGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.operateLogs = new ArrayList<com.ikamobile.pa.thrift.common.OperateLogDto>(_list3.size);
                com.ikamobile.pa.thrift.common.OperateLogDto _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = new com.ikamobile.pa.thrift.common.OperateLogDto();
                  _elem4.read(iprot);
                  struct.operateLogs.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setOperateLogsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // OPERATOR_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operatorName = iprot.readString();
              struct.setOperatorNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OrderDetailDto struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.code != null) {
        oprot.writeFieldBegin(CODE_FIELD_DESC);
        oprot.writeString(struct.code);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeString(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.booker != null) {
        oprot.writeFieldBegin(BOOKER_FIELD_DESC);
        struct.booker.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.passengers != null) {
        oprot.writeFieldBegin(PASSENGERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.passengers.size()));
          for (PassengerDto _iter6 : struct.passengers)
          {
            _iter6.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.aboardPosition != null) {
        oprot.writeFieldBegin(ABOARD_POSITION_FIELD_DESC);
        struct.aboardPosition.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.arrPosition != null) {
        oprot.writeFieldBegin(ARR_POSITION_FIELD_DESC);
        struct.arrPosition.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.flightNumber != null) {
        oprot.writeFieldBegin(FLIGHT_NUMBER_FIELD_DESC);
        oprot.writeString(struct.flightNumber);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FLIGHT_DEP_TIME_FIELD_DESC);
      oprot.writeI64(struct.flightDepTime);
      oprot.writeFieldEnd();
      if (struct.vehicle != null) {
        oprot.writeFieldBegin(VEHICLE_FIELD_DESC);
        struct.vehicle.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.driver != null) {
        oprot.writeFieldBegin(DRIVER_FIELD_DESC);
        struct.driver.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ONLINE_FIELD_DESC);
      oprot.writeBool(struct.online);
      oprot.writeFieldEnd();
      if (struct.voucherCode != null) {
        oprot.writeFieldBegin(VOUCHER_CODE_FIELD_DESC);
        oprot.writeString(struct.voucherCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EXPECT_BOARD_TIME_FIELD_DESC);
      oprot.writeI64(struct.expectBoardTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTUAL_BOARD_TIME_FIELD_DESC);
      oprot.writeI64(struct.actualBoardTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ARR_TIME_FIELD_DESC);
      oprot.writeI64(struct.arrTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      if (struct.operateLogs != null) {
        oprot.writeFieldBegin(OPERATE_LOGS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.operateLogs.size()));
          for (com.ikamobile.pa.thrift.common.OperateLogDto _iter7 : struct.operateLogs)
          {
            _iter7.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.operatorName != null) {
        oprot.writeFieldBegin(OPERATOR_NAME_FIELD_DESC);
        oprot.writeString(struct.operatorName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OrderDetailDtoTupleSchemeFactory implements SchemeFactory {
    public OrderDetailDtoTupleScheme getScheme() {
      return new OrderDetailDtoTupleScheme();
    }
  }

  private static class OrderDetailDtoTupleScheme extends TupleScheme<OrderDetailDto> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OrderDetailDto struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetCode()) {
        optionals.set(1);
      }
      if (struct.isSetStatus()) {
        optionals.set(2);
      }
      if (struct.isSetBooker()) {
        optionals.set(3);
      }
      if (struct.isSetPassengers()) {
        optionals.set(4);
      }
      if (struct.isSetAboardPosition()) {
        optionals.set(5);
      }
      if (struct.isSetArrPosition()) {
        optionals.set(6);
      }
      if (struct.isSetFlightNumber()) {
        optionals.set(7);
      }
      if (struct.isSetFlightDepTime()) {
        optionals.set(8);
      }
      if (struct.isSetVehicle()) {
        optionals.set(9);
      }
      if (struct.isSetDriver()) {
        optionals.set(10);
      }
      if (struct.isSetOnline()) {
        optionals.set(11);
      }
      if (struct.isSetVoucherCode()) {
        optionals.set(12);
      }
      if (struct.isSetExpectBoardTime()) {
        optionals.set(13);
      }
      if (struct.isSetActualBoardTime()) {
        optionals.set(14);
      }
      if (struct.isSetArrTime()) {
        optionals.set(15);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(16);
      }
      if (struct.isSetOperateLogs()) {
        optionals.set(17);
      }
      if (struct.isSetOperatorName()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetCode()) {
        oprot.writeString(struct.code);
      }
      if (struct.isSetStatus()) {
        oprot.writeString(struct.status);
      }
      if (struct.isSetBooker()) {
        struct.booker.write(oprot);
      }
      if (struct.isSetPassengers()) {
        {
          oprot.writeI32(struct.passengers.size());
          for (PassengerDto _iter8 : struct.passengers)
          {
            _iter8.write(oprot);
          }
        }
      }
      if (struct.isSetAboardPosition()) {
        struct.aboardPosition.write(oprot);
      }
      if (struct.isSetArrPosition()) {
        struct.arrPosition.write(oprot);
      }
      if (struct.isSetFlightNumber()) {
        oprot.writeString(struct.flightNumber);
      }
      if (struct.isSetFlightDepTime()) {
        oprot.writeI64(struct.flightDepTime);
      }
      if (struct.isSetVehicle()) {
        struct.vehicle.write(oprot);
      }
      if (struct.isSetDriver()) {
        struct.driver.write(oprot);
      }
      if (struct.isSetOnline()) {
        oprot.writeBool(struct.online);
      }
      if (struct.isSetVoucherCode()) {
        oprot.writeString(struct.voucherCode);
      }
      if (struct.isSetExpectBoardTime()) {
        oprot.writeI64(struct.expectBoardTime);
      }
      if (struct.isSetActualBoardTime()) {
        oprot.writeI64(struct.actualBoardTime);
      }
      if (struct.isSetArrTime()) {
        oprot.writeI64(struct.arrTime);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetOperateLogs()) {
        {
          oprot.writeI32(struct.operateLogs.size());
          for (com.ikamobile.pa.thrift.common.OperateLogDto _iter9 : struct.operateLogs)
          {
            _iter9.write(oprot);
          }
        }
      }
      if (struct.isSetOperatorName()) {
        oprot.writeString(struct.operatorName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OrderDetailDto struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.code = iprot.readString();
        struct.setCodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.status = iprot.readString();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(3)) {
        struct.booker = new com.ikamobile.pa.thrift.server.acceptor.UserDto();
        struct.booker.read(iprot);
        struct.setBookerIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.passengers = new ArrayList<PassengerDto>(_list10.size);
          PassengerDto _elem11;
          for (int _i12 = 0; _i12 < _list10.size; ++_i12)
          {
            _elem11 = new PassengerDto();
            _elem11.read(iprot);
            struct.passengers.add(_elem11);
          }
        }
        struct.setPassengersIsSet(true);
      }
      if (incoming.get(5)) {
        struct.aboardPosition = new com.ikamobile.pa.thrift.server.acceptor.PositionDto();
        struct.aboardPosition.read(iprot);
        struct.setAboardPositionIsSet(true);
      }
      if (incoming.get(6)) {
        struct.arrPosition = new com.ikamobile.pa.thrift.server.acceptor.PositionDto();
        struct.arrPosition.read(iprot);
        struct.setArrPositionIsSet(true);
      }
      if (incoming.get(7)) {
        struct.flightNumber = iprot.readString();
        struct.setFlightNumberIsSet(true);
      }
      if (incoming.get(8)) {
        struct.flightDepTime = iprot.readI64();
        struct.setFlightDepTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.vehicle = new com.ikamobile.pa.thrift.server.acceptor.VehicleDto();
        struct.vehicle.read(iprot);
        struct.setVehicleIsSet(true);
      }
      if (incoming.get(10)) {
        struct.driver = new com.ikamobile.pa.thrift.server.acceptor.DriverDto();
        struct.driver.read(iprot);
        struct.setDriverIsSet(true);
      }
      if (incoming.get(11)) {
        struct.online = iprot.readBool();
        struct.setOnlineIsSet(true);
      }
      if (incoming.get(12)) {
        struct.voucherCode = iprot.readString();
        struct.setVoucherCodeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.expectBoardTime = iprot.readI64();
        struct.setExpectBoardTimeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.actualBoardTime = iprot.readI64();
        struct.setActualBoardTimeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.arrTime = iprot.readI64();
        struct.setArrTimeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(17)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.operateLogs = new ArrayList<com.ikamobile.pa.thrift.common.OperateLogDto>(_list13.size);
          com.ikamobile.pa.thrift.common.OperateLogDto _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new com.ikamobile.pa.thrift.common.OperateLogDto();
            _elem14.read(iprot);
            struct.operateLogs.add(_elem14);
          }
        }
        struct.setOperateLogsIsSet(true);
      }
      if (incoming.get(18)) {
        struct.operatorName = iprot.readString();
        struct.setOperatorNameIsSet(true);
      }
    }
  }

}

