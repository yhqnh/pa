/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ikamobile.pa.thrift.server.acceptor;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-7-21")
public class UserDto implements org.apache.thrift.TBase<UserDto, UserDto._Fields>, java.io.Serializable, Cloneable, Comparable<UserDto> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserDto");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PHONE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("phoneNumber", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField WEIXIN_OPEN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("weixinOpenId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DEVICE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceNo", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserDtoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserDtoTupleSchemeFactory());
  }

  public String id; // required
  public String phoneNumber; // required
  public String weixinOpenId; // required
  public String deviceNo; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    PHONE_NUMBER((short)2, "phoneNumber"),
    WEIXIN_OPEN_ID((short)3, "weixinOpenId"),
    DEVICE_NO((short)4, "deviceNo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // PHONE_NUMBER
          return PHONE_NUMBER;
        case 3: // WEIXIN_OPEN_ID
          return WEIXIN_OPEN_ID;
        case 4: // DEVICE_NO
          return DEVICE_NO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("phoneNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WEIXIN_OPEN_ID, new org.apache.thrift.meta_data.FieldMetaData("weixinOpenId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEVICE_NO, new org.apache.thrift.meta_data.FieldMetaData("deviceNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserDto.class, metaDataMap);
  }

  public UserDto() {
  }

  public UserDto(
    String id,
    String phoneNumber,
    String weixinOpenId,
    String deviceNo)
  {
    this();
    this.id = id;
    this.phoneNumber = phoneNumber;
    this.weixinOpenId = weixinOpenId;
    this.deviceNo = deviceNo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserDto(UserDto other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetPhoneNumber()) {
      this.phoneNumber = other.phoneNumber;
    }
    if (other.isSetWeixinOpenId()) {
      this.weixinOpenId = other.weixinOpenId;
    }
    if (other.isSetDeviceNo()) {
      this.deviceNo = other.deviceNo;
    }
  }

  public UserDto deepCopy() {
    return new UserDto(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.phoneNumber = null;
    this.weixinOpenId = null;
    this.deviceNo = null;
  }

  public String getId() {
    return this.id;
  }

  public UserDto setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getPhoneNumber() {
    return this.phoneNumber;
  }

  public UserDto setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  public void unsetPhoneNumber() {
    this.phoneNumber = null;
  }

  /** Returns true if field phoneNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetPhoneNumber() {
    return this.phoneNumber != null;
  }

  public void setPhoneNumberIsSet(boolean value) {
    if (!value) {
      this.phoneNumber = null;
    }
  }

  public String getWeixinOpenId() {
    return this.weixinOpenId;
  }

  public UserDto setWeixinOpenId(String weixinOpenId) {
    this.weixinOpenId = weixinOpenId;
    return this;
  }

  public void unsetWeixinOpenId() {
    this.weixinOpenId = null;
  }

  /** Returns true if field weixinOpenId is set (has been assigned a value) and false otherwise */
  public boolean isSetWeixinOpenId() {
    return this.weixinOpenId != null;
  }

  public void setWeixinOpenIdIsSet(boolean value) {
    if (!value) {
      this.weixinOpenId = null;
    }
  }

  public String getDeviceNo() {
    return this.deviceNo;
  }

  public UserDto setDeviceNo(String deviceNo) {
    this.deviceNo = deviceNo;
    return this;
  }

  public void unsetDeviceNo() {
    this.deviceNo = null;
  }

  /** Returns true if field deviceNo is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceNo() {
    return this.deviceNo != null;
  }

  public void setDeviceNoIsSet(boolean value) {
    if (!value) {
      this.deviceNo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case PHONE_NUMBER:
      if (value == null) {
        unsetPhoneNumber();
      } else {
        setPhoneNumber((String)value);
      }
      break;

    case WEIXIN_OPEN_ID:
      if (value == null) {
        unsetWeixinOpenId();
      } else {
        setWeixinOpenId((String)value);
      }
      break;

    case DEVICE_NO:
      if (value == null) {
        unsetDeviceNo();
      } else {
        setDeviceNo((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case PHONE_NUMBER:
      return getPhoneNumber();

    case WEIXIN_OPEN_ID:
      return getWeixinOpenId();

    case DEVICE_NO:
      return getDeviceNo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case PHONE_NUMBER:
      return isSetPhoneNumber();
    case WEIXIN_OPEN_ID:
      return isSetWeixinOpenId();
    case DEVICE_NO:
      return isSetDeviceNo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserDto)
      return this.equals((UserDto)that);
    return false;
  }

  public boolean equals(UserDto that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_phoneNumber = true && this.isSetPhoneNumber();
    boolean that_present_phoneNumber = true && that.isSetPhoneNumber();
    if (this_present_phoneNumber || that_present_phoneNumber) {
      if (!(this_present_phoneNumber && that_present_phoneNumber))
        return false;
      if (!this.phoneNumber.equals(that.phoneNumber))
        return false;
    }

    boolean this_present_weixinOpenId = true && this.isSetWeixinOpenId();
    boolean that_present_weixinOpenId = true && that.isSetWeixinOpenId();
    if (this_present_weixinOpenId || that_present_weixinOpenId) {
      if (!(this_present_weixinOpenId && that_present_weixinOpenId))
        return false;
      if (!this.weixinOpenId.equals(that.weixinOpenId))
        return false;
    }

    boolean this_present_deviceNo = true && this.isSetDeviceNo();
    boolean that_present_deviceNo = true && that.isSetDeviceNo();
    if (this_present_deviceNo || that_present_deviceNo) {
      if (!(this_present_deviceNo && that_present_deviceNo))
        return false;
      if (!this.deviceNo.equals(that.deviceNo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_phoneNumber = true && (isSetPhoneNumber());
    list.add(present_phoneNumber);
    if (present_phoneNumber)
      list.add(phoneNumber);

    boolean present_weixinOpenId = true && (isSetWeixinOpenId());
    list.add(present_weixinOpenId);
    if (present_weixinOpenId)
      list.add(weixinOpenId);

    boolean present_deviceNo = true && (isSetDeviceNo());
    list.add(present_deviceNo);
    if (present_deviceNo)
      list.add(deviceNo);

    return list.hashCode();
  }

  @Override
  public int compareTo(UserDto other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhoneNumber()).compareTo(other.isSetPhoneNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhoneNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phoneNumber, other.phoneNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWeixinOpenId()).compareTo(other.isSetWeixinOpenId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWeixinOpenId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weixinOpenId, other.weixinOpenId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeviceNo()).compareTo(other.isSetDeviceNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceNo, other.deviceNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserDto(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("phoneNumber:");
    if (this.phoneNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.phoneNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("weixinOpenId:");
    if (this.weixinOpenId == null) {
      sb.append("null");
    } else {
      sb.append(this.weixinOpenId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("deviceNo:");
    if (this.deviceNo == null) {
      sb.append("null");
    } else {
      sb.append(this.deviceNo);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserDtoStandardSchemeFactory implements SchemeFactory {
    public UserDtoStandardScheme getScheme() {
      return new UserDtoStandardScheme();
    }
  }

  private static class UserDtoStandardScheme extends StandardScheme<UserDto> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserDto struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PHONE_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phoneNumber = iprot.readString();
              struct.setPhoneNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // WEIXIN_OPEN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.weixinOpenId = iprot.readString();
              struct.setWeixinOpenIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DEVICE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.deviceNo = iprot.readString();
              struct.setDeviceNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserDto struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.phoneNumber != null) {
        oprot.writeFieldBegin(PHONE_NUMBER_FIELD_DESC);
        oprot.writeString(struct.phoneNumber);
        oprot.writeFieldEnd();
      }
      if (struct.weixinOpenId != null) {
        oprot.writeFieldBegin(WEIXIN_OPEN_ID_FIELD_DESC);
        oprot.writeString(struct.weixinOpenId);
        oprot.writeFieldEnd();
      }
      if (struct.deviceNo != null) {
        oprot.writeFieldBegin(DEVICE_NO_FIELD_DESC);
        oprot.writeString(struct.deviceNo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserDtoTupleSchemeFactory implements SchemeFactory {
    public UserDtoTupleScheme getScheme() {
      return new UserDtoTupleScheme();
    }
  }

  private static class UserDtoTupleScheme extends TupleScheme<UserDto> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserDto struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetPhoneNumber()) {
        optionals.set(1);
      }
      if (struct.isSetWeixinOpenId()) {
        optionals.set(2);
      }
      if (struct.isSetDeviceNo()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetPhoneNumber()) {
        oprot.writeString(struct.phoneNumber);
      }
      if (struct.isSetWeixinOpenId()) {
        oprot.writeString(struct.weixinOpenId);
      }
      if (struct.isSetDeviceNo()) {
        oprot.writeString(struct.deviceNo);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserDto struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.phoneNumber = iprot.readString();
        struct.setPhoneNumberIsSet(true);
      }
      if (incoming.get(2)) {
        struct.weixinOpenId = iprot.readString();
        struct.setWeixinOpenIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.deviceNo = iprot.readString();
        struct.setDeviceNoIsSet(true);
      }
    }
  }

}

