/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ikamobile.pa.thrift.server.acceptor;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-8-16")
public class TaskListDto implements org.apache.thrift.TBase<TaskListDto, TaskListDto._Fields>, java.io.Serializable, Cloneable, Comparable<TaskListDto> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TaskListDto");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ORDER_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("orderCount", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PASSAGE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("passageCount", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField EARLIEST_FLIGHT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("earliestFlightTime", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField FINISH_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("finishTime", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField VEHICLE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("vehicleNo", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField VEHICLE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("vehicleId", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField DRIVER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("driverName", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField DRIVER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("driverId", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField DRIVER_TEL_FIELD_DESC = new org.apache.thrift.protocol.TField("driverTel", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField DRIVER_OTHER_TEL_FIELD_DESC = new org.apache.thrift.protocol.TField("driverOtherTel", org.apache.thrift.protocol.TType.STRING, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TaskListDtoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TaskListDtoTupleSchemeFactory());
  }

  /**
   * id
   */
  public String id; // required
  /**
   * code
   */
  public String code; // required
  /**
   * 状态
   */
  public String status; // required
  /**
   * 订单数量
   */
  public int orderCount; // required
  /**
   * 人员数量
   */
  public int passageCount; // required
  /**
   * 最早起飞时间
   */
  public long earliestFlightTime; // required
  /**
   * 任务开始时间
   */
  public long startTime; // required
  /**
   * 完成时间
   */
  public long finishTime; // required
  /**
   * 车牌号码
   */
  public String vehicleNo; // required
  /**
   * 车辆ID
   */
  public String vehicleId; // required
  /**
   * 司机名称
   */
  public String driverName; // required
  /**
   * 司机ID
   */
  public String driverId; // required
  /**
   * 司机联系电话
   */
  public String driverTel; // required
  /**
   * 司机其他联系电话
   */
  public String driverOtherTel; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * id
     */
    ID((short)1, "id"),
    /**
     * code
     */
    CODE((short)2, "code"),
    /**
     * 状态
     */
    STATUS((short)3, "status"),
    /**
     * 订单数量
     */
    ORDER_COUNT((short)4, "orderCount"),
    /**
     * 人员数量
     */
    PASSAGE_COUNT((short)5, "passageCount"),
    /**
     * 最早起飞时间
     */
    EARLIEST_FLIGHT_TIME((short)6, "earliestFlightTime"),
    /**
     * 任务开始时间
     */
    START_TIME((short)7, "startTime"),
    /**
     * 完成时间
     */
    FINISH_TIME((short)8, "finishTime"),
    /**
     * 车牌号码
     */
    VEHICLE_NO((short)9, "vehicleNo"),
    /**
     * 车辆ID
     */
    VEHICLE_ID((short)10, "vehicleId"),
    /**
     * 司机名称
     */
    DRIVER_NAME((short)11, "driverName"),
    /**
     * 司机ID
     */
    DRIVER_ID((short)12, "driverId"),
    /**
     * 司机联系电话
     */
    DRIVER_TEL((short)13, "driverTel"),
    /**
     * 司机其他联系电话
     */
    DRIVER_OTHER_TEL((short)14, "driverOtherTel");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // CODE
          return CODE;
        case 3: // STATUS
          return STATUS;
        case 4: // ORDER_COUNT
          return ORDER_COUNT;
        case 5: // PASSAGE_COUNT
          return PASSAGE_COUNT;
        case 6: // EARLIEST_FLIGHT_TIME
          return EARLIEST_FLIGHT_TIME;
        case 7: // START_TIME
          return START_TIME;
        case 8: // FINISH_TIME
          return FINISH_TIME;
        case 9: // VEHICLE_NO
          return VEHICLE_NO;
        case 10: // VEHICLE_ID
          return VEHICLE_ID;
        case 11: // DRIVER_NAME
          return DRIVER_NAME;
        case 12: // DRIVER_ID
          return DRIVER_ID;
        case 13: // DRIVER_TEL
          return DRIVER_TEL;
        case 14: // DRIVER_OTHER_TEL
          return DRIVER_OTHER_TEL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ORDERCOUNT_ISSET_ID = 0;
  private static final int __PASSAGECOUNT_ISSET_ID = 1;
  private static final int __EARLIESTFLIGHTTIME_ISSET_ID = 2;
  private static final int __STARTTIME_ISSET_ID = 3;
  private static final int __FINISHTIME_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_COUNT, new org.apache.thrift.meta_data.FieldMetaData("orderCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PASSAGE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("passageCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EARLIEST_FLIGHT_TIME, new org.apache.thrift.meta_data.FieldMetaData("earliestFlightTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FINISH_TIME, new org.apache.thrift.meta_data.FieldMetaData("finishTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VEHICLE_NO, new org.apache.thrift.meta_data.FieldMetaData("vehicleNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VEHICLE_ID, new org.apache.thrift.meta_data.FieldMetaData("vehicleId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DRIVER_NAME, new org.apache.thrift.meta_data.FieldMetaData("driverName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DRIVER_ID, new org.apache.thrift.meta_data.FieldMetaData("driverId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DRIVER_TEL, new org.apache.thrift.meta_data.FieldMetaData("driverTel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DRIVER_OTHER_TEL, new org.apache.thrift.meta_data.FieldMetaData("driverOtherTel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TaskListDto.class, metaDataMap);
  }

  public TaskListDto() {
  }

  public TaskListDto(
    String id,
    String code,
    String status,
    int orderCount,
    int passageCount,
    long earliestFlightTime,
    long startTime,
    long finishTime,
    String vehicleNo,
    String vehicleId,
    String driverName,
    String driverId,
    String driverTel,
    String driverOtherTel)
  {
    this();
    this.id = id;
    this.code = code;
    this.status = status;
    this.orderCount = orderCount;
    setOrderCountIsSet(true);
    this.passageCount = passageCount;
    setPassageCountIsSet(true);
    this.earliestFlightTime = earliestFlightTime;
    setEarliestFlightTimeIsSet(true);
    this.startTime = startTime;
    setStartTimeIsSet(true);
    this.finishTime = finishTime;
    setFinishTimeIsSet(true);
    this.vehicleNo = vehicleNo;
    this.vehicleId = vehicleId;
    this.driverName = driverName;
    this.driverId = driverId;
    this.driverTel = driverTel;
    this.driverOtherTel = driverOtherTel;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TaskListDto(TaskListDto other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetCode()) {
      this.code = other.code;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    this.orderCount = other.orderCount;
    this.passageCount = other.passageCount;
    this.earliestFlightTime = other.earliestFlightTime;
    this.startTime = other.startTime;
    this.finishTime = other.finishTime;
    if (other.isSetVehicleNo()) {
      this.vehicleNo = other.vehicleNo;
    }
    if (other.isSetVehicleId()) {
      this.vehicleId = other.vehicleId;
    }
    if (other.isSetDriverName()) {
      this.driverName = other.driverName;
    }
    if (other.isSetDriverId()) {
      this.driverId = other.driverId;
    }
    if (other.isSetDriverTel()) {
      this.driverTel = other.driverTel;
    }
    if (other.isSetDriverOtherTel()) {
      this.driverOtherTel = other.driverOtherTel;
    }
  }

  public TaskListDto deepCopy() {
    return new TaskListDto(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.code = null;
    this.status = null;
    setOrderCountIsSet(false);
    this.orderCount = 0;
    setPassageCountIsSet(false);
    this.passageCount = 0;
    setEarliestFlightTimeIsSet(false);
    this.earliestFlightTime = 0;
    setStartTimeIsSet(false);
    this.startTime = 0;
    setFinishTimeIsSet(false);
    this.finishTime = 0;
    this.vehicleNo = null;
    this.vehicleId = null;
    this.driverName = null;
    this.driverId = null;
    this.driverTel = null;
    this.driverOtherTel = null;
  }

  /**
   * id
   */
  public String getId() {
    return this.id;
  }

  /**
   * id
   */
  public TaskListDto setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * code
   */
  public String getCode() {
    return this.code;
  }

  /**
   * code
   */
  public TaskListDto setCode(String code) {
    this.code = code;
    return this;
  }

  public void unsetCode() {
    this.code = null;
  }

  /** Returns true if field code is set (has been assigned a value) and false otherwise */
  public boolean isSetCode() {
    return this.code != null;
  }

  public void setCodeIsSet(boolean value) {
    if (!value) {
      this.code = null;
    }
  }

  /**
   * 状态
   */
  public String getStatus() {
    return this.status;
  }

  /**
   * 状态
   */
  public TaskListDto setStatus(String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  /**
   * 订单数量
   */
  public int getOrderCount() {
    return this.orderCount;
  }

  /**
   * 订单数量
   */
  public TaskListDto setOrderCount(int orderCount) {
    this.orderCount = orderCount;
    setOrderCountIsSet(true);
    return this;
  }

  public void unsetOrderCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERCOUNT_ISSET_ID);
  }

  /** Returns true if field orderCount is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderCount() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERCOUNT_ISSET_ID);
  }

  public void setOrderCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERCOUNT_ISSET_ID, value);
  }

  /**
   * 人员数量
   */
  public int getPassageCount() {
    return this.passageCount;
  }

  /**
   * 人员数量
   */
  public TaskListDto setPassageCount(int passageCount) {
    this.passageCount = passageCount;
    setPassageCountIsSet(true);
    return this;
  }

  public void unsetPassageCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PASSAGECOUNT_ISSET_ID);
  }

  /** Returns true if field passageCount is set (has been assigned a value) and false otherwise */
  public boolean isSetPassageCount() {
    return EncodingUtils.testBit(__isset_bitfield, __PASSAGECOUNT_ISSET_ID);
  }

  public void setPassageCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PASSAGECOUNT_ISSET_ID, value);
  }

  /**
   * 最早起飞时间
   */
  public long getEarliestFlightTime() {
    return this.earliestFlightTime;
  }

  /**
   * 最早起飞时间
   */
  public TaskListDto setEarliestFlightTime(long earliestFlightTime) {
    this.earliestFlightTime = earliestFlightTime;
    setEarliestFlightTimeIsSet(true);
    return this;
  }

  public void unsetEarliestFlightTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EARLIESTFLIGHTTIME_ISSET_ID);
  }

  /** Returns true if field earliestFlightTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEarliestFlightTime() {
    return EncodingUtils.testBit(__isset_bitfield, __EARLIESTFLIGHTTIME_ISSET_ID);
  }

  public void setEarliestFlightTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EARLIESTFLIGHTTIME_ISSET_ID, value);
  }

  /**
   * 任务开始时间
   */
  public long getStartTime() {
    return this.startTime;
  }

  /**
   * 任务开始时间
   */
  public TaskListDto setStartTime(long startTime) {
    this.startTime = startTime;
    setStartTimeIsSet(true);
    return this;
  }

  public void unsetStartTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  public void setStartTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
  }

  /**
   * 完成时间
   */
  public long getFinishTime() {
    return this.finishTime;
  }

  /**
   * 完成时间
   */
  public TaskListDto setFinishTime(long finishTime) {
    this.finishTime = finishTime;
    setFinishTimeIsSet(true);
    return this;
  }

  public void unsetFinishTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FINISHTIME_ISSET_ID);
  }

  /** Returns true if field finishTime is set (has been assigned a value) and false otherwise */
  public boolean isSetFinishTime() {
    return EncodingUtils.testBit(__isset_bitfield, __FINISHTIME_ISSET_ID);
  }

  public void setFinishTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FINISHTIME_ISSET_ID, value);
  }

  /**
   * 车牌号码
   */
  public String getVehicleNo() {
    return this.vehicleNo;
  }

  /**
   * 车牌号码
   */
  public TaskListDto setVehicleNo(String vehicleNo) {
    this.vehicleNo = vehicleNo;
    return this;
  }

  public void unsetVehicleNo() {
    this.vehicleNo = null;
  }

  /** Returns true if field vehicleNo is set (has been assigned a value) and false otherwise */
  public boolean isSetVehicleNo() {
    return this.vehicleNo != null;
  }

  public void setVehicleNoIsSet(boolean value) {
    if (!value) {
      this.vehicleNo = null;
    }
  }

  /**
   * 车辆ID
   */
  public String getVehicleId() {
    return this.vehicleId;
  }

  /**
   * 车辆ID
   */
  public TaskListDto setVehicleId(String vehicleId) {
    this.vehicleId = vehicleId;
    return this;
  }

  public void unsetVehicleId() {
    this.vehicleId = null;
  }

  /** Returns true if field vehicleId is set (has been assigned a value) and false otherwise */
  public boolean isSetVehicleId() {
    return this.vehicleId != null;
  }

  public void setVehicleIdIsSet(boolean value) {
    if (!value) {
      this.vehicleId = null;
    }
  }

  /**
   * 司机名称
   */
  public String getDriverName() {
    return this.driverName;
  }

  /**
   * 司机名称
   */
  public TaskListDto setDriverName(String driverName) {
    this.driverName = driverName;
    return this;
  }

  public void unsetDriverName() {
    this.driverName = null;
  }

  /** Returns true if field driverName is set (has been assigned a value) and false otherwise */
  public boolean isSetDriverName() {
    return this.driverName != null;
  }

  public void setDriverNameIsSet(boolean value) {
    if (!value) {
      this.driverName = null;
    }
  }

  /**
   * 司机ID
   */
  public String getDriverId() {
    return this.driverId;
  }

  /**
   * 司机ID
   */
  public TaskListDto setDriverId(String driverId) {
    this.driverId = driverId;
    return this;
  }

  public void unsetDriverId() {
    this.driverId = null;
  }

  /** Returns true if field driverId is set (has been assigned a value) and false otherwise */
  public boolean isSetDriverId() {
    return this.driverId != null;
  }

  public void setDriverIdIsSet(boolean value) {
    if (!value) {
      this.driverId = null;
    }
  }

  /**
   * 司机联系电话
   */
  public String getDriverTel() {
    return this.driverTel;
  }

  /**
   * 司机联系电话
   */
  public TaskListDto setDriverTel(String driverTel) {
    this.driverTel = driverTel;
    return this;
  }

  public void unsetDriverTel() {
    this.driverTel = null;
  }

  /** Returns true if field driverTel is set (has been assigned a value) and false otherwise */
  public boolean isSetDriverTel() {
    return this.driverTel != null;
  }

  public void setDriverTelIsSet(boolean value) {
    if (!value) {
      this.driverTel = null;
    }
  }

  /**
   * 司机其他联系电话
   */
  public String getDriverOtherTel() {
    return this.driverOtherTel;
  }

  /**
   * 司机其他联系电话
   */
  public TaskListDto setDriverOtherTel(String driverOtherTel) {
    this.driverOtherTel = driverOtherTel;
    return this;
  }

  public void unsetDriverOtherTel() {
    this.driverOtherTel = null;
  }

  /** Returns true if field driverOtherTel is set (has been assigned a value) and false otherwise */
  public boolean isSetDriverOtherTel() {
    return this.driverOtherTel != null;
  }

  public void setDriverOtherTelIsSet(boolean value) {
    if (!value) {
      this.driverOtherTel = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case CODE:
      if (value == null) {
        unsetCode();
      } else {
        setCode((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((String)value);
      }
      break;

    case ORDER_COUNT:
      if (value == null) {
        unsetOrderCount();
      } else {
        setOrderCount((Integer)value);
      }
      break;

    case PASSAGE_COUNT:
      if (value == null) {
        unsetPassageCount();
      } else {
        setPassageCount((Integer)value);
      }
      break;

    case EARLIEST_FLIGHT_TIME:
      if (value == null) {
        unsetEarliestFlightTime();
      } else {
        setEarliestFlightTime((Long)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((Long)value);
      }
      break;

    case FINISH_TIME:
      if (value == null) {
        unsetFinishTime();
      } else {
        setFinishTime((Long)value);
      }
      break;

    case VEHICLE_NO:
      if (value == null) {
        unsetVehicleNo();
      } else {
        setVehicleNo((String)value);
      }
      break;

    case VEHICLE_ID:
      if (value == null) {
        unsetVehicleId();
      } else {
        setVehicleId((String)value);
      }
      break;

    case DRIVER_NAME:
      if (value == null) {
        unsetDriverName();
      } else {
        setDriverName((String)value);
      }
      break;

    case DRIVER_ID:
      if (value == null) {
        unsetDriverId();
      } else {
        setDriverId((String)value);
      }
      break;

    case DRIVER_TEL:
      if (value == null) {
        unsetDriverTel();
      } else {
        setDriverTel((String)value);
      }
      break;

    case DRIVER_OTHER_TEL:
      if (value == null) {
        unsetDriverOtherTel();
      } else {
        setDriverOtherTel((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case CODE:
      return getCode();

    case STATUS:
      return getStatus();

    case ORDER_COUNT:
      return Integer.valueOf(getOrderCount());

    case PASSAGE_COUNT:
      return Integer.valueOf(getPassageCount());

    case EARLIEST_FLIGHT_TIME:
      return Long.valueOf(getEarliestFlightTime());

    case START_TIME:
      return Long.valueOf(getStartTime());

    case FINISH_TIME:
      return Long.valueOf(getFinishTime());

    case VEHICLE_NO:
      return getVehicleNo();

    case VEHICLE_ID:
      return getVehicleId();

    case DRIVER_NAME:
      return getDriverName();

    case DRIVER_ID:
      return getDriverId();

    case DRIVER_TEL:
      return getDriverTel();

    case DRIVER_OTHER_TEL:
      return getDriverOtherTel();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case CODE:
      return isSetCode();
    case STATUS:
      return isSetStatus();
    case ORDER_COUNT:
      return isSetOrderCount();
    case PASSAGE_COUNT:
      return isSetPassageCount();
    case EARLIEST_FLIGHT_TIME:
      return isSetEarliestFlightTime();
    case START_TIME:
      return isSetStartTime();
    case FINISH_TIME:
      return isSetFinishTime();
    case VEHICLE_NO:
      return isSetVehicleNo();
    case VEHICLE_ID:
      return isSetVehicleId();
    case DRIVER_NAME:
      return isSetDriverName();
    case DRIVER_ID:
      return isSetDriverId();
    case DRIVER_TEL:
      return isSetDriverTel();
    case DRIVER_OTHER_TEL:
      return isSetDriverOtherTel();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TaskListDto)
      return this.equals((TaskListDto)that);
    return false;
  }

  public boolean equals(TaskListDto that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_code = true && this.isSetCode();
    boolean that_present_code = true && that.isSetCode();
    if (this_present_code || that_present_code) {
      if (!(this_present_code && that_present_code))
        return false;
      if (!this.code.equals(that.code))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_orderCount = true;
    boolean that_present_orderCount = true;
    if (this_present_orderCount || that_present_orderCount) {
      if (!(this_present_orderCount && that_present_orderCount))
        return false;
      if (this.orderCount != that.orderCount)
        return false;
    }

    boolean this_present_passageCount = true;
    boolean that_present_passageCount = true;
    if (this_present_passageCount || that_present_passageCount) {
      if (!(this_present_passageCount && that_present_passageCount))
        return false;
      if (this.passageCount != that.passageCount)
        return false;
    }

    boolean this_present_earliestFlightTime = true;
    boolean that_present_earliestFlightTime = true;
    if (this_present_earliestFlightTime || that_present_earliestFlightTime) {
      if (!(this_present_earliestFlightTime && that_present_earliestFlightTime))
        return false;
      if (this.earliestFlightTime != that.earliestFlightTime)
        return false;
    }

    boolean this_present_startTime = true;
    boolean that_present_startTime = true;
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (this.startTime != that.startTime)
        return false;
    }

    boolean this_present_finishTime = true;
    boolean that_present_finishTime = true;
    if (this_present_finishTime || that_present_finishTime) {
      if (!(this_present_finishTime && that_present_finishTime))
        return false;
      if (this.finishTime != that.finishTime)
        return false;
    }

    boolean this_present_vehicleNo = true && this.isSetVehicleNo();
    boolean that_present_vehicleNo = true && that.isSetVehicleNo();
    if (this_present_vehicleNo || that_present_vehicleNo) {
      if (!(this_present_vehicleNo && that_present_vehicleNo))
        return false;
      if (!this.vehicleNo.equals(that.vehicleNo))
        return false;
    }

    boolean this_present_vehicleId = true && this.isSetVehicleId();
    boolean that_present_vehicleId = true && that.isSetVehicleId();
    if (this_present_vehicleId || that_present_vehicleId) {
      if (!(this_present_vehicleId && that_present_vehicleId))
        return false;
      if (!this.vehicleId.equals(that.vehicleId))
        return false;
    }

    boolean this_present_driverName = true && this.isSetDriverName();
    boolean that_present_driverName = true && that.isSetDriverName();
    if (this_present_driverName || that_present_driverName) {
      if (!(this_present_driverName && that_present_driverName))
        return false;
      if (!this.driverName.equals(that.driverName))
        return false;
    }

    boolean this_present_driverId = true && this.isSetDriverId();
    boolean that_present_driverId = true && that.isSetDriverId();
    if (this_present_driverId || that_present_driverId) {
      if (!(this_present_driverId && that_present_driverId))
        return false;
      if (!this.driverId.equals(that.driverId))
        return false;
    }

    boolean this_present_driverTel = true && this.isSetDriverTel();
    boolean that_present_driverTel = true && that.isSetDriverTel();
    if (this_present_driverTel || that_present_driverTel) {
      if (!(this_present_driverTel && that_present_driverTel))
        return false;
      if (!this.driverTel.equals(that.driverTel))
        return false;
    }

    boolean this_present_driverOtherTel = true && this.isSetDriverOtherTel();
    boolean that_present_driverOtherTel = true && that.isSetDriverOtherTel();
    if (this_present_driverOtherTel || that_present_driverOtherTel) {
      if (!(this_present_driverOtherTel && that_present_driverOtherTel))
        return false;
      if (!this.driverOtherTel.equals(that.driverOtherTel))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_code = true && (isSetCode());
    list.add(present_code);
    if (present_code)
      list.add(code);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_orderCount = true;
    list.add(present_orderCount);
    if (present_orderCount)
      list.add(orderCount);

    boolean present_passageCount = true;
    list.add(present_passageCount);
    if (present_passageCount)
      list.add(passageCount);

    boolean present_earliestFlightTime = true;
    list.add(present_earliestFlightTime);
    if (present_earliestFlightTime)
      list.add(earliestFlightTime);

    boolean present_startTime = true;
    list.add(present_startTime);
    if (present_startTime)
      list.add(startTime);

    boolean present_finishTime = true;
    list.add(present_finishTime);
    if (present_finishTime)
      list.add(finishTime);

    boolean present_vehicleNo = true && (isSetVehicleNo());
    list.add(present_vehicleNo);
    if (present_vehicleNo)
      list.add(vehicleNo);

    boolean present_vehicleId = true && (isSetVehicleId());
    list.add(present_vehicleId);
    if (present_vehicleId)
      list.add(vehicleId);

    boolean present_driverName = true && (isSetDriverName());
    list.add(present_driverName);
    if (present_driverName)
      list.add(driverName);

    boolean present_driverId = true && (isSetDriverId());
    list.add(present_driverId);
    if (present_driverId)
      list.add(driverId);

    boolean present_driverTel = true && (isSetDriverTel());
    list.add(present_driverTel);
    if (present_driverTel)
      list.add(driverTel);

    boolean present_driverOtherTel = true && (isSetDriverOtherTel());
    list.add(present_driverOtherTel);
    if (present_driverOtherTel)
      list.add(driverOtherTel);

    return list.hashCode();
  }

  @Override
  public int compareTo(TaskListDto other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderCount()).compareTo(other.isSetOrderCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderCount, other.orderCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassageCount()).compareTo(other.isSetPassageCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassageCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passageCount, other.passageCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEarliestFlightTime()).compareTo(other.isSetEarliestFlightTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEarliestFlightTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.earliestFlightTime, other.earliestFlightTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFinishTime()).compareTo(other.isSetFinishTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinishTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finishTime, other.finishTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVehicleNo()).compareTo(other.isSetVehicleNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVehicleNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vehicleNo, other.vehicleNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVehicleId()).compareTo(other.isSetVehicleId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVehicleId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vehicleId, other.vehicleId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDriverName()).compareTo(other.isSetDriverName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDriverName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.driverName, other.driverName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDriverId()).compareTo(other.isSetDriverId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDriverId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.driverId, other.driverId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDriverTel()).compareTo(other.isSetDriverTel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDriverTel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.driverTel, other.driverTel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDriverOtherTel()).compareTo(other.isSetDriverOtherTel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDriverOtherTel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.driverOtherTel, other.driverOtherTel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TaskListDto(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("code:");
    if (this.code == null) {
      sb.append("null");
    } else {
      sb.append(this.code);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderCount:");
    sb.append(this.orderCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("passageCount:");
    sb.append(this.passageCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("earliestFlightTime:");
    sb.append(this.earliestFlightTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    sb.append(this.startTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("finishTime:");
    sb.append(this.finishTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vehicleNo:");
    if (this.vehicleNo == null) {
      sb.append("null");
    } else {
      sb.append(this.vehicleNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("vehicleId:");
    if (this.vehicleId == null) {
      sb.append("null");
    } else {
      sb.append(this.vehicleId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("driverName:");
    if (this.driverName == null) {
      sb.append("null");
    } else {
      sb.append(this.driverName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("driverId:");
    if (this.driverId == null) {
      sb.append("null");
    } else {
      sb.append(this.driverId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("driverTel:");
    if (this.driverTel == null) {
      sb.append("null");
    } else {
      sb.append(this.driverTel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("driverOtherTel:");
    if (this.driverOtherTel == null) {
      sb.append("null");
    } else {
      sb.append(this.driverOtherTel);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TaskListDtoStandardSchemeFactory implements SchemeFactory {
    public TaskListDtoStandardScheme getScheme() {
      return new TaskListDtoStandardScheme();
    }
  }

  private static class TaskListDtoStandardScheme extends StandardScheme<TaskListDto> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TaskListDto struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.code = iprot.readString();
              struct.setCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ORDER_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderCount = iprot.readI32();
              struct.setOrderCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PASSAGE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.passageCount = iprot.readI32();
              struct.setPassageCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EARLIEST_FLIGHT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.earliestFlightTime = iprot.readI64();
              struct.setEarliestFlightTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startTime = iprot.readI64();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FINISH_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.finishTime = iprot.readI64();
              struct.setFinishTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // VEHICLE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vehicleNo = iprot.readString();
              struct.setVehicleNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // VEHICLE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vehicleId = iprot.readString();
              struct.setVehicleIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DRIVER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.driverName = iprot.readString();
              struct.setDriverNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DRIVER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.driverId = iprot.readString();
              struct.setDriverIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DRIVER_TEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.driverTel = iprot.readString();
              struct.setDriverTelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // DRIVER_OTHER_TEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.driverOtherTel = iprot.readString();
              struct.setDriverOtherTelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TaskListDto struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.code != null) {
        oprot.writeFieldBegin(CODE_FIELD_DESC);
        oprot.writeString(struct.code);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeString(struct.status);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ORDER_COUNT_FIELD_DESC);
      oprot.writeI32(struct.orderCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PASSAGE_COUNT_FIELD_DESC);
      oprot.writeI32(struct.passageCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EARLIEST_FLIGHT_TIME_FIELD_DESC);
      oprot.writeI64(struct.earliestFlightTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_TIME_FIELD_DESC);
      oprot.writeI64(struct.startTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FINISH_TIME_FIELD_DESC);
      oprot.writeI64(struct.finishTime);
      oprot.writeFieldEnd();
      if (struct.vehicleNo != null) {
        oprot.writeFieldBegin(VEHICLE_NO_FIELD_DESC);
        oprot.writeString(struct.vehicleNo);
        oprot.writeFieldEnd();
      }
      if (struct.vehicleId != null) {
        oprot.writeFieldBegin(VEHICLE_ID_FIELD_DESC);
        oprot.writeString(struct.vehicleId);
        oprot.writeFieldEnd();
      }
      if (struct.driverName != null) {
        oprot.writeFieldBegin(DRIVER_NAME_FIELD_DESC);
        oprot.writeString(struct.driverName);
        oprot.writeFieldEnd();
      }
      if (struct.driverId != null) {
        oprot.writeFieldBegin(DRIVER_ID_FIELD_DESC);
        oprot.writeString(struct.driverId);
        oprot.writeFieldEnd();
      }
      if (struct.driverTel != null) {
        oprot.writeFieldBegin(DRIVER_TEL_FIELD_DESC);
        oprot.writeString(struct.driverTel);
        oprot.writeFieldEnd();
      }
      if (struct.driverOtherTel != null) {
        oprot.writeFieldBegin(DRIVER_OTHER_TEL_FIELD_DESC);
        oprot.writeString(struct.driverOtherTel);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TaskListDtoTupleSchemeFactory implements SchemeFactory {
    public TaskListDtoTupleScheme getScheme() {
      return new TaskListDtoTupleScheme();
    }
  }

  private static class TaskListDtoTupleScheme extends TupleScheme<TaskListDto> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TaskListDto struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetCode()) {
        optionals.set(1);
      }
      if (struct.isSetStatus()) {
        optionals.set(2);
      }
      if (struct.isSetOrderCount()) {
        optionals.set(3);
      }
      if (struct.isSetPassageCount()) {
        optionals.set(4);
      }
      if (struct.isSetEarliestFlightTime()) {
        optionals.set(5);
      }
      if (struct.isSetStartTime()) {
        optionals.set(6);
      }
      if (struct.isSetFinishTime()) {
        optionals.set(7);
      }
      if (struct.isSetVehicleNo()) {
        optionals.set(8);
      }
      if (struct.isSetVehicleId()) {
        optionals.set(9);
      }
      if (struct.isSetDriverName()) {
        optionals.set(10);
      }
      if (struct.isSetDriverId()) {
        optionals.set(11);
      }
      if (struct.isSetDriverTel()) {
        optionals.set(12);
      }
      if (struct.isSetDriverOtherTel()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetCode()) {
        oprot.writeString(struct.code);
      }
      if (struct.isSetStatus()) {
        oprot.writeString(struct.status);
      }
      if (struct.isSetOrderCount()) {
        oprot.writeI32(struct.orderCount);
      }
      if (struct.isSetPassageCount()) {
        oprot.writeI32(struct.passageCount);
      }
      if (struct.isSetEarliestFlightTime()) {
        oprot.writeI64(struct.earliestFlightTime);
      }
      if (struct.isSetStartTime()) {
        oprot.writeI64(struct.startTime);
      }
      if (struct.isSetFinishTime()) {
        oprot.writeI64(struct.finishTime);
      }
      if (struct.isSetVehicleNo()) {
        oprot.writeString(struct.vehicleNo);
      }
      if (struct.isSetVehicleId()) {
        oprot.writeString(struct.vehicleId);
      }
      if (struct.isSetDriverName()) {
        oprot.writeString(struct.driverName);
      }
      if (struct.isSetDriverId()) {
        oprot.writeString(struct.driverId);
      }
      if (struct.isSetDriverTel()) {
        oprot.writeString(struct.driverTel);
      }
      if (struct.isSetDriverOtherTel()) {
        oprot.writeString(struct.driverOtherTel);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TaskListDto struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.code = iprot.readString();
        struct.setCodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.status = iprot.readString();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(3)) {
        struct.orderCount = iprot.readI32();
        struct.setOrderCountIsSet(true);
      }
      if (incoming.get(4)) {
        struct.passageCount = iprot.readI32();
        struct.setPassageCountIsSet(true);
      }
      if (incoming.get(5)) {
        struct.earliestFlightTime = iprot.readI64();
        struct.setEarliestFlightTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.startTime = iprot.readI64();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.finishTime = iprot.readI64();
        struct.setFinishTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.vehicleNo = iprot.readString();
        struct.setVehicleNoIsSet(true);
      }
      if (incoming.get(9)) {
        struct.vehicleId = iprot.readString();
        struct.setVehicleIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.driverName = iprot.readString();
        struct.setDriverNameIsSet(true);
      }
      if (incoming.get(11)) {
        struct.driverId = iprot.readString();
        struct.setDriverIdIsSet(true);
      }
      if (incoming.get(12)) {
        struct.driverTel = iprot.readString();
        struct.setDriverTelIsSet(true);
      }
      if (incoming.get(13)) {
        struct.driverOtherTel = iprot.readString();
        struct.setDriverOtherTelIsSet(true);
      }
    }
  }

}

