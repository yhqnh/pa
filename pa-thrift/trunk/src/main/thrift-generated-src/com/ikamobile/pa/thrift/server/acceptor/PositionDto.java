/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ikamobile.pa.thrift.server.acceptor;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * 位置交换系统 thrift定义
 * 
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-7-21")
public class PositionDto implements org.apache.thrift.TBase<PositionDto, PositionDto._Fields>, java.io.Serializable, Cloneable, Comparable<PositionDto> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PositionDto");

  private static final org.apache.thrift.protocol.TField LONGITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField("longitude", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField LATITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField("latitude", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField AREA_FIELD_DESC = new org.apache.thrift.protocol.TField("area", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField POSITION_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("positionDesc", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PositionDtoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PositionDtoTupleSchemeFactory());
  }

  /**
   * 经度
   */
  public double longitude; // required
  /**
   * 上车地点维度
   */
  public double latitude; // required
  /**
   * 所属区域id
   */
  public AreaDto area; // required
  /**
   * 地点描述
   */
  public String positionDesc; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 经度
     */
    LONGITUDE((short)1, "longitude"),
    /**
     * 上车地点维度
     */
    LATITUDE((short)2, "latitude"),
    /**
     * 所属区域id
     */
    AREA((short)3, "area"),
    /**
     * 地点描述
     */
    POSITION_DESC((short)4, "positionDesc");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LONGITUDE
          return LONGITUDE;
        case 2: // LATITUDE
          return LATITUDE;
        case 3: // AREA
          return AREA;
        case 4: // POSITION_DESC
          return POSITION_DESC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LONGITUDE_ISSET_ID = 0;
  private static final int __LATITUDE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LONGITUDE, new org.apache.thrift.meta_data.FieldMetaData("longitude", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LATITUDE, new org.apache.thrift.meta_data.FieldMetaData("latitude", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.AREA, new org.apache.thrift.meta_data.FieldMetaData("area", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "AreaDto")));
    tmpMap.put(_Fields.POSITION_DESC, new org.apache.thrift.meta_data.FieldMetaData("positionDesc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PositionDto.class, metaDataMap);
  }

  public PositionDto() {
  }

  public PositionDto(
    double longitude,
    double latitude,
    AreaDto area,
    String positionDesc)
  {
    this();
    this.longitude = longitude;
    setLongitudeIsSet(true);
    this.latitude = latitude;
    setLatitudeIsSet(true);
    this.area = area;
    this.positionDesc = positionDesc;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PositionDto(PositionDto other) {
    __isset_bitfield = other.__isset_bitfield;
    this.longitude = other.longitude;
    this.latitude = other.latitude;
    if (other.isSetArea()) {
      this.area = other.area;
    }
    if (other.isSetPositionDesc()) {
      this.positionDesc = other.positionDesc;
    }
  }

  public PositionDto deepCopy() {
    return new PositionDto(this);
  }

  @Override
  public void clear() {
    setLongitudeIsSet(false);
    this.longitude = 0.0;
    setLatitudeIsSet(false);
    this.latitude = 0.0;
    this.area = null;
    this.positionDesc = null;
  }

  /**
   * 经度
   */
  public double getLongitude() {
    return this.longitude;
  }

  /**
   * 经度
   */
  public PositionDto setLongitude(double longitude) {
    this.longitude = longitude;
    setLongitudeIsSet(true);
    return this;
  }

  public void unsetLongitude() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LONGITUDE_ISSET_ID);
  }

  /** Returns true if field longitude is set (has been assigned a value) and false otherwise */
  public boolean isSetLongitude() {
    return EncodingUtils.testBit(__isset_bitfield, __LONGITUDE_ISSET_ID);
  }

  public void setLongitudeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LONGITUDE_ISSET_ID, value);
  }

  /**
   * 上车地点维度
   */
  public double getLatitude() {
    return this.latitude;
  }

  /**
   * 上车地点维度
   */
  public PositionDto setLatitude(double latitude) {
    this.latitude = latitude;
    setLatitudeIsSet(true);
    return this;
  }

  public void unsetLatitude() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LATITUDE_ISSET_ID);
  }

  /** Returns true if field latitude is set (has been assigned a value) and false otherwise */
  public boolean isSetLatitude() {
    return EncodingUtils.testBit(__isset_bitfield, __LATITUDE_ISSET_ID);
  }

  public void setLatitudeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LATITUDE_ISSET_ID, value);
  }

  /**
   * 所属区域id
   */
  public AreaDto getArea() {
    return this.area;
  }

  /**
   * 所属区域id
   */
  public PositionDto setArea(AreaDto area) {
    this.area = area;
    return this;
  }

  public void unsetArea() {
    this.area = null;
  }

  /** Returns true if field area is set (has been assigned a value) and false otherwise */
  public boolean isSetArea() {
    return this.area != null;
  }

  public void setAreaIsSet(boolean value) {
    if (!value) {
      this.area = null;
    }
  }

  /**
   * 地点描述
   */
  public String getPositionDesc() {
    return this.positionDesc;
  }

  /**
   * 地点描述
   */
  public PositionDto setPositionDesc(String positionDesc) {
    this.positionDesc = positionDesc;
    return this;
  }

  public void unsetPositionDesc() {
    this.positionDesc = null;
  }

  /** Returns true if field positionDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionDesc() {
    return this.positionDesc != null;
  }

  public void setPositionDescIsSet(boolean value) {
    if (!value) {
      this.positionDesc = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LONGITUDE:
      if (value == null) {
        unsetLongitude();
      } else {
        setLongitude((Double)value);
      }
      break;

    case LATITUDE:
      if (value == null) {
        unsetLatitude();
      } else {
        setLatitude((Double)value);
      }
      break;

    case AREA:
      if (value == null) {
        unsetArea();
      } else {
        setArea((AreaDto)value);
      }
      break;

    case POSITION_DESC:
      if (value == null) {
        unsetPositionDesc();
      } else {
        setPositionDesc((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LONGITUDE:
      return Double.valueOf(getLongitude());

    case LATITUDE:
      return Double.valueOf(getLatitude());

    case AREA:
      return getArea();

    case POSITION_DESC:
      return getPositionDesc();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LONGITUDE:
      return isSetLongitude();
    case LATITUDE:
      return isSetLatitude();
    case AREA:
      return isSetArea();
    case POSITION_DESC:
      return isSetPositionDesc();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PositionDto)
      return this.equals((PositionDto)that);
    return false;
  }

  public boolean equals(PositionDto that) {
    if (that == null)
      return false;

    boolean this_present_longitude = true;
    boolean that_present_longitude = true;
    if (this_present_longitude || that_present_longitude) {
      if (!(this_present_longitude && that_present_longitude))
        return false;
      if (this.longitude != that.longitude)
        return false;
    }

    boolean this_present_latitude = true;
    boolean that_present_latitude = true;
    if (this_present_latitude || that_present_latitude) {
      if (!(this_present_latitude && that_present_latitude))
        return false;
      if (this.latitude != that.latitude)
        return false;
    }

    boolean this_present_area = true && this.isSetArea();
    boolean that_present_area = true && that.isSetArea();
    if (this_present_area || that_present_area) {
      if (!(this_present_area && that_present_area))
        return false;
      if (!this.area.equals(that.area))
        return false;
    }

    boolean this_present_positionDesc = true && this.isSetPositionDesc();
    boolean that_present_positionDesc = true && that.isSetPositionDesc();
    if (this_present_positionDesc || that_present_positionDesc) {
      if (!(this_present_positionDesc && that_present_positionDesc))
        return false;
      if (!this.positionDesc.equals(that.positionDesc))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_longitude = true;
    list.add(present_longitude);
    if (present_longitude)
      list.add(longitude);

    boolean present_latitude = true;
    list.add(present_latitude);
    if (present_latitude)
      list.add(latitude);

    boolean present_area = true && (isSetArea());
    list.add(present_area);
    if (present_area)
      list.add(area);

    boolean present_positionDesc = true && (isSetPositionDesc());
    list.add(present_positionDesc);
    if (present_positionDesc)
      list.add(positionDesc);

    return list.hashCode();
  }

  @Override
  public int compareTo(PositionDto other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLongitude()).compareTo(other.isSetLongitude());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongitude()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longitude, other.longitude);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLatitude()).compareTo(other.isSetLatitude());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLatitude()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.latitude, other.latitude);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArea()).compareTo(other.isSetArea());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArea()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.area, other.area);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionDesc()).compareTo(other.isSetPositionDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionDesc, other.positionDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PositionDto(");
    boolean first = true;

    sb.append("longitude:");
    sb.append(this.longitude);
    first = false;
    if (!first) sb.append(", ");
    sb.append("latitude:");
    sb.append(this.latitude);
    first = false;
    if (!first) sb.append(", ");
    sb.append("area:");
    if (this.area == null) {
      sb.append("null");
    } else {
      sb.append(this.area);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("positionDesc:");
    if (this.positionDesc == null) {
      sb.append("null");
    } else {
      sb.append(this.positionDesc);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PositionDtoStandardSchemeFactory implements SchemeFactory {
    public PositionDtoStandardScheme getScheme() {
      return new PositionDtoStandardScheme();
    }
  }

  private static class PositionDtoStandardScheme extends StandardScheme<PositionDto> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PositionDto struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LONGITUDE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.longitude = iprot.readDouble();
              struct.setLongitudeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LATITUDE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.latitude = iprot.readDouble();
              struct.setLatitudeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AREA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.area = new AreaDto();
              struct.area.read(iprot);
              struct.setAreaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // POSITION_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.positionDesc = iprot.readString();
              struct.setPositionDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PositionDto struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LONGITUDE_FIELD_DESC);
      oprot.writeDouble(struct.longitude);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LATITUDE_FIELD_DESC);
      oprot.writeDouble(struct.latitude);
      oprot.writeFieldEnd();
      if (struct.area != null) {
        oprot.writeFieldBegin(AREA_FIELD_DESC);
        struct.area.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.positionDesc != null) {
        oprot.writeFieldBegin(POSITION_DESC_FIELD_DESC);
        oprot.writeString(struct.positionDesc);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PositionDtoTupleSchemeFactory implements SchemeFactory {
    public PositionDtoTupleScheme getScheme() {
      return new PositionDtoTupleScheme();
    }
  }

  private static class PositionDtoTupleScheme extends TupleScheme<PositionDto> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PositionDto struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLongitude()) {
        optionals.set(0);
      }
      if (struct.isSetLatitude()) {
        optionals.set(1);
      }
      if (struct.isSetArea()) {
        optionals.set(2);
      }
      if (struct.isSetPositionDesc()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetLongitude()) {
        oprot.writeDouble(struct.longitude);
      }
      if (struct.isSetLatitude()) {
        oprot.writeDouble(struct.latitude);
      }
      if (struct.isSetArea()) {
        struct.area.write(oprot);
      }
      if (struct.isSetPositionDesc()) {
        oprot.writeString(struct.positionDesc);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PositionDto struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.longitude = iprot.readDouble();
        struct.setLongitudeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.latitude = iprot.readDouble();
        struct.setLatitudeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.area = new AreaDto();
        struct.area.read(iprot);
        struct.setAreaIsSet(true);
      }
      if (incoming.get(3)) {
        struct.positionDesc = iprot.readString();
        struct.setPositionDescIsSet(true);
      }
    }
  }

}

