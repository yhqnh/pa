<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
    	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <import resource="classpath:spring-auth.xml"></import>

    <task:annotation-driven/>

    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations" value="classpath:spring-clientsapi.properties"/>
    </bean>

    <!-- dozer-->
    <!-- dozer -->
    <bean id="dozerBeanMapperFactoryBean" class="org.dozer.spring.DozerBeanMapperFactoryBean">
        <property name="mappingFiles">
            <list>
                <value>classpath:dozer/mapping.xml</value>
            </list>
        </property>
    </bean>
    <bean id="dozerBeanMapper" class="org.dozer.DozerBeanMapper" factory-bean="dozerBeanMapperFactoryBean"/>


    <!-- 扫描控制器包 -->
    <context:component-scan base-package="com.ikamobile.pa.clientsapi.**"/>

    <bean id="orderServiceClientProxy" class="com.ikamobile.pa.thrift.client.OrderServiceClientProxy">
        <property name="openThriftClient" ref="openThriftClient"/>
    </bean>

    <bean id="userServiceClientProxy" class="com.ikamobile.pa.thrift.client.UserServiceClientProxy">
        <property name="openThriftClient" ref="openThriftClient"/>
    </bean>

    <bean id="verityCodeServiceClientProxy" class="com.ikamobile.pa.thrift.client.VerityCodeServiceClientProxy">
        <property name="openThriftClient" ref="openThriftClient"/>
    </bean>

    <bean id="taskServiceClientProxy" class="com.ikamobile.pa.thrift.client.TaskServiceClientProxy">
        <property name="openThriftClient" ref="openThriftClient"/>
    </bean>

    <bean id="positionServiceClientProxy" class="com.ikamobile.pa.thrift.client.PositionServiceClientProxy">
        <property name="openThriftClient" ref="openThriftClient"/>
    </bean>

    <bean id="shiroServiceClientProxy" class="com.ikamobile.pa.thrift.client.ShiroServiceClientProxy">
        <property name="openThriftClient" ref="openThriftClient"/>
    </bean>

    <bean id="driverServiceClientProxy" class="com.ikamobile.pa.thrift.client.DriverServiceClientProxy">
        <property name="openThriftClient" ref="openThriftClient"/>
    </bean>

    <bean id="openThriftClient" class="com.ikamobile.pa.thrift.client.OpenThriftClient">
        <constructor-arg index="0">
            <value>${pa.thrift.server.ip}</value>
        </constructor-arg>
        <constructor-arg index="1">
            <value>${pa.thrift.server.port}</value>
        </constructor-arg>
    </bean>

    <!--&lt;!&ndash;spring mvc&ndash;&gt;-->
    <!--<mvc:interceptors>-->
        <!--&lt;!&ndash; 使用bean定义一个Interceptor，直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求 &ndash;&gt;-->
        <!--<bean class="com.ikamobile.pa.clientsapi.Interceptor.ExceptionInterceptor"/>-->
    <!--</mvc:interceptors>-->
    <!--spring mvc 统一处理请求异常-->
    <bean id="exceptionResolver" class="com.ikamobile.pa.clientsapi.Interceptor.PaExceptionHandleResolver"></bean>

    <mvc:view-controller path="/" view-name="index"/>
    <mvc:annotation-driven>
        <mvc:message-converters>
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/plain;charset=UTF-8</value>
                    </list>
                </property>
            </bean>
            <bean id="byteArrayMessageConverter"
                  class="org.springframework.http.converter.ByteArrayHttpMessageConverter"/>
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>application/json;charset=UTF-8</value>
                    </list>
                </property>
                <!--<property name="prettyPrint" value="true"></property>-->
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <mvc:resources location="/resource/" mapping="/resource/**"/>
    <mvc:resources location="/templates/" mapping="/templates/**"/>
    <mvc:resources location="/javadoc/" mapping="/javadoc/**"/>

    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    </bean>

    <bean id="freemarkerConfigurer" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
        <property name="templateLoaderPath" value="/templates/"/>
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="freemarkerSettings">
            <props>
                <prop key="template_update_delay">10</prop>
                <prop key="locale">zh_CN</prop>
                <prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
                <prop key="date_format">yyyy-MM-dd</prop>
            </props>
        </property>
    </bean>

    <!-- FreeMarker视图解析 如返回userinfo。。在这里配置后缀名html和视图解析器。。 -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.freemarker.FreeMarkerView"/>
        <property name="contentType" value="text/html;charset=UTF-8"/>
        <property name="exposeRequestAttributes" value="true"/>
        <property name="exposeSessionAttributes" value="true"/>
        <property name="exposeSpringMacroHelpers" value="true"/>
        <property name="cache" value="true"/>
        <property name="prefix" value=""/>
        <property name="suffix" value=".html"/>
        <property name="requestContextAttribute" value="basePath"></property>
    </bean>


    <!--<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">-->
        <!--<property name="securityManager" ref="securityManager"/>-->
        <!--<property name="loginUrl" value="/user/notLogin"/>-->
        <!--<property name="unauthorizedUrl" value="/user/unauthorized"/>-->
        <!--<property name="filterChainDefinitions">-->
            <!--<value>-->
                <!--/index.html = anon-->
                <!--/**/login = anon-->
                <!--/pa/** = anon-->
                <!--/** = user-->
            <!--</value>-->
        <!--</property>-->
    <!--</bean>-->

    <!--&lt;!&ndash; 注解 &ndash;&gt;-->
    <!--<aop:config proxy-target-class="true"></aop:config>-->
    <!--<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">-->
        <!--<property name="securityManager" ref="securityManager"/>-->
    <!--</bean>-->

    <!--&lt;!&ndash; Define the Shiro Realm implementation you want to use to connect to your back-end &ndash;&gt;-->
    <!--&lt;!&ndash; security datasource: &ndash;&gt;-->
    <!--<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">-->
        <!--<property name="realm" ref="userRealm"/>-->
        <!--<property name="sessionManager" ref="sessionManager"/>-->
        <!--<property name="rememberMeManager" ref="rememberMeManager"/>-->
    <!--</bean>-->

    <!--<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">-->
        <!--<property name="globalSessionTimeout" value="30000"></property>-->
        <!--&lt;!&ndash;<property name="globalSessionTimeout" value="1800000"></property>&ndash;&gt;-->
        <!--<property name="sessionIdCookieEnabled" value="true"></property>-->
        <!--<property name="sessionIdCookie" ref="sessionIdCookie"></property>-->
    <!--</bean>-->

    <!--&lt;!&ndash; 凭证匹配器 &ndash;&gt;-->
    <!--<bean id="credentialsMatcher" class="com.ikamobile.pa.shiro.RetryLimitHashedCredentialsMatcher">-->
        <!--<property name="hashAlgorithmName" value="md5"/>-->
        <!--<property name="hashIterations" value="2"/>-->
        <!--<property name="storedCredentialsHexEncoded" value="true"/>-->
    <!--</bean>-->

    <!--&lt;!&ndash; Realm实现 &ndash;&gt;-->
    <!--<bean id="userRealm" class="com.ikamobile.pa.shiro.UserRealm">-->
        <!--<property name="credentialsMatcher" ref="credentialsMatcher"/>-->
        <!--<property name="shiroServiceClientProxy" ref="shiroServiceClientProxy"/>-->
    <!--</bean>-->

    <!--<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">-->
        <!--<constructor-arg value="JSESSIONID"/>-->
        <!--<property name="httpOnly" value="true"/>-->
        <!--<property name="maxAge" value="-1"/>-->
    <!--</bean>-->

    <!--<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">-->
        <!--<property name="httpOnly" value="true"/>-->
        <!--&lt;!&ndash;<property name="maxAge" value="864000"/>&lt;!&ndash; 10天&ndash;&gt;&ndash;&gt;-->
        <!--<property name="maxAge" value="60"/>&lt;!&ndash; 10天&ndash;&gt;-->
        <!--<property name="name" value="rememberMe"></property>-->
        <!--<property name="secure" value="true"></property>-->
    <!--</bean>-->

    <!--&lt;!&ndash; rememberMe管理器&ndash;&gt;-->
    <!--<bean id="rememberMeManager"-->
          <!--class="org.apache.shiro.web.mgt.CookieRememberMeManager">-->
        <!--<property name="cookie" ref="rememberMeCookie"/>-->
        <!--<property name="cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}"/>-->
    <!--</bean>-->

    <!--<bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler">-->
        <!--<property name="interval" value="1800000"></property>-->
    <!--</bean>-->

    <!-- 以下 validator  ConversionService 在使用 mvc:annotation-driven 会 自动注册-->
    <!--<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">-->
        <!--<property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>-->
        <!--&lt;!&ndash; 如果不加默认到 使用classpath下的 ValidationMessages.properties &ndash;&gt;-->
        <!--<property name="validationMessageSource" ref="validationMessageSource"/>-->
    <!--</bean>-->

    <bean class="org.springframework.validation.beanvalidation.MethodValidationPostProcessor"/>

    <!-- 验证消息资源文件 -->
    <!--<bean id="validationMessageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">-->
        <!--<property name="basenames">-->
            <!--<list>-->
                <!--<value>validationMessageSource</value>-->
                <!--<value>org/hibernate/validator/ValidationMessages</value>-->
            <!--</list>-->
        <!--</property>-->
        <!--<property name="useCodeAsDefaultMessage" value="false"/>-->
        <!--<property name="defaultEncoding" value="UTF-8"/>-->
        <!--<property name="cacheSeconds" value="60"/>-->
    <!--</bean>-->
</beans>
